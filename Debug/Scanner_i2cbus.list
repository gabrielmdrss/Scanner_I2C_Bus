
Scanner_i2cbus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003260  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b0  080033e8  080033e8  000043e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b98  08003b98  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003b98  08003b98  00004b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ba0  08003ba0  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ba0  08003ba0  00004ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ba4  08003ba4  00004ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003ba8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          000004c4  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004d0  200004d0  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b354  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a76  00000000  00000000  00010390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a20  00000000  00000000  00011e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007e1  00000000  00000000  00012828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020aac  00000000  00000000  00013009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d3c5  00000000  00000000  00033ab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5c0d  00000000  00000000  00040e7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00106a87  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002a10  00000000  00000000  00106acc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  001094dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080033d0 	.word	0x080033d0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080033d0 	.word	0x080033d0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <MPU6050_Init>:
float Ax, Ay, Az;

void MPU6050_Init();
void MPU6050_Read_Accel();

void MPU6050_Init (void){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b086      	sub	sp, #24
 80004bc:	af04      	add	r7, sp, #16
uint8_t check = 0;
 80004be:	2300      	movs	r3, #0
 80004c0:	71fb      	strb	r3, [r7, #7]
uint8_t Data;
// check device ID WHO_AM_I
HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, 0x75, 1, &check, 1, 1000);
 80004c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80004c6:	9302      	str	r3, [sp, #8]
 80004c8:	2301      	movs	r3, #1
 80004ca:	9301      	str	r3, [sp, #4]
 80004cc:	1dfb      	adds	r3, r7, #7
 80004ce:	9300      	str	r3, [sp, #0]
 80004d0:	2301      	movs	r3, #1
 80004d2:	2275      	movs	r2, #117	@ 0x75
 80004d4:	2168      	movs	r1, #104	@ 0x68
 80004d6:	4823      	ldr	r0, [pc, #140]	@ (8000564 <MPU6050_Init+0xac>)
 80004d8:	f001 f814 	bl	8001504 <HAL_I2C_Mem_Read>
if (check == 0x70) // 0x68 will be returned by the sensor if OK
 80004dc:	79fb      	ldrb	r3, [r7, #7]
 80004de:	2b70      	cmp	r3, #112	@ 0x70
 80004e0:	d13b      	bne.n	800055a <MPU6050_Init+0xa2>
{

// power management register 0X6B we should write all 0's to wake the sensor up
Data = 0;
 80004e2:	2300      	movs	r3, #0
 80004e4:	71bb      	strb	r3, [r7, #6]
HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x6B, 1,&Data, 1, 1000);
 80004e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80004ea:	9302      	str	r3, [sp, #8]
 80004ec:	2301      	movs	r3, #1
 80004ee:	9301      	str	r3, [sp, #4]
 80004f0:	1dbb      	adds	r3, r7, #6
 80004f2:	9300      	str	r3, [sp, #0]
 80004f4:	2301      	movs	r3, #1
 80004f6:	226b      	movs	r2, #107	@ 0x6b
 80004f8:	2168      	movs	r1, #104	@ 0x68
 80004fa:	481a      	ldr	r0, [pc, #104]	@ (8000564 <MPU6050_Init+0xac>)
 80004fc:	f000 ff08 	bl	8001310 <HAL_I2C_Mem_Write>
// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
Data = 0x07;
 8000500:	2307      	movs	r3, #7
 8000502:	71bb      	strb	r3, [r7, #6]
HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x19, 1, &Data, 1, 1000);
 8000504:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000508:	9302      	str	r3, [sp, #8]
 800050a:	2301      	movs	r3, #1
 800050c:	9301      	str	r3, [sp, #4]
 800050e:	1dbb      	adds	r3, r7, #6
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	2301      	movs	r3, #1
 8000514:	2219      	movs	r2, #25
 8000516:	2168      	movs	r1, #104	@ 0x68
 8000518:	4812      	ldr	r0, [pc, #72]	@ (8000564 <MPU6050_Init+0xac>)
 800051a:	f000 fef9 	bl	8001310 <HAL_I2C_Mem_Write>
// Set Gyroscopic configuration in GYRO_CONFIG Register
Data = 0x00; // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ± 250 ̐/s
 800051e:	2300      	movs	r3, #0
 8000520:	71bb      	strb	r3, [r7, #6]
HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x1B, 1, &Data, 1, 1000);
 8000522:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000526:	9302      	str	r3, [sp, #8]
 8000528:	2301      	movs	r3, #1
 800052a:	9301      	str	r3, [sp, #4]
 800052c:	1dbb      	adds	r3, r7, #6
 800052e:	9300      	str	r3, [sp, #0]
 8000530:	2301      	movs	r3, #1
 8000532:	221b      	movs	r2, #27
 8000534:	2168      	movs	r1, #104	@ 0x68
 8000536:	480b      	ldr	r0, [pc, #44]	@ (8000564 <MPU6050_Init+0xac>)
 8000538:	f000 feea 	bl	8001310 <HAL_I2C_Mem_Write>
// Set accelerometer configuration in ACCEL_CONFIG Register
Data = 0x00; // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ± 2g
 800053c:	2300      	movs	r3, #0
 800053e:	71bb      	strb	r3, [r7, #6]
HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x1C, 1, &Data, 1, 1000);
 8000540:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000544:	9302      	str	r3, [sp, #8]
 8000546:	2301      	movs	r3, #1
 8000548:	9301      	str	r3, [sp, #4]
 800054a:	1dbb      	adds	r3, r7, #6
 800054c:	9300      	str	r3, [sp, #0]
 800054e:	2301      	movs	r3, #1
 8000550:	221c      	movs	r2, #28
 8000552:	2168      	movs	r1, #104	@ 0x68
 8000554:	4803      	ldr	r0, [pc, #12]	@ (8000564 <MPU6050_Init+0xac>)
 8000556:	f000 fedb 	bl	8001310 <HAL_I2C_Mem_Write>
}}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	20000028 	.word	0x20000028

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fa73 	bl	8000a58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f823 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f8d7 	bl	8000728 <MX_GPIO_Init>
  MX_I2C1_Init();
 800057a:	f000 f87d 	bl	8000678 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800057e:	f000 f8a9 	bl	80006d4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	/* Inicialize o display SSD1306 */
	ssd1306_Init();
 8000582:	f002 fcfb 	bl	8002f7c <ssd1306_Init>
	/* Exiba a mensagem no display */
	ssd1306_Fill(0); // Limpe o display
 8000586:	2000      	movs	r0, #0
 8000588:	f002 fd62 	bl	8003050 <ssd1306_Fill>
	ssd1306_SetCursor(2, 30); // Defina a posição inicial
 800058c:	211e      	movs	r1, #30
 800058e:	2002      	movs	r0, #2
 8000590:	f002 fea8 	bl	80032e4 <ssd1306_SetCursor>
	ssd1306_WriteString("Hello world", Font_7x10, 1); // Escreva a mensagem
 8000594:	4b07      	ldr	r3, [pc, #28]	@ (80005b4 <main+0x4c>)
 8000596:	2201      	movs	r2, #1
 8000598:	9200      	str	r2, [sp, #0]
 800059a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800059c:	4806      	ldr	r0, [pc, #24]	@ (80005b8 <main+0x50>)
 800059e:	f002 fe7b 	bl	8003298 <ssd1306_WriteString>
	ssd1306_UpdateScreen(); // Atualize o display
 80005a2:	f002 fd6d 	bl	8003080 <ssd1306_UpdateScreen>
	/*Mostrar uma leitura do acelerômetro, no display*/

	MPU6050_Init();
 80005a6:	f7ff ff87 	bl	80004b8 <MPU6050_Init>
	HAL_Delay(1);
 80005aa:	2001      	movs	r0, #1
 80005ac:	f000 fac6 	bl	8000b3c <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80005b0:	bf00      	nop
 80005b2:	e7fd      	b.n	80005b0 <main+0x48>
 80005b4:	08003b8c 	.word	0x08003b8c
 80005b8:	080033fc 	.word	0x080033fc

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	@ 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0320 	add.w	r3, r7, #32
 80005c6:	2230      	movs	r2, #48	@ 0x30
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f002 fed4 	bl	8003378 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	2300      	movs	r3, #0
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	4b22      	ldr	r3, [pc, #136]	@ (8000670 <SystemClock_Config+0xb4>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e8:	4a21      	ldr	r2, [pc, #132]	@ (8000670 <SystemClock_Config+0xb4>)
 80005ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80005f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000670 <SystemClock_Config+0xb4>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005fc:	2300      	movs	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	4b1c      	ldr	r3, [pc, #112]	@ (8000674 <SystemClock_Config+0xb8>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a1b      	ldr	r2, [pc, #108]	@ (8000674 <SystemClock_Config+0xb8>)
 8000606:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800060a:	6013      	str	r3, [r2, #0]
 800060c:	4b19      	ldr	r3, [pc, #100]	@ (8000674 <SystemClock_Config+0xb8>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000618:	2302      	movs	r3, #2
 800061a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800061c:	2301      	movs	r3, #1
 800061e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000620:	2310      	movs	r3, #16
 8000622:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000624:	2300      	movs	r3, #0
 8000626:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000628:	f107 0320 	add.w	r3, r7, #32
 800062c:	4618      	mov	r0, r3
 800062e:	f001 fd4f 	bl	80020d0 <HAL_RCC_OscConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000638:	f000 f8e4 	bl	8000804 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063c:	230f      	movs	r3, #15
 800063e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000640:	2300      	movs	r3, #0
 8000642:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f001 ffb2 	bl	80025c0 <HAL_RCC_ClockConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000662:	f000 f8cf 	bl	8000804 <Error_Handler>
  }
}
 8000666:	bf00      	nop
 8000668:	3750      	adds	r7, #80	@ 0x50
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40023800 	.word	0x40023800
 8000674:	40007000 	.word	0x40007000

08000678 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800067c:	4b12      	ldr	r3, [pc, #72]	@ (80006c8 <MX_I2C1_Init+0x50>)
 800067e:	4a13      	ldr	r2, [pc, #76]	@ (80006cc <MX_I2C1_Init+0x54>)
 8000680:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000682:	4b11      	ldr	r3, [pc, #68]	@ (80006c8 <MX_I2C1_Init+0x50>)
 8000684:	4a12      	ldr	r2, [pc, #72]	@ (80006d0 <MX_I2C1_Init+0x58>)
 8000686:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000688:	4b0f      	ldr	r3, [pc, #60]	@ (80006c8 <MX_I2C1_Init+0x50>)
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800068e:	4b0e      	ldr	r3, [pc, #56]	@ (80006c8 <MX_I2C1_Init+0x50>)
 8000690:	2200      	movs	r2, #0
 8000692:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000694:	4b0c      	ldr	r3, [pc, #48]	@ (80006c8 <MX_I2C1_Init+0x50>)
 8000696:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800069a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800069c:	4b0a      	ldr	r3, [pc, #40]	@ (80006c8 <MX_I2C1_Init+0x50>)
 800069e:	2200      	movs	r2, #0
 80006a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006a2:	4b09      	ldr	r3, [pc, #36]	@ (80006c8 <MX_I2C1_Init+0x50>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006a8:	4b07      	ldr	r3, [pc, #28]	@ (80006c8 <MX_I2C1_Init+0x50>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ae:	4b06      	ldr	r3, [pc, #24]	@ (80006c8 <MX_I2C1_Init+0x50>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006b4:	4804      	ldr	r0, [pc, #16]	@ (80006c8 <MX_I2C1_Init+0x50>)
 80006b6:	f000 fce7 	bl	8001088 <HAL_I2C_Init>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006c0:	f000 f8a0 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000028 	.word	0x20000028
 80006cc:	40005400 	.word	0x40005400
 80006d0:	00061a80 	.word	0x00061a80

080006d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006d8:	4b10      	ldr	r3, [pc, #64]	@ (800071c <MX_USART1_UART_Init+0x48>)
 80006da:	4a11      	ldr	r2, [pc, #68]	@ (8000720 <MX_USART1_UART_Init+0x4c>)
 80006dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 80006de:	4b0f      	ldr	r3, [pc, #60]	@ (800071c <MX_USART1_UART_Init+0x48>)
 80006e0:	4a10      	ldr	r2, [pc, #64]	@ (8000724 <MX_USART1_UART_Init+0x50>)
 80006e2:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006e4:	4b0d      	ldr	r3, [pc, #52]	@ (800071c <MX_USART1_UART_Init+0x48>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006ea:	4b0c      	ldr	r3, [pc, #48]	@ (800071c <MX_USART1_UART_Init+0x48>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006f0:	4b0a      	ldr	r3, [pc, #40]	@ (800071c <MX_USART1_UART_Init+0x48>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006f6:	4b09      	ldr	r3, [pc, #36]	@ (800071c <MX_USART1_UART_Init+0x48>)
 80006f8:	220c      	movs	r2, #12
 80006fa:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fc:	4b07      	ldr	r3, [pc, #28]	@ (800071c <MX_USART1_UART_Init+0x48>)
 80006fe:	2200      	movs	r2, #0
 8000700:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000702:	4b06      	ldr	r3, [pc, #24]	@ (800071c <MX_USART1_UART_Init+0x48>)
 8000704:	2200      	movs	r2, #0
 8000706:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000708:	4804      	ldr	r0, [pc, #16]	@ (800071c <MX_USART1_UART_Init+0x48>)
 800070a:	f002 f939 	bl	8002980 <HAL_UART_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8000714:	f000 f876 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	2000007c 	.word	0x2000007c
 8000720:	40011000 	.word	0x40011000
 8000724:	000f4240 	.word	0x000f4240

08000728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b088      	sub	sp, #32
 800072c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072e:	f107 030c 	add.w	r3, r7, #12
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	4b15      	ldr	r3, [pc, #84]	@ (8000798 <MX_GPIO_Init+0x70>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	4a14      	ldr	r2, [pc, #80]	@ (8000798 <MX_GPIO_Init+0x70>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	6313      	str	r3, [r2, #48]	@ 0x30
 800074e:	4b12      	ldr	r3, [pc, #72]	@ (8000798 <MX_GPIO_Init+0x70>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	4b0e      	ldr	r3, [pc, #56]	@ (8000798 <MX_GPIO_Init+0x70>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	4a0d      	ldr	r2, [pc, #52]	@ (8000798 <MX_GPIO_Init+0x70>)
 8000764:	f043 0302 	orr.w	r3, r3, #2
 8000768:	6313      	str	r3, [r2, #48]	@ 0x30
 800076a:	4b0b      	ldr	r3, [pc, #44]	@ (8000798 <MX_GPIO_Init+0x70>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	f003 0302 	and.w	r3, r3, #2
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000776:	2380      	movs	r3, #128	@ 0x80
 8000778:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	4619      	mov	r1, r3
 8000788:	4804      	ldr	r0, [pc, #16]	@ (800079c <MX_GPIO_Init+0x74>)
 800078a:	f000 fae1 	bl	8000d50 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800078e:	bf00      	nop
 8000790:	3720      	adds	r7, #32
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40023800 	.word	0x40023800
 800079c:	40020000 	.word	0x40020000

080007a0 <__io_putchar>:
//void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
//{
//	verifica = 1;
//}

int __io_putchar(int ch) {
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
	USART1->DR = (ch & (uint16_t) 0x01FF);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	4a09      	ldr	r2, [pc, #36]	@ (80007d0 <__io_putchar+0x30>)
 80007ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80007b0:	6053      	str	r3, [r2, #4]
	while (!(USART1->SR & USART_SR_TXE))
 80007b2:	bf00      	nop
 80007b4:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <__io_putchar+0x30>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d0f9      	beq.n	80007b4 <__io_putchar+0x14>
		;//espera pelo fim da transmissão do caractere para evitar a segunda transmissão antes da primeira ser concluída
	return ch;
 80007c0:	687b      	ldr	r3, [r7, #4]
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	40011000 	.word	0x40011000

080007d4 <__io_getchar>:
int __io_getchar(void) {
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
	return (uint16_t) (USART1->DR & (uint16_t) 0x01FF);
 80007d8:	4b04      	ldr	r3, [pc, #16]	@ (80007ec <__io_getchar+0x18>)
 80007da:	685b      	ldr	r3, [r3, #4]
 80007dc:	b29b      	uxth	r3, r3
 80007de:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	40011000 	.word	0x40011000

080007f0 <USART1_IRQHandler>:
//ISR da USART1. Todas as ISR's estão definidas no arquivo startup_stm32.s
void USART1_IRQHandler(void) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
	__io_putchar(__io_getchar());
 80007f4:	f7ff ffee 	bl	80007d4 <__io_getchar>
 80007f8:	4603      	mov	r3, r0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff ffd0 	bl	80007a0 <__io_putchar>
}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}

08000804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000808:	b672      	cpsid	i
}
 800080a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800080c:	bf00      	nop
 800080e:	e7fd      	b.n	800080c <Error_Handler+0x8>

08000810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	4b10      	ldr	r3, [pc, #64]	@ (800085c <HAL_MspInit+0x4c>)
 800081c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800081e:	4a0f      	ldr	r2, [pc, #60]	@ (800085c <HAL_MspInit+0x4c>)
 8000820:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000824:	6453      	str	r3, [r2, #68]	@ 0x44
 8000826:	4b0d      	ldr	r3, [pc, #52]	@ (800085c <HAL_MspInit+0x4c>)
 8000828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800082a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	603b      	str	r3, [r7, #0]
 8000836:	4b09      	ldr	r3, [pc, #36]	@ (800085c <HAL_MspInit+0x4c>)
 8000838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800083a:	4a08      	ldr	r2, [pc, #32]	@ (800085c <HAL_MspInit+0x4c>)
 800083c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000840:	6413      	str	r3, [r2, #64]	@ 0x40
 8000842:	4b06      	ldr	r3, [pc, #24]	@ (800085c <HAL_MspInit+0x4c>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000846:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800084a:	603b      	str	r3, [r7, #0]
 800084c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084e:	bf00      	nop
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	40023800 	.word	0x40023800

08000860 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08a      	sub	sp, #40	@ 0x28
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a19      	ldr	r2, [pc, #100]	@ (80008e4 <HAL_I2C_MspInit+0x84>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d12c      	bne.n	80008dc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	613b      	str	r3, [r7, #16]
 8000886:	4b18      	ldr	r3, [pc, #96]	@ (80008e8 <HAL_I2C_MspInit+0x88>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	4a17      	ldr	r2, [pc, #92]	@ (80008e8 <HAL_I2C_MspInit+0x88>)
 800088c:	f043 0302 	orr.w	r3, r3, #2
 8000890:	6313      	str	r3, [r2, #48]	@ 0x30
 8000892:	4b15      	ldr	r3, [pc, #84]	@ (80008e8 <HAL_I2C_MspInit+0x88>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	f003 0302 	and.w	r3, r3, #2
 800089a:	613b      	str	r3, [r7, #16]
 800089c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800089e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80008a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008a4:	2312      	movs	r3, #18
 80008a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ac:	2303      	movs	r3, #3
 80008ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008b0:	2304      	movs	r3, #4
 80008b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	4619      	mov	r1, r3
 80008ba:	480c      	ldr	r0, [pc, #48]	@ (80008ec <HAL_I2C_MspInit+0x8c>)
 80008bc:	f000 fa48 	bl	8000d50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008c0:	2300      	movs	r3, #0
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	4b08      	ldr	r3, [pc, #32]	@ (80008e8 <HAL_I2C_MspInit+0x88>)
 80008c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c8:	4a07      	ldr	r2, [pc, #28]	@ (80008e8 <HAL_I2C_MspInit+0x88>)
 80008ca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80008d0:	4b05      	ldr	r3, [pc, #20]	@ (80008e8 <HAL_I2C_MspInit+0x88>)
 80008d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80008dc:	bf00      	nop
 80008de:	3728      	adds	r7, #40	@ 0x28
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40005400 	.word	0x40005400
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40020400 	.word	0x40020400

080008f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08a      	sub	sp, #40	@ 0x28
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a19      	ldr	r2, [pc, #100]	@ (8000974 <HAL_UART_MspInit+0x84>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d12c      	bne.n	800096c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	613b      	str	r3, [r7, #16]
 8000916:	4b18      	ldr	r3, [pc, #96]	@ (8000978 <HAL_UART_MspInit+0x88>)
 8000918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800091a:	4a17      	ldr	r2, [pc, #92]	@ (8000978 <HAL_UART_MspInit+0x88>)
 800091c:	f043 0310 	orr.w	r3, r3, #16
 8000920:	6453      	str	r3, [r2, #68]	@ 0x44
 8000922:	4b15      	ldr	r3, [pc, #84]	@ (8000978 <HAL_UART_MspInit+0x88>)
 8000924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000926:	f003 0310 	and.w	r3, r3, #16
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	4b11      	ldr	r3, [pc, #68]	@ (8000978 <HAL_UART_MspInit+0x88>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	4a10      	ldr	r2, [pc, #64]	@ (8000978 <HAL_UART_MspInit+0x88>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	6313      	str	r3, [r2, #48]	@ 0x30
 800093e:	4b0e      	ldr	r3, [pc, #56]	@ (8000978 <HAL_UART_MspInit+0x88>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800094a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800094e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000950:	2302      	movs	r3, #2
 8000952:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000958:	2303      	movs	r3, #3
 800095a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800095c:	2307      	movs	r3, #7
 800095e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	4619      	mov	r1, r3
 8000966:	4805      	ldr	r0, [pc, #20]	@ (800097c <HAL_UART_MspInit+0x8c>)
 8000968:	f000 f9f2 	bl	8000d50 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800096c:	bf00      	nop
 800096e:	3728      	adds	r7, #40	@ 0x28
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40011000 	.word	0x40011000
 8000978:	40023800 	.word	0x40023800
 800097c:	40020000 	.word	0x40020000

08000980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <NMI_Handler+0x4>

08000988 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <HardFault_Handler+0x4>

08000990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000994:	bf00      	nop
 8000996:	e7fd      	b.n	8000994 <MemManage_Handler+0x4>

08000998 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <BusFault_Handler+0x4>

080009a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <UsageFault_Handler+0x4>

080009a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr

080009b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr

080009d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d6:	f000 f891 	bl	8000afc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
	...

080009e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009e4:	4b06      	ldr	r3, [pc, #24]	@ (8000a00 <SystemInit+0x20>)
 80009e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009ea:	4a05      	ldr	r2, [pc, #20]	@ (8000a00 <SystemInit+0x20>)
 80009ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a3c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a08:	f7ff ffea 	bl	80009e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a0c:	480c      	ldr	r0, [pc, #48]	@ (8000a40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a0e:	490d      	ldr	r1, [pc, #52]	@ (8000a44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a10:	4a0d      	ldr	r2, [pc, #52]	@ (8000a48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a14:	e002      	b.n	8000a1c <LoopCopyDataInit>

08000a16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a1a:	3304      	adds	r3, #4

08000a1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a20:	d3f9      	bcc.n	8000a16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a22:	4a0a      	ldr	r2, [pc, #40]	@ (8000a4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a24:	4c0a      	ldr	r4, [pc, #40]	@ (8000a50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a28:	e001      	b.n	8000a2e <LoopFillZerobss>

08000a2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a2c:	3204      	adds	r2, #4

08000a2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a30:	d3fb      	bcc.n	8000a2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a32:	f002 fca9 	bl	8003388 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a36:	f7ff fd97 	bl	8000568 <main>
  bx  lr    
 8000a3a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a44:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a48:	08003ba8 	.word	0x08003ba8
  ldr r2, =_sbss
 8000a4c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a50:	200004d0 	.word	0x200004d0

08000a54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a54:	e7fe      	b.n	8000a54 <ADC_IRQHandler>
	...

08000a58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a98 <HAL_Init+0x40>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a0d      	ldr	r2, [pc, #52]	@ (8000a98 <HAL_Init+0x40>)
 8000a62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a68:	4b0b      	ldr	r3, [pc, #44]	@ (8000a98 <HAL_Init+0x40>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a0a      	ldr	r2, [pc, #40]	@ (8000a98 <HAL_Init+0x40>)
 8000a6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a74:	4b08      	ldr	r3, [pc, #32]	@ (8000a98 <HAL_Init+0x40>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a07      	ldr	r2, [pc, #28]	@ (8000a98 <HAL_Init+0x40>)
 8000a7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a80:	2003      	movs	r0, #3
 8000a82:	f000 f931 	bl	8000ce8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a86:	200f      	movs	r0, #15
 8000a88:	f000 f808 	bl	8000a9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a8c:	f7ff fec0 	bl	8000810 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a90:	2300      	movs	r3, #0
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40023c00 	.word	0x40023c00

08000a9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aa4:	4b12      	ldr	r3, [pc, #72]	@ (8000af0 <HAL_InitTick+0x54>)
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	4b12      	ldr	r3, [pc, #72]	@ (8000af4 <HAL_InitTick+0x58>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	4619      	mov	r1, r3
 8000aae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ab2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aba:	4618      	mov	r0, r3
 8000abc:	f000 f93b 	bl	8000d36 <HAL_SYSTICK_Config>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e00e      	b.n	8000ae8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2b0f      	cmp	r3, #15
 8000ace:	d80a      	bhi.n	8000ae6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	6879      	ldr	r1, [r7, #4]
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad8:	f000 f911 	bl	8000cfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000adc:	4a06      	ldr	r2, [pc, #24]	@ (8000af8 <HAL_InitTick+0x5c>)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e000      	b.n	8000ae8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000000 	.word	0x20000000
 8000af4:	20000008 	.word	0x20000008
 8000af8:	20000004 	.word	0x20000004

08000afc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b00:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <HAL_IncTick+0x20>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	461a      	mov	r2, r3
 8000b06:	4b06      	ldr	r3, [pc, #24]	@ (8000b20 <HAL_IncTick+0x24>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	4a04      	ldr	r2, [pc, #16]	@ (8000b20 <HAL_IncTick+0x24>)
 8000b0e:	6013      	str	r3, [r2, #0]
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	20000008 	.word	0x20000008
 8000b20:	200000c4 	.word	0x200000c4

08000b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  return uwTick;
 8000b28:	4b03      	ldr	r3, [pc, #12]	@ (8000b38 <HAL_GetTick+0x14>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	200000c4 	.word	0x200000c4

08000b3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b44:	f7ff ffee 	bl	8000b24 <HAL_GetTick>
 8000b48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b54:	d005      	beq.n	8000b62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b56:	4b0a      	ldr	r3, [pc, #40]	@ (8000b80 <HAL_Delay+0x44>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	4413      	add	r3, r2
 8000b60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b62:	bf00      	nop
 8000b64:	f7ff ffde 	bl	8000b24 <HAL_GetTick>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	68fa      	ldr	r2, [r7, #12]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d8f7      	bhi.n	8000b64 <HAL_Delay+0x28>
  {
  }
}
 8000b74:	bf00      	nop
 8000b76:	bf00      	nop
 8000b78:	3710      	adds	r7, #16
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000008 	.word	0x20000008

08000b84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f003 0307 	and.w	r3, r3, #7
 8000b92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b94:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b9a:	68ba      	ldr	r2, [r7, #8]
 8000b9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bb6:	4a04      	ldr	r2, [pc, #16]	@ (8000bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	60d3      	str	r3, [r2, #12]
}
 8000bbc:	bf00      	nop
 8000bbe:	3714      	adds	r7, #20
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd0:	4b04      	ldr	r3, [pc, #16]	@ (8000be4 <__NVIC_GetPriorityGrouping+0x18>)
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	0a1b      	lsrs	r3, r3, #8
 8000bd6:	f003 0307 	and.w	r3, r3, #7
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	6039      	str	r1, [r7, #0]
 8000bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	db0a      	blt.n	8000c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	b2da      	uxtb	r2, r3
 8000c00:	490c      	ldr	r1, [pc, #48]	@ (8000c34 <__NVIC_SetPriority+0x4c>)
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	0112      	lsls	r2, r2, #4
 8000c08:	b2d2      	uxtb	r2, r2
 8000c0a:	440b      	add	r3, r1
 8000c0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c10:	e00a      	b.n	8000c28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	b2da      	uxtb	r2, r3
 8000c16:	4908      	ldr	r1, [pc, #32]	@ (8000c38 <__NVIC_SetPriority+0x50>)
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	f003 030f 	and.w	r3, r3, #15
 8000c1e:	3b04      	subs	r3, #4
 8000c20:	0112      	lsls	r2, r2, #4
 8000c22:	b2d2      	uxtb	r2, r2
 8000c24:	440b      	add	r3, r1
 8000c26:	761a      	strb	r2, [r3, #24]
}
 8000c28:	bf00      	nop
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000e100 	.word	0xe000e100
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b089      	sub	sp, #36	@ 0x24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	60b9      	str	r1, [r7, #8]
 8000c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	f003 0307 	and.w	r3, r3, #7
 8000c4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c50:	69fb      	ldr	r3, [r7, #28]
 8000c52:	f1c3 0307 	rsb	r3, r3, #7
 8000c56:	2b04      	cmp	r3, #4
 8000c58:	bf28      	it	cs
 8000c5a:	2304      	movcs	r3, #4
 8000c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	3304      	adds	r3, #4
 8000c62:	2b06      	cmp	r3, #6
 8000c64:	d902      	bls.n	8000c6c <NVIC_EncodePriority+0x30>
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	3b03      	subs	r3, #3
 8000c6a:	e000      	b.n	8000c6e <NVIC_EncodePriority+0x32>
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c70:	f04f 32ff 	mov.w	r2, #4294967295
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	43da      	mvns	r2, r3
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	401a      	ands	r2, r3
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c84:	f04f 31ff 	mov.w	r1, #4294967295
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8e:	43d9      	mvns	r1, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c94:	4313      	orrs	r3, r2
         );
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3724      	adds	r7, #36	@ 0x24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
	...

08000ca4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cb4:	d301      	bcc.n	8000cba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e00f      	b.n	8000cda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cba:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce4 <SysTick_Config+0x40>)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cc2:	210f      	movs	r1, #15
 8000cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc8:	f7ff ff8e 	bl	8000be8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ccc:	4b05      	ldr	r3, [pc, #20]	@ (8000ce4 <SysTick_Config+0x40>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cd2:	4b04      	ldr	r3, [pc, #16]	@ (8000ce4 <SysTick_Config+0x40>)
 8000cd4:	2207      	movs	r2, #7
 8000cd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	e000e010 	.word	0xe000e010

08000ce8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f7ff ff47 	bl	8000b84 <__NVIC_SetPriorityGrouping>
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b086      	sub	sp, #24
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	4603      	mov	r3, r0
 8000d06:	60b9      	str	r1, [r7, #8]
 8000d08:	607a      	str	r2, [r7, #4]
 8000d0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d10:	f7ff ff5c 	bl	8000bcc <__NVIC_GetPriorityGrouping>
 8000d14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	68b9      	ldr	r1, [r7, #8]
 8000d1a:	6978      	ldr	r0, [r7, #20]
 8000d1c:	f7ff ff8e 	bl	8000c3c <NVIC_EncodePriority>
 8000d20:	4602      	mov	r2, r0
 8000d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d26:	4611      	mov	r1, r2
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff ff5d 	bl	8000be8 <__NVIC_SetPriority>
}
 8000d2e:	bf00      	nop
 8000d30:	3718      	adds	r7, #24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff ffb0 	bl	8000ca4 <SysTick_Config>
 8000d44:	4603      	mov	r3, r0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
	...

08000d50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b089      	sub	sp, #36	@ 0x24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d62:	2300      	movs	r3, #0
 8000d64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d66:	2300      	movs	r3, #0
 8000d68:	61fb      	str	r3, [r7, #28]
 8000d6a:	e16b      	b.n	8001044 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	697a      	ldr	r2, [r7, #20]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	f040 815a 	bne.w	800103e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f003 0303 	and.w	r3, r3, #3
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d005      	beq.n	8000da2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d9e:	2b02      	cmp	r3, #2
 8000da0:	d130      	bne.n	8000e04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	2203      	movs	r2, #3
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43db      	mvns	r3, r3
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	4013      	ands	r3, r2
 8000db8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	68da      	ldr	r2, [r3, #12]
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dd8:	2201      	movs	r2, #1
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	43db      	mvns	r3, r3
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	4013      	ands	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	091b      	lsrs	r3, r3, #4
 8000dee:	f003 0201 	and.w	r2, r3, #1
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f003 0303 	and.w	r3, r3, #3
 8000e0c:	2b03      	cmp	r3, #3
 8000e0e:	d017      	beq.n	8000e40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	2203      	movs	r2, #3
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	43db      	mvns	r3, r3
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	4013      	ands	r3, r2
 8000e26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	689a      	ldr	r2, [r3, #8]
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f003 0303 	and.w	r3, r3, #3
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	d123      	bne.n	8000e94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	08da      	lsrs	r2, r3, #3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3208      	adds	r2, #8
 8000e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	f003 0307 	and.w	r3, r3, #7
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	220f      	movs	r2, #15
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	691a      	ldr	r2, [r3, #16]
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	08da      	lsrs	r2, r3, #3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	3208      	adds	r2, #8
 8000e8e:	69b9      	ldr	r1, [r7, #24]
 8000e90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	2203      	movs	r2, #3
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f003 0203 	and.w	r2, r3, #3
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	f000 80b4 	beq.w	800103e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	4b60      	ldr	r3, [pc, #384]	@ (800105c <HAL_GPIO_Init+0x30c>)
 8000edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ede:	4a5f      	ldr	r2, [pc, #380]	@ (800105c <HAL_GPIO_Init+0x30c>)
 8000ee0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ee4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ee6:	4b5d      	ldr	r3, [pc, #372]	@ (800105c <HAL_GPIO_Init+0x30c>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ef2:	4a5b      	ldr	r2, [pc, #364]	@ (8001060 <HAL_GPIO_Init+0x310>)
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	089b      	lsrs	r3, r3, #2
 8000ef8:	3302      	adds	r3, #2
 8000efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	f003 0303 	and.w	r3, r3, #3
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	220f      	movs	r2, #15
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4013      	ands	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a52      	ldr	r2, [pc, #328]	@ (8001064 <HAL_GPIO_Init+0x314>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d02b      	beq.n	8000f76 <HAL_GPIO_Init+0x226>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a51      	ldr	r2, [pc, #324]	@ (8001068 <HAL_GPIO_Init+0x318>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d025      	beq.n	8000f72 <HAL_GPIO_Init+0x222>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a50      	ldr	r2, [pc, #320]	@ (800106c <HAL_GPIO_Init+0x31c>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d01f      	beq.n	8000f6e <HAL_GPIO_Init+0x21e>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a4f      	ldr	r2, [pc, #316]	@ (8001070 <HAL_GPIO_Init+0x320>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d019      	beq.n	8000f6a <HAL_GPIO_Init+0x21a>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a4e      	ldr	r2, [pc, #312]	@ (8001074 <HAL_GPIO_Init+0x324>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d013      	beq.n	8000f66 <HAL_GPIO_Init+0x216>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a4d      	ldr	r2, [pc, #308]	@ (8001078 <HAL_GPIO_Init+0x328>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d00d      	beq.n	8000f62 <HAL_GPIO_Init+0x212>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a4c      	ldr	r2, [pc, #304]	@ (800107c <HAL_GPIO_Init+0x32c>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d007      	beq.n	8000f5e <HAL_GPIO_Init+0x20e>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a4b      	ldr	r2, [pc, #300]	@ (8001080 <HAL_GPIO_Init+0x330>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d101      	bne.n	8000f5a <HAL_GPIO_Init+0x20a>
 8000f56:	2307      	movs	r3, #7
 8000f58:	e00e      	b.n	8000f78 <HAL_GPIO_Init+0x228>
 8000f5a:	2308      	movs	r3, #8
 8000f5c:	e00c      	b.n	8000f78 <HAL_GPIO_Init+0x228>
 8000f5e:	2306      	movs	r3, #6
 8000f60:	e00a      	b.n	8000f78 <HAL_GPIO_Init+0x228>
 8000f62:	2305      	movs	r3, #5
 8000f64:	e008      	b.n	8000f78 <HAL_GPIO_Init+0x228>
 8000f66:	2304      	movs	r3, #4
 8000f68:	e006      	b.n	8000f78 <HAL_GPIO_Init+0x228>
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	e004      	b.n	8000f78 <HAL_GPIO_Init+0x228>
 8000f6e:	2302      	movs	r3, #2
 8000f70:	e002      	b.n	8000f78 <HAL_GPIO_Init+0x228>
 8000f72:	2301      	movs	r3, #1
 8000f74:	e000      	b.n	8000f78 <HAL_GPIO_Init+0x228>
 8000f76:	2300      	movs	r3, #0
 8000f78:	69fa      	ldr	r2, [r7, #28]
 8000f7a:	f002 0203 	and.w	r2, r2, #3
 8000f7e:	0092      	lsls	r2, r2, #2
 8000f80:	4093      	lsls	r3, r2
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f88:	4935      	ldr	r1, [pc, #212]	@ (8001060 <HAL_GPIO_Init+0x310>)
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	089b      	lsrs	r3, r3, #2
 8000f8e:	3302      	adds	r3, #2
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f96:	4b3b      	ldr	r3, [pc, #236]	@ (8001084 <HAL_GPIO_Init+0x334>)
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d003      	beq.n	8000fba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fba:	4a32      	ldr	r2, [pc, #200]	@ (8001084 <HAL_GPIO_Init+0x334>)
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fc0:	4b30      	ldr	r3, [pc, #192]	@ (8001084 <HAL_GPIO_Init+0x334>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d003      	beq.n	8000fe4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fe4:	4a27      	ldr	r2, [pc, #156]	@ (8001084 <HAL_GPIO_Init+0x334>)
 8000fe6:	69bb      	ldr	r3, [r7, #24]
 8000fe8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fea:	4b26      	ldr	r3, [pc, #152]	@ (8001084 <HAL_GPIO_Init+0x334>)
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d003      	beq.n	800100e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	4313      	orrs	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800100e:	4a1d      	ldr	r2, [pc, #116]	@ (8001084 <HAL_GPIO_Init+0x334>)
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001014:	4b1b      	ldr	r3, [pc, #108]	@ (8001084 <HAL_GPIO_Init+0x334>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	43db      	mvns	r3, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800102c:	2b00      	cmp	r3, #0
 800102e:	d003      	beq.n	8001038 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	4313      	orrs	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001038:	4a12      	ldr	r2, [pc, #72]	@ (8001084 <HAL_GPIO_Init+0x334>)
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	3301      	adds	r3, #1
 8001042:	61fb      	str	r3, [r7, #28]
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	2b0f      	cmp	r3, #15
 8001048:	f67f ae90 	bls.w	8000d6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800104c:	bf00      	nop
 800104e:	bf00      	nop
 8001050:	3724      	adds	r7, #36	@ 0x24
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	40023800 	.word	0x40023800
 8001060:	40013800 	.word	0x40013800
 8001064:	40020000 	.word	0x40020000
 8001068:	40020400 	.word	0x40020400
 800106c:	40020800 	.word	0x40020800
 8001070:	40020c00 	.word	0x40020c00
 8001074:	40021000 	.word	0x40021000
 8001078:	40021400 	.word	0x40021400
 800107c:	40021800 	.word	0x40021800
 8001080:	40021c00 	.word	0x40021c00
 8001084:	40013c00 	.word	0x40013c00

08001088 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d101      	bne.n	800109a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e12b      	b.n	80012f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d106      	bne.n	80010b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff fbd6 	bl	8000860 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2224      	movs	r2, #36	@ 0x24
 80010b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f022 0201 	bic.w	r2, r2, #1
 80010ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80010da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80010ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80010ec:	f001 fc20 	bl	8002930 <HAL_RCC_GetPCLK1Freq>
 80010f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	4a81      	ldr	r2, [pc, #516]	@ (80012fc <HAL_I2C_Init+0x274>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d807      	bhi.n	800110c <HAL_I2C_Init+0x84>
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	4a80      	ldr	r2, [pc, #512]	@ (8001300 <HAL_I2C_Init+0x278>)
 8001100:	4293      	cmp	r3, r2
 8001102:	bf94      	ite	ls
 8001104:	2301      	movls	r3, #1
 8001106:	2300      	movhi	r3, #0
 8001108:	b2db      	uxtb	r3, r3
 800110a:	e006      	b.n	800111a <HAL_I2C_Init+0x92>
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4a7d      	ldr	r2, [pc, #500]	@ (8001304 <HAL_I2C_Init+0x27c>)
 8001110:	4293      	cmp	r3, r2
 8001112:	bf94      	ite	ls
 8001114:	2301      	movls	r3, #1
 8001116:	2300      	movhi	r3, #0
 8001118:	b2db      	uxtb	r3, r3
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e0e7      	b.n	80012f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	4a78      	ldr	r2, [pc, #480]	@ (8001308 <HAL_I2C_Init+0x280>)
 8001126:	fba2 2303 	umull	r2, r3, r2, r3
 800112a:	0c9b      	lsrs	r3, r3, #18
 800112c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	68ba      	ldr	r2, [r7, #8]
 800113e:	430a      	orrs	r2, r1
 8001140:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	6a1b      	ldr	r3, [r3, #32]
 8001148:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	4a6a      	ldr	r2, [pc, #424]	@ (80012fc <HAL_I2C_Init+0x274>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d802      	bhi.n	800115c <HAL_I2C_Init+0xd4>
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	3301      	adds	r3, #1
 800115a:	e009      	b.n	8001170 <HAL_I2C_Init+0xe8>
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001162:	fb02 f303 	mul.w	r3, r2, r3
 8001166:	4a69      	ldr	r2, [pc, #420]	@ (800130c <HAL_I2C_Init+0x284>)
 8001168:	fba2 2303 	umull	r2, r3, r2, r3
 800116c:	099b      	lsrs	r3, r3, #6
 800116e:	3301      	adds	r3, #1
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	6812      	ldr	r2, [r2, #0]
 8001174:	430b      	orrs	r3, r1
 8001176:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	69db      	ldr	r3, [r3, #28]
 800117e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001182:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	495c      	ldr	r1, [pc, #368]	@ (80012fc <HAL_I2C_Init+0x274>)
 800118c:	428b      	cmp	r3, r1
 800118e:	d819      	bhi.n	80011c4 <HAL_I2C_Init+0x13c>
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	1e59      	subs	r1, r3, #1
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	fbb1 f3f3 	udiv	r3, r1, r3
 800119e:	1c59      	adds	r1, r3, #1
 80011a0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80011a4:	400b      	ands	r3, r1
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d00a      	beq.n	80011c0 <HAL_I2C_Init+0x138>
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	1e59      	subs	r1, r3, #1
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80011b8:	3301      	adds	r3, #1
 80011ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011be:	e051      	b.n	8001264 <HAL_I2C_Init+0x1dc>
 80011c0:	2304      	movs	r3, #4
 80011c2:	e04f      	b.n	8001264 <HAL_I2C_Init+0x1dc>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d111      	bne.n	80011f0 <HAL_I2C_Init+0x168>
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	1e58      	subs	r0, r3, #1
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6859      	ldr	r1, [r3, #4]
 80011d4:	460b      	mov	r3, r1
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	440b      	add	r3, r1
 80011da:	fbb0 f3f3 	udiv	r3, r0, r3
 80011de:	3301      	adds	r3, #1
 80011e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	bf0c      	ite	eq
 80011e8:	2301      	moveq	r3, #1
 80011ea:	2300      	movne	r3, #0
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	e012      	b.n	8001216 <HAL_I2C_Init+0x18e>
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	1e58      	subs	r0, r3, #1
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6859      	ldr	r1, [r3, #4]
 80011f8:	460b      	mov	r3, r1
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	440b      	add	r3, r1
 80011fe:	0099      	lsls	r1, r3, #2
 8001200:	440b      	add	r3, r1
 8001202:	fbb0 f3f3 	udiv	r3, r0, r3
 8001206:	3301      	adds	r3, #1
 8001208:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800120c:	2b00      	cmp	r3, #0
 800120e:	bf0c      	ite	eq
 8001210:	2301      	moveq	r3, #1
 8001212:	2300      	movne	r3, #0
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <HAL_I2C_Init+0x196>
 800121a:	2301      	movs	r3, #1
 800121c:	e022      	b.n	8001264 <HAL_I2C_Init+0x1dc>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d10e      	bne.n	8001244 <HAL_I2C_Init+0x1bc>
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	1e58      	subs	r0, r3, #1
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6859      	ldr	r1, [r3, #4]
 800122e:	460b      	mov	r3, r1
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	440b      	add	r3, r1
 8001234:	fbb0 f3f3 	udiv	r3, r0, r3
 8001238:	3301      	adds	r3, #1
 800123a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800123e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001242:	e00f      	b.n	8001264 <HAL_I2C_Init+0x1dc>
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	1e58      	subs	r0, r3, #1
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6859      	ldr	r1, [r3, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	440b      	add	r3, r1
 8001252:	0099      	lsls	r1, r3, #2
 8001254:	440b      	add	r3, r1
 8001256:	fbb0 f3f3 	udiv	r3, r0, r3
 800125a:	3301      	adds	r3, #1
 800125c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001260:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001264:	6879      	ldr	r1, [r7, #4]
 8001266:	6809      	ldr	r1, [r1, #0]
 8001268:	4313      	orrs	r3, r2
 800126a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69da      	ldr	r2, [r3, #28]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a1b      	ldr	r3, [r3, #32]
 800127e:	431a      	orrs	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	430a      	orrs	r2, r1
 8001286:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001292:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	6911      	ldr	r1, [r2, #16]
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	68d2      	ldr	r2, [r2, #12]
 800129e:	4311      	orrs	r1, r2
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	6812      	ldr	r2, [r2, #0]
 80012a4:	430b      	orrs	r3, r1
 80012a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	695a      	ldr	r2, [r3, #20]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	431a      	orrs	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	430a      	orrs	r2, r1
 80012c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f042 0201 	orr.w	r2, r2, #1
 80012d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2200      	movs	r2, #0
 80012d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2220      	movs	r2, #32
 80012de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	000186a0 	.word	0x000186a0
 8001300:	001e847f 	.word	0x001e847f
 8001304:	003d08ff 	.word	0x003d08ff
 8001308:	431bde83 	.word	0x431bde83
 800130c:	10624dd3 	.word	0x10624dd3

08001310 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b088      	sub	sp, #32
 8001314:	af02      	add	r7, sp, #8
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	4608      	mov	r0, r1
 800131a:	4611      	mov	r1, r2
 800131c:	461a      	mov	r2, r3
 800131e:	4603      	mov	r3, r0
 8001320:	817b      	strh	r3, [r7, #10]
 8001322:	460b      	mov	r3, r1
 8001324:	813b      	strh	r3, [r7, #8]
 8001326:	4613      	mov	r3, r2
 8001328:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800132a:	f7ff fbfb 	bl	8000b24 <HAL_GetTick>
 800132e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001336:	b2db      	uxtb	r3, r3
 8001338:	2b20      	cmp	r3, #32
 800133a:	f040 80d9 	bne.w	80014f0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	9300      	str	r3, [sp, #0]
 8001342:	2319      	movs	r3, #25
 8001344:	2201      	movs	r2, #1
 8001346:	496d      	ldr	r1, [pc, #436]	@ (80014fc <HAL_I2C_Mem_Write+0x1ec>)
 8001348:	68f8      	ldr	r0, [r7, #12]
 800134a:	f000 fc8b 	bl	8001c64 <I2C_WaitOnFlagUntilTimeout>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001354:	2302      	movs	r3, #2
 8001356:	e0cc      	b.n	80014f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800135e:	2b01      	cmp	r3, #1
 8001360:	d101      	bne.n	8001366 <HAL_I2C_Mem_Write+0x56>
 8001362:	2302      	movs	r3, #2
 8001364:	e0c5      	b.n	80014f2 <HAL_I2C_Mem_Write+0x1e2>
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	2201      	movs	r2, #1
 800136a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	2b01      	cmp	r3, #1
 800137a:	d007      	beq.n	800138c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f042 0201 	orr.w	r2, r2, #1
 800138a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800139a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	2221      	movs	r2, #33	@ 0x21
 80013a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2240      	movs	r2, #64	@ 0x40
 80013a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2200      	movs	r2, #0
 80013b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	6a3a      	ldr	r2, [r7, #32]
 80013b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80013bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	4a4d      	ldr	r2, [pc, #308]	@ (8001500 <HAL_I2C_Mem_Write+0x1f0>)
 80013cc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80013ce:	88f8      	ldrh	r0, [r7, #6]
 80013d0:	893a      	ldrh	r2, [r7, #8]
 80013d2:	8979      	ldrh	r1, [r7, #10]
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	9301      	str	r3, [sp, #4]
 80013d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	4603      	mov	r3, r0
 80013de:	68f8      	ldr	r0, [r7, #12]
 80013e0:	f000 fac2 	bl	8001968 <I2C_RequestMemoryWrite>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d052      	beq.n	8001490 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e081      	b.n	80014f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013ee:	697a      	ldr	r2, [r7, #20]
 80013f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80013f2:	68f8      	ldr	r0, [r7, #12]
 80013f4:	f000 fd50 	bl	8001e98 <I2C_WaitOnTXEFlagUntilTimeout>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d00d      	beq.n	800141a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001402:	2b04      	cmp	r3, #4
 8001404:	d107      	bne.n	8001416 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001414:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e06b      	b.n	80014f2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800141e:	781a      	ldrb	r2, [r3, #0]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800142a:	1c5a      	adds	r2, r3, #1
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001434:	3b01      	subs	r3, #1
 8001436:	b29a      	uxth	r2, r3
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001440:	b29b      	uxth	r3, r3
 8001442:	3b01      	subs	r3, #1
 8001444:	b29a      	uxth	r2, r3
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	695b      	ldr	r3, [r3, #20]
 8001450:	f003 0304 	and.w	r3, r3, #4
 8001454:	2b04      	cmp	r3, #4
 8001456:	d11b      	bne.n	8001490 <HAL_I2C_Mem_Write+0x180>
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800145c:	2b00      	cmp	r3, #0
 800145e:	d017      	beq.n	8001490 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001464:	781a      	ldrb	r2, [r3, #0]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001470:	1c5a      	adds	r2, r3, #1
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800147a:	3b01      	subs	r3, #1
 800147c:	b29a      	uxth	r2, r3
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001486:	b29b      	uxth	r3, r3
 8001488:	3b01      	subs	r3, #1
 800148a:	b29a      	uxth	r2, r3
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1aa      	bne.n	80013ee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001498:	697a      	ldr	r2, [r7, #20]
 800149a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800149c:	68f8      	ldr	r0, [r7, #12]
 800149e:	f000 fd43 	bl	8001f28 <I2C_WaitOnBTFFlagUntilTimeout>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d00d      	beq.n	80014c4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ac:	2b04      	cmp	r3, #4
 80014ae:	d107      	bne.n	80014c0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80014be:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e016      	b.n	80014f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80014d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2220      	movs	r2, #32
 80014d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	2200      	movs	r2, #0
 80014e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80014ec:	2300      	movs	r3, #0
 80014ee:	e000      	b.n	80014f2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80014f0:	2302      	movs	r3, #2
  }
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3718      	adds	r7, #24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	00100002 	.word	0x00100002
 8001500:	ffff0000 	.word	0xffff0000

08001504 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08c      	sub	sp, #48	@ 0x30
 8001508:	af02      	add	r7, sp, #8
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	4608      	mov	r0, r1
 800150e:	4611      	mov	r1, r2
 8001510:	461a      	mov	r2, r3
 8001512:	4603      	mov	r3, r0
 8001514:	817b      	strh	r3, [r7, #10]
 8001516:	460b      	mov	r3, r1
 8001518:	813b      	strh	r3, [r7, #8]
 800151a:	4613      	mov	r3, r2
 800151c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800151e:	f7ff fb01 	bl	8000b24 <HAL_GetTick>
 8001522:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800152a:	b2db      	uxtb	r3, r3
 800152c:	2b20      	cmp	r3, #32
 800152e:	f040 8214 	bne.w	800195a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	2319      	movs	r3, #25
 8001538:	2201      	movs	r2, #1
 800153a:	497b      	ldr	r1, [pc, #492]	@ (8001728 <HAL_I2C_Mem_Read+0x224>)
 800153c:	68f8      	ldr	r0, [r7, #12]
 800153e:	f000 fb91 	bl	8001c64 <I2C_WaitOnFlagUntilTimeout>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001548:	2302      	movs	r3, #2
 800154a:	e207      	b.n	800195c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001552:	2b01      	cmp	r3, #1
 8001554:	d101      	bne.n	800155a <HAL_I2C_Mem_Read+0x56>
 8001556:	2302      	movs	r3, #2
 8001558:	e200      	b.n	800195c <HAL_I2C_Mem_Read+0x458>
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	2201      	movs	r2, #1
 800155e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0301 	and.w	r3, r3, #1
 800156c:	2b01      	cmp	r3, #1
 800156e:	d007      	beq.n	8001580 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f042 0201 	orr.w	r2, r2, #1
 800157e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800158e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2222      	movs	r2, #34	@ 0x22
 8001594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2240      	movs	r2, #64	@ 0x40
 800159c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2200      	movs	r2, #0
 80015a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80015aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80015b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	4a5b      	ldr	r2, [pc, #364]	@ (800172c <HAL_I2C_Mem_Read+0x228>)
 80015c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80015c2:	88f8      	ldrh	r0, [r7, #6]
 80015c4:	893a      	ldrh	r2, [r7, #8]
 80015c6:	8979      	ldrh	r1, [r7, #10]
 80015c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ca:	9301      	str	r3, [sp, #4]
 80015cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015ce:	9300      	str	r3, [sp, #0]
 80015d0:	4603      	mov	r3, r0
 80015d2:	68f8      	ldr	r0, [r7, #12]
 80015d4:	f000 fa5e 	bl	8001a94 <I2C_RequestMemoryRead>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e1bc      	b.n	800195c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d113      	bne.n	8001612 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015ea:	2300      	movs	r3, #0
 80015ec:	623b      	str	r3, [r7, #32]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	623b      	str	r3, [r7, #32]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	623b      	str	r3, [r7, #32]
 80015fe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	e190      	b.n	8001934 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001616:	2b01      	cmp	r3, #1
 8001618:	d11b      	bne.n	8001652 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001628:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800162a:	2300      	movs	r3, #0
 800162c:	61fb      	str	r3, [r7, #28]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	695b      	ldr	r3, [r3, #20]
 8001634:	61fb      	str	r3, [r7, #28]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	61fb      	str	r3, [r7, #28]
 800163e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	e170      	b.n	8001934 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001656:	2b02      	cmp	r3, #2
 8001658:	d11b      	bne.n	8001692 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001668:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001678:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800167a:	2300      	movs	r3, #0
 800167c:	61bb      	str	r3, [r7, #24]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	695b      	ldr	r3, [r3, #20]
 8001684:	61bb      	str	r3, [r7, #24]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	61bb      	str	r3, [r7, #24]
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	e150      	b.n	8001934 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001692:	2300      	movs	r3, #0
 8001694:	617b      	str	r3, [r7, #20]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	695b      	ldr	r3, [r3, #20]
 800169c:	617b      	str	r3, [r7, #20]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	617b      	str	r3, [r7, #20]
 80016a6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80016a8:	e144      	b.n	8001934 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016ae:	2b03      	cmp	r3, #3
 80016b0:	f200 80f1 	bhi.w	8001896 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d123      	bne.n	8001704 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016be:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80016c0:	68f8      	ldr	r0, [r7, #12]
 80016c2:	f000 fc79 	bl	8001fb8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e145      	b.n	800195c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	691a      	ldr	r2, [r3, #16]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016da:	b2d2      	uxtb	r2, r2
 80016dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016e2:	1c5a      	adds	r2, r3, #1
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016ec:	3b01      	subs	r3, #1
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	3b01      	subs	r3, #1
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001702:	e117      	b.n	8001934 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001708:	2b02      	cmp	r3, #2
 800170a:	d14e      	bne.n	80017aa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800170c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170e:	9300      	str	r3, [sp, #0]
 8001710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001712:	2200      	movs	r2, #0
 8001714:	4906      	ldr	r1, [pc, #24]	@ (8001730 <HAL_I2C_Mem_Read+0x22c>)
 8001716:	68f8      	ldr	r0, [r7, #12]
 8001718:	f000 faa4 	bl	8001c64 <I2C_WaitOnFlagUntilTimeout>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d008      	beq.n	8001734 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e11a      	b.n	800195c <HAL_I2C_Mem_Read+0x458>
 8001726:	bf00      	nop
 8001728:	00100002 	.word	0x00100002
 800172c:	ffff0000 	.word	0xffff0000
 8001730:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001742:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	691a      	ldr	r2, [r3, #16]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001756:	1c5a      	adds	r2, r3, #1
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001760:	3b01      	subs	r3, #1
 8001762:	b29a      	uxth	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800176c:	b29b      	uxth	r3, r3
 800176e:	3b01      	subs	r3, #1
 8001770:	b29a      	uxth	r2, r3
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	691a      	ldr	r2, [r3, #16]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001780:	b2d2      	uxtb	r2, r2
 8001782:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001788:	1c5a      	adds	r2, r3, #1
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001792:	3b01      	subs	r3, #1
 8001794:	b29a      	uxth	r2, r3
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800179e:	b29b      	uxth	r3, r3
 80017a0:	3b01      	subs	r3, #1
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80017a8:	e0c4      	b.n	8001934 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80017aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ac:	9300      	str	r3, [sp, #0]
 80017ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017b0:	2200      	movs	r2, #0
 80017b2:	496c      	ldr	r1, [pc, #432]	@ (8001964 <HAL_I2C_Mem_Read+0x460>)
 80017b4:	68f8      	ldr	r0, [r7, #12]
 80017b6:	f000 fa55 	bl	8001c64 <I2C_WaitOnFlagUntilTimeout>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e0cb      	b.n	800195c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80017d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	691a      	ldr	r2, [r3, #16]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e6:	1c5a      	adds	r2, r3, #1
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017f0:	3b01      	subs	r3, #1
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	3b01      	subs	r3, #1
 8001800:	b29a      	uxth	r2, r3
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001808:	9300      	str	r3, [sp, #0]
 800180a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800180c:	2200      	movs	r2, #0
 800180e:	4955      	ldr	r1, [pc, #340]	@ (8001964 <HAL_I2C_Mem_Read+0x460>)
 8001810:	68f8      	ldr	r0, [r7, #12]
 8001812:	f000 fa27 	bl	8001c64 <I2C_WaitOnFlagUntilTimeout>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e09d      	b.n	800195c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800182e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	691a      	ldr	r2, [r3, #16]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001842:	1c5a      	adds	r2, r3, #1
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800184c:	3b01      	subs	r3, #1
 800184e:	b29a      	uxth	r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001858:	b29b      	uxth	r3, r3
 800185a:	3b01      	subs	r3, #1
 800185c:	b29a      	uxth	r2, r3
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	691a      	ldr	r2, [r3, #16]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800186c:	b2d2      	uxtb	r2, r2
 800186e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001874:	1c5a      	adds	r2, r3, #1
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800187e:	3b01      	subs	r3, #1
 8001880:	b29a      	uxth	r2, r3
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800188a:	b29b      	uxth	r3, r3
 800188c:	3b01      	subs	r3, #1
 800188e:	b29a      	uxth	r2, r3
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001894:	e04e      	b.n	8001934 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001896:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001898:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800189a:	68f8      	ldr	r0, [r7, #12]
 800189c:	f000 fb8c 	bl	8001fb8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e058      	b.n	800195c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	691a      	ldr	r2, [r3, #16]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018b4:	b2d2      	uxtb	r2, r2
 80018b6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018bc:	1c5a      	adds	r2, r3, #1
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018c6:	3b01      	subs	r3, #1
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	3b01      	subs	r3, #1
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	f003 0304 	and.w	r3, r3, #4
 80018e6:	2b04      	cmp	r3, #4
 80018e8:	d124      	bne.n	8001934 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018ee:	2b03      	cmp	r3, #3
 80018f0:	d107      	bne.n	8001902 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001900:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	691a      	ldr	r2, [r3, #16]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800190c:	b2d2      	uxtb	r2, r2
 800190e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001914:	1c5a      	adds	r2, r3, #1
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800191e:	3b01      	subs	r3, #1
 8001920:	b29a      	uxth	r2, r3
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800192a:	b29b      	uxth	r3, r3
 800192c:	3b01      	subs	r3, #1
 800192e:	b29a      	uxth	r2, r3
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001938:	2b00      	cmp	r3, #0
 800193a:	f47f aeb6 	bne.w	80016aa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2220      	movs	r2, #32
 8001942:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001956:	2300      	movs	r3, #0
 8001958:	e000      	b.n	800195c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800195a:	2302      	movs	r3, #2
  }
}
 800195c:	4618      	mov	r0, r3
 800195e:	3728      	adds	r7, #40	@ 0x28
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	00010004 	.word	0x00010004

08001968 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b088      	sub	sp, #32
 800196c:	af02      	add	r7, sp, #8
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	4608      	mov	r0, r1
 8001972:	4611      	mov	r1, r2
 8001974:	461a      	mov	r2, r3
 8001976:	4603      	mov	r3, r0
 8001978:	817b      	strh	r3, [r7, #10]
 800197a:	460b      	mov	r3, r1
 800197c:	813b      	strh	r3, [r7, #8]
 800197e:	4613      	mov	r3, r2
 8001980:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001990:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	6a3b      	ldr	r3, [r7, #32]
 8001998:	2200      	movs	r2, #0
 800199a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800199e:	68f8      	ldr	r0, [r7, #12]
 80019a0:	f000 f960 	bl	8001c64 <I2C_WaitOnFlagUntilTimeout>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d00d      	beq.n	80019c6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80019b8:	d103      	bne.n	80019c2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019c0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e05f      	b.n	8001a86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80019c6:	897b      	ldrh	r3, [r7, #10]
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	461a      	mov	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80019d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d8:	6a3a      	ldr	r2, [r7, #32]
 80019da:	492d      	ldr	r1, [pc, #180]	@ (8001a90 <I2C_RequestMemoryWrite+0x128>)
 80019dc:	68f8      	ldr	r0, [r7, #12]
 80019de:	f000 f9bb 	bl	8001d58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e04c      	b.n	8001a86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	617b      	str	r3, [r7, #20]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	617b      	str	r3, [r7, #20]
 8001a00:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a04:	6a39      	ldr	r1, [r7, #32]
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f000 fa46 	bl	8001e98 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d00d      	beq.n	8001a2e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a16:	2b04      	cmp	r3, #4
 8001a18:	d107      	bne.n	8001a2a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a28:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e02b      	b.n	8001a86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a2e:	88fb      	ldrh	r3, [r7, #6]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d105      	bne.n	8001a40 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001a34:	893b      	ldrh	r3, [r7, #8]
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	611a      	str	r2, [r3, #16]
 8001a3e:	e021      	b.n	8001a84 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001a40:	893b      	ldrh	r3, [r7, #8]
 8001a42:	0a1b      	lsrs	r3, r3, #8
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a50:	6a39      	ldr	r1, [r7, #32]
 8001a52:	68f8      	ldr	r0, [r7, #12]
 8001a54:	f000 fa20 	bl	8001e98 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d00d      	beq.n	8001a7a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	d107      	bne.n	8001a76 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a74:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e005      	b.n	8001a86 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001a7a:	893b      	ldrh	r3, [r7, #8]
 8001a7c:	b2da      	uxtb	r2, r3
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3718      	adds	r7, #24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	00010002 	.word	0x00010002

08001a94 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b088      	sub	sp, #32
 8001a98:	af02      	add	r7, sp, #8
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	4608      	mov	r0, r1
 8001a9e:	4611      	mov	r1, r2
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	817b      	strh	r3, [r7, #10]
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	813b      	strh	r3, [r7, #8]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001abc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001acc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad0:	9300      	str	r3, [sp, #0]
 8001ad2:	6a3b      	ldr	r3, [r7, #32]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001ada:	68f8      	ldr	r0, [r7, #12]
 8001adc:	f000 f8c2 	bl	8001c64 <I2C_WaitOnFlagUntilTimeout>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00d      	beq.n	8001b02 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001af0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001af4:	d103      	bne.n	8001afe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001afc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e0aa      	b.n	8001c58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b02:	897b      	ldrh	r3, [r7, #10]
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	461a      	mov	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001b10:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b14:	6a3a      	ldr	r2, [r7, #32]
 8001b16:	4952      	ldr	r1, [pc, #328]	@ (8001c60 <I2C_RequestMemoryRead+0x1cc>)
 8001b18:	68f8      	ldr	r0, [r7, #12]
 8001b1a:	f000 f91d 	bl	8001d58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e097      	b.n	8001c58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	617b      	str	r3, [r7, #20]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	617b      	str	r3, [r7, #20]
 8001b3c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b40:	6a39      	ldr	r1, [r7, #32]
 8001b42:	68f8      	ldr	r0, [r7, #12]
 8001b44:	f000 f9a8 	bl	8001e98 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d00d      	beq.n	8001b6a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	d107      	bne.n	8001b66 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b64:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e076      	b.n	8001c58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b6a:	88fb      	ldrh	r3, [r7, #6]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d105      	bne.n	8001b7c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001b70:	893b      	ldrh	r3, [r7, #8]
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	611a      	str	r2, [r3, #16]
 8001b7a:	e021      	b.n	8001bc0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001b7c:	893b      	ldrh	r3, [r7, #8]
 8001b7e:	0a1b      	lsrs	r3, r3, #8
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	b2da      	uxtb	r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b8c:	6a39      	ldr	r1, [r7, #32]
 8001b8e:	68f8      	ldr	r0, [r7, #12]
 8001b90:	f000 f982 	bl	8001e98 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d00d      	beq.n	8001bb6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	d107      	bne.n	8001bb2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bb0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e050      	b.n	8001c58 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001bb6:	893b      	ldrh	r3, [r7, #8]
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bc2:	6a39      	ldr	r1, [r7, #32]
 8001bc4:	68f8      	ldr	r0, [r7, #12]
 8001bc6:	f000 f967 	bl	8001e98 <I2C_WaitOnTXEFlagUntilTimeout>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d00d      	beq.n	8001bec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd4:	2b04      	cmp	r3, #4
 8001bd6:	d107      	bne.n	8001be8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001be6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e035      	b.n	8001c58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001bfa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bfe:	9300      	str	r3, [sp, #0]
 8001c00:	6a3b      	ldr	r3, [r7, #32]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001c08:	68f8      	ldr	r0, [r7, #12]
 8001c0a:	f000 f82b 	bl	8001c64 <I2C_WaitOnFlagUntilTimeout>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d00d      	beq.n	8001c30 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c22:	d103      	bne.n	8001c2c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c2a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e013      	b.n	8001c58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001c30:	897b      	ldrh	r3, [r7, #10]
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c42:	6a3a      	ldr	r2, [r7, #32]
 8001c44:	4906      	ldr	r1, [pc, #24]	@ (8001c60 <I2C_RequestMemoryRead+0x1cc>)
 8001c46:	68f8      	ldr	r0, [r7, #12]
 8001c48:	f000 f886 	bl	8001d58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e000      	b.n	8001c58 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	00010002 	.word	0x00010002

08001c64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	603b      	str	r3, [r7, #0]
 8001c70:	4613      	mov	r3, r2
 8001c72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c74:	e048      	b.n	8001d08 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c7c:	d044      	beq.n	8001d08 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c7e:	f7fe ff51 	bl	8000b24 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d302      	bcc.n	8001c94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d139      	bne.n	8001d08 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	0c1b      	lsrs	r3, r3, #16
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d10d      	bne.n	8001cba <I2C_WaitOnFlagUntilTimeout+0x56>
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	695b      	ldr	r3, [r3, #20]
 8001ca4:	43da      	mvns	r2, r3
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	bf0c      	ite	eq
 8001cb0:	2301      	moveq	r3, #1
 8001cb2:	2300      	movne	r3, #0
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	e00c      	b.n	8001cd4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	43da      	mvns	r2, r3
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	bf0c      	ite	eq
 8001ccc:	2301      	moveq	r3, #1
 8001cce:	2300      	movne	r3, #0
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	79fb      	ldrb	r3, [r7, #7]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d116      	bne.n	8001d08 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2220      	movs	r2, #32
 8001ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf4:	f043 0220 	orr.w	r2, r3, #32
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e023      	b.n	8001d50 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	0c1b      	lsrs	r3, r3, #16
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d10d      	bne.n	8001d2e <I2C_WaitOnFlagUntilTimeout+0xca>
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	695b      	ldr	r3, [r3, #20]
 8001d18:	43da      	mvns	r2, r3
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	bf0c      	ite	eq
 8001d24:	2301      	moveq	r3, #1
 8001d26:	2300      	movne	r3, #0
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	e00c      	b.n	8001d48 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	43da      	mvns	r2, r3
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	bf0c      	ite	eq
 8001d40:	2301      	moveq	r3, #1
 8001d42:	2300      	movne	r3, #0
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	461a      	mov	r2, r3
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d093      	beq.n	8001c76 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
 8001d64:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d66:	e071      	b.n	8001e4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d76:	d123      	bne.n	8001dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d86:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001d90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2200      	movs	r2, #0
 8001d96:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2220      	movs	r2, #32
 8001d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dac:	f043 0204 	orr.w	r2, r3, #4
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e067      	b.n	8001e90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dc6:	d041      	beq.n	8001e4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dc8:	f7fe feac 	bl	8000b24 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d302      	bcc.n	8001dde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d136      	bne.n	8001e4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	0c1b      	lsrs	r3, r3, #16
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d10c      	bne.n	8001e02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	43da      	mvns	r2, r3
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	4013      	ands	r3, r2
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	bf14      	ite	ne
 8001dfa:	2301      	movne	r3, #1
 8001dfc:	2300      	moveq	r3, #0
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	e00b      	b.n	8001e1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	43da      	mvns	r2, r3
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	bf14      	ite	ne
 8001e14:	2301      	movne	r3, #1
 8001e16:	2300      	moveq	r3, #0
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d016      	beq.n	8001e4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2200      	movs	r2, #0
 8001e22:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2220      	movs	r2, #32
 8001e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e38:	f043 0220 	orr.w	r2, r3, #32
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e021      	b.n	8001e90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	0c1b      	lsrs	r3, r3, #16
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d10c      	bne.n	8001e70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	695b      	ldr	r3, [r3, #20]
 8001e5c:	43da      	mvns	r2, r3
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	4013      	ands	r3, r2
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	bf14      	ite	ne
 8001e68:	2301      	movne	r3, #1
 8001e6a:	2300      	moveq	r3, #0
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	e00b      	b.n	8001e88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	43da      	mvns	r2, r3
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	bf14      	ite	ne
 8001e82:	2301      	movne	r3, #1
 8001e84:	2300      	moveq	r3, #0
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f47f af6d 	bne.w	8001d68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ea4:	e034      	b.n	8001f10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ea6:	68f8      	ldr	r0, [r7, #12]
 8001ea8:	f000 f8e3 	bl	8002072 <I2C_IsAcknowledgeFailed>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e034      	b.n	8001f20 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ebc:	d028      	beq.n	8001f10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ebe:	f7fe fe31 	bl	8000b24 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	68ba      	ldr	r2, [r7, #8]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d302      	bcc.n	8001ed4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d11d      	bne.n	8001f10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ede:	2b80      	cmp	r3, #128	@ 0x80
 8001ee0:	d016      	beq.n	8001f10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2220      	movs	r2, #32
 8001eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efc:	f043 0220 	orr.w	r2, r3, #32
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e007      	b.n	8001f20 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f1a:	2b80      	cmp	r3, #128	@ 0x80
 8001f1c:	d1c3      	bne.n	8001ea6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3710      	adds	r7, #16
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f34:	e034      	b.n	8001fa0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f36:	68f8      	ldr	r0, [r7, #12]
 8001f38:	f000 f89b 	bl	8002072 <I2C_IsAcknowledgeFailed>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e034      	b.n	8001fb0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f4c:	d028      	beq.n	8001fa0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f4e:	f7fe fde9 	bl	8000b24 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	68ba      	ldr	r2, [r7, #8]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d302      	bcc.n	8001f64 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d11d      	bne.n	8001fa0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	f003 0304 	and.w	r3, r3, #4
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	d016      	beq.n	8001fa0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2200      	movs	r2, #0
 8001f76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2220      	movs	r2, #32
 8001f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8c:	f043 0220 	orr.w	r2, r3, #32
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e007      	b.n	8001fb0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	f003 0304 	and.w	r3, r3, #4
 8001faa:	2b04      	cmp	r3, #4
 8001fac:	d1c3      	bne.n	8001f36 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001fc4:	e049      	b.n	800205a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	695b      	ldr	r3, [r3, #20]
 8001fcc:	f003 0310 	and.w	r3, r3, #16
 8001fd0:	2b10      	cmp	r3, #16
 8001fd2:	d119      	bne.n	8002008 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f06f 0210 	mvn.w	r2, #16
 8001fdc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2220      	movs	r2, #32
 8001fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e030      	b.n	800206a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002008:	f7fe fd8c 	bl	8000b24 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	68ba      	ldr	r2, [r7, #8]
 8002014:	429a      	cmp	r2, r3
 8002016:	d302      	bcc.n	800201e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d11d      	bne.n	800205a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	695b      	ldr	r3, [r3, #20]
 8002024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002028:	2b40      	cmp	r3, #64	@ 0x40
 800202a:	d016      	beq.n	800205a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2200      	movs	r2, #0
 8002030:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2220      	movs	r2, #32
 8002036:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002046:	f043 0220 	orr.w	r2, r3, #32
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e007      	b.n	800206a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	695b      	ldr	r3, [r3, #20]
 8002060:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002064:	2b40      	cmp	r3, #64	@ 0x40
 8002066:	d1ae      	bne.n	8001fc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002072:	b480      	push	{r7}
 8002074:	b083      	sub	sp, #12
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	695b      	ldr	r3, [r3, #20]
 8002080:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002084:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002088:	d11b      	bne.n	80020c2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002092:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2220      	movs	r2, #32
 800209e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ae:	f043 0204 	orr.w	r2, r3, #4
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e000      	b.n	80020c4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e267      	b.n	80025b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d075      	beq.n	80021da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80020ee:	4b88      	ldr	r3, [pc, #544]	@ (8002310 <HAL_RCC_OscConfig+0x240>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f003 030c 	and.w	r3, r3, #12
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	d00c      	beq.n	8002114 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020fa:	4b85      	ldr	r3, [pc, #532]	@ (8002310 <HAL_RCC_OscConfig+0x240>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002102:	2b08      	cmp	r3, #8
 8002104:	d112      	bne.n	800212c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002106:	4b82      	ldr	r3, [pc, #520]	@ (8002310 <HAL_RCC_OscConfig+0x240>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800210e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002112:	d10b      	bne.n	800212c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002114:	4b7e      	ldr	r3, [pc, #504]	@ (8002310 <HAL_RCC_OscConfig+0x240>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d05b      	beq.n	80021d8 <HAL_RCC_OscConfig+0x108>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d157      	bne.n	80021d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e242      	b.n	80025b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002134:	d106      	bne.n	8002144 <HAL_RCC_OscConfig+0x74>
 8002136:	4b76      	ldr	r3, [pc, #472]	@ (8002310 <HAL_RCC_OscConfig+0x240>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a75      	ldr	r2, [pc, #468]	@ (8002310 <HAL_RCC_OscConfig+0x240>)
 800213c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002140:	6013      	str	r3, [r2, #0]
 8002142:	e01d      	b.n	8002180 <HAL_RCC_OscConfig+0xb0>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800214c:	d10c      	bne.n	8002168 <HAL_RCC_OscConfig+0x98>
 800214e:	4b70      	ldr	r3, [pc, #448]	@ (8002310 <HAL_RCC_OscConfig+0x240>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a6f      	ldr	r2, [pc, #444]	@ (8002310 <HAL_RCC_OscConfig+0x240>)
 8002154:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	4b6d      	ldr	r3, [pc, #436]	@ (8002310 <HAL_RCC_OscConfig+0x240>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a6c      	ldr	r2, [pc, #432]	@ (8002310 <HAL_RCC_OscConfig+0x240>)
 8002160:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	e00b      	b.n	8002180 <HAL_RCC_OscConfig+0xb0>
 8002168:	4b69      	ldr	r3, [pc, #420]	@ (8002310 <HAL_RCC_OscConfig+0x240>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a68      	ldr	r2, [pc, #416]	@ (8002310 <HAL_RCC_OscConfig+0x240>)
 800216e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002172:	6013      	str	r3, [r2, #0]
 8002174:	4b66      	ldr	r3, [pc, #408]	@ (8002310 <HAL_RCC_OscConfig+0x240>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a65      	ldr	r2, [pc, #404]	@ (8002310 <HAL_RCC_OscConfig+0x240>)
 800217a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800217e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d013      	beq.n	80021b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002188:	f7fe fccc 	bl	8000b24 <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002190:	f7fe fcc8 	bl	8000b24 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b64      	cmp	r3, #100	@ 0x64
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e207      	b.n	80025b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a2:	4b5b      	ldr	r3, [pc, #364]	@ (8002310 <HAL_RCC_OscConfig+0x240>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d0f0      	beq.n	8002190 <HAL_RCC_OscConfig+0xc0>
 80021ae:	e014      	b.n	80021da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b0:	f7fe fcb8 	bl	8000b24 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021b8:	f7fe fcb4 	bl	8000b24 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b64      	cmp	r3, #100	@ 0x64
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e1f3      	b.n	80025b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ca:	4b51      	ldr	r3, [pc, #324]	@ (8002310 <HAL_RCC_OscConfig+0x240>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1f0      	bne.n	80021b8 <HAL_RCC_OscConfig+0xe8>
 80021d6:	e000      	b.n	80021da <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d063      	beq.n	80022ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80021e6:	4b4a      	ldr	r3, [pc, #296]	@ (8002310 <HAL_RCC_OscConfig+0x240>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 030c 	and.w	r3, r3, #12
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00b      	beq.n	800220a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021f2:	4b47      	ldr	r3, [pc, #284]	@ (8002310 <HAL_RCC_OscConfig+0x240>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80021fa:	2b08      	cmp	r3, #8
 80021fc:	d11c      	bne.n	8002238 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021fe:	4b44      	ldr	r3, [pc, #272]	@ (8002310 <HAL_RCC_OscConfig+0x240>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d116      	bne.n	8002238 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800220a:	4b41      	ldr	r3, [pc, #260]	@ (8002310 <HAL_RCC_OscConfig+0x240>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d005      	beq.n	8002222 <HAL_RCC_OscConfig+0x152>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d001      	beq.n	8002222 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e1c7      	b.n	80025b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002222:	4b3b      	ldr	r3, [pc, #236]	@ (8002310 <HAL_RCC_OscConfig+0x240>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	4937      	ldr	r1, [pc, #220]	@ (8002310 <HAL_RCC_OscConfig+0x240>)
 8002232:	4313      	orrs	r3, r2
 8002234:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002236:	e03a      	b.n	80022ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d020      	beq.n	8002282 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002240:	4b34      	ldr	r3, [pc, #208]	@ (8002314 <HAL_RCC_OscConfig+0x244>)
 8002242:	2201      	movs	r2, #1
 8002244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002246:	f7fe fc6d 	bl	8000b24 <HAL_GetTick>
 800224a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800224c:	e008      	b.n	8002260 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800224e:	f7fe fc69 	bl	8000b24 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d901      	bls.n	8002260 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e1a8      	b.n	80025b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002260:	4b2b      	ldr	r3, [pc, #172]	@ (8002310 <HAL_RCC_OscConfig+0x240>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d0f0      	beq.n	800224e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800226c:	4b28      	ldr	r3, [pc, #160]	@ (8002310 <HAL_RCC_OscConfig+0x240>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	4925      	ldr	r1, [pc, #148]	@ (8002310 <HAL_RCC_OscConfig+0x240>)
 800227c:	4313      	orrs	r3, r2
 800227e:	600b      	str	r3, [r1, #0]
 8002280:	e015      	b.n	80022ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002282:	4b24      	ldr	r3, [pc, #144]	@ (8002314 <HAL_RCC_OscConfig+0x244>)
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002288:	f7fe fc4c 	bl	8000b24 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002290:	f7fe fc48 	bl	8000b24 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e187      	b.n	80025b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002310 <HAL_RCC_OscConfig+0x240>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f0      	bne.n	8002290 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0308 	and.w	r3, r3, #8
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d036      	beq.n	8002328 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d016      	beq.n	80022f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022c2:	4b15      	ldr	r3, [pc, #84]	@ (8002318 <HAL_RCC_OscConfig+0x248>)
 80022c4:	2201      	movs	r2, #1
 80022c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c8:	f7fe fc2c 	bl	8000b24 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022d0:	f7fe fc28 	bl	8000b24 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e167      	b.n	80025b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002310 <HAL_RCC_OscConfig+0x240>)
 80022e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d0f0      	beq.n	80022d0 <HAL_RCC_OscConfig+0x200>
 80022ee:	e01b      	b.n	8002328 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022f0:	4b09      	ldr	r3, [pc, #36]	@ (8002318 <HAL_RCC_OscConfig+0x248>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f6:	f7fe fc15 	bl	8000b24 <HAL_GetTick>
 80022fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022fc:	e00e      	b.n	800231c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022fe:	f7fe fc11 	bl	8000b24 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d907      	bls.n	800231c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e150      	b.n	80025b2 <HAL_RCC_OscConfig+0x4e2>
 8002310:	40023800 	.word	0x40023800
 8002314:	42470000 	.word	0x42470000
 8002318:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800231c:	4b88      	ldr	r3, [pc, #544]	@ (8002540 <HAL_RCC_OscConfig+0x470>)
 800231e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1ea      	bne.n	80022fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0304 	and.w	r3, r3, #4
 8002330:	2b00      	cmp	r3, #0
 8002332:	f000 8097 	beq.w	8002464 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002336:	2300      	movs	r3, #0
 8002338:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800233a:	4b81      	ldr	r3, [pc, #516]	@ (8002540 <HAL_RCC_OscConfig+0x470>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d10f      	bne.n	8002366 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002346:	2300      	movs	r3, #0
 8002348:	60bb      	str	r3, [r7, #8]
 800234a:	4b7d      	ldr	r3, [pc, #500]	@ (8002540 <HAL_RCC_OscConfig+0x470>)
 800234c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234e:	4a7c      	ldr	r2, [pc, #496]	@ (8002540 <HAL_RCC_OscConfig+0x470>)
 8002350:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002354:	6413      	str	r3, [r2, #64]	@ 0x40
 8002356:	4b7a      	ldr	r3, [pc, #488]	@ (8002540 <HAL_RCC_OscConfig+0x470>)
 8002358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800235e:	60bb      	str	r3, [r7, #8]
 8002360:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002362:	2301      	movs	r3, #1
 8002364:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002366:	4b77      	ldr	r3, [pc, #476]	@ (8002544 <HAL_RCC_OscConfig+0x474>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800236e:	2b00      	cmp	r3, #0
 8002370:	d118      	bne.n	80023a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002372:	4b74      	ldr	r3, [pc, #464]	@ (8002544 <HAL_RCC_OscConfig+0x474>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a73      	ldr	r2, [pc, #460]	@ (8002544 <HAL_RCC_OscConfig+0x474>)
 8002378:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800237c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800237e:	f7fe fbd1 	bl	8000b24 <HAL_GetTick>
 8002382:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002384:	e008      	b.n	8002398 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002386:	f7fe fbcd 	bl	8000b24 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e10c      	b.n	80025b2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002398:	4b6a      	ldr	r3, [pc, #424]	@ (8002544 <HAL_RCC_OscConfig+0x474>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0f0      	beq.n	8002386 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d106      	bne.n	80023ba <HAL_RCC_OscConfig+0x2ea>
 80023ac:	4b64      	ldr	r3, [pc, #400]	@ (8002540 <HAL_RCC_OscConfig+0x470>)
 80023ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023b0:	4a63      	ldr	r2, [pc, #396]	@ (8002540 <HAL_RCC_OscConfig+0x470>)
 80023b2:	f043 0301 	orr.w	r3, r3, #1
 80023b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80023b8:	e01c      	b.n	80023f4 <HAL_RCC_OscConfig+0x324>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	2b05      	cmp	r3, #5
 80023c0:	d10c      	bne.n	80023dc <HAL_RCC_OscConfig+0x30c>
 80023c2:	4b5f      	ldr	r3, [pc, #380]	@ (8002540 <HAL_RCC_OscConfig+0x470>)
 80023c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023c6:	4a5e      	ldr	r2, [pc, #376]	@ (8002540 <HAL_RCC_OscConfig+0x470>)
 80023c8:	f043 0304 	orr.w	r3, r3, #4
 80023cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80023ce:	4b5c      	ldr	r3, [pc, #368]	@ (8002540 <HAL_RCC_OscConfig+0x470>)
 80023d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023d2:	4a5b      	ldr	r2, [pc, #364]	@ (8002540 <HAL_RCC_OscConfig+0x470>)
 80023d4:	f043 0301 	orr.w	r3, r3, #1
 80023d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80023da:	e00b      	b.n	80023f4 <HAL_RCC_OscConfig+0x324>
 80023dc:	4b58      	ldr	r3, [pc, #352]	@ (8002540 <HAL_RCC_OscConfig+0x470>)
 80023de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023e0:	4a57      	ldr	r2, [pc, #348]	@ (8002540 <HAL_RCC_OscConfig+0x470>)
 80023e2:	f023 0301 	bic.w	r3, r3, #1
 80023e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80023e8:	4b55      	ldr	r3, [pc, #340]	@ (8002540 <HAL_RCC_OscConfig+0x470>)
 80023ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023ec:	4a54      	ldr	r2, [pc, #336]	@ (8002540 <HAL_RCC_OscConfig+0x470>)
 80023ee:	f023 0304 	bic.w	r3, r3, #4
 80023f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d015      	beq.n	8002428 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023fc:	f7fe fb92 	bl	8000b24 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002402:	e00a      	b.n	800241a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002404:	f7fe fb8e 	bl	8000b24 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002412:	4293      	cmp	r3, r2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e0cb      	b.n	80025b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800241a:	4b49      	ldr	r3, [pc, #292]	@ (8002540 <HAL_RCC_OscConfig+0x470>)
 800241c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d0ee      	beq.n	8002404 <HAL_RCC_OscConfig+0x334>
 8002426:	e014      	b.n	8002452 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002428:	f7fe fb7c 	bl	8000b24 <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800242e:	e00a      	b.n	8002446 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002430:	f7fe fb78 	bl	8000b24 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800243e:	4293      	cmp	r3, r2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e0b5      	b.n	80025b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002446:	4b3e      	ldr	r3, [pc, #248]	@ (8002540 <HAL_RCC_OscConfig+0x470>)
 8002448:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1ee      	bne.n	8002430 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002452:	7dfb      	ldrb	r3, [r7, #23]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d105      	bne.n	8002464 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002458:	4b39      	ldr	r3, [pc, #228]	@ (8002540 <HAL_RCC_OscConfig+0x470>)
 800245a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245c:	4a38      	ldr	r2, [pc, #224]	@ (8002540 <HAL_RCC_OscConfig+0x470>)
 800245e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002462:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	2b00      	cmp	r3, #0
 800246a:	f000 80a1 	beq.w	80025b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800246e:	4b34      	ldr	r3, [pc, #208]	@ (8002540 <HAL_RCC_OscConfig+0x470>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 030c 	and.w	r3, r3, #12
 8002476:	2b08      	cmp	r3, #8
 8002478:	d05c      	beq.n	8002534 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	2b02      	cmp	r3, #2
 8002480:	d141      	bne.n	8002506 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002482:	4b31      	ldr	r3, [pc, #196]	@ (8002548 <HAL_RCC_OscConfig+0x478>)
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002488:	f7fe fb4c 	bl	8000b24 <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002490:	f7fe fb48 	bl	8000b24 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e087      	b.n	80025b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024a2:	4b27      	ldr	r3, [pc, #156]	@ (8002540 <HAL_RCC_OscConfig+0x470>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1f0      	bne.n	8002490 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	69da      	ldr	r2, [r3, #28]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a1b      	ldr	r3, [r3, #32]
 80024b6:	431a      	orrs	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024bc:	019b      	lsls	r3, r3, #6
 80024be:	431a      	orrs	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024c4:	085b      	lsrs	r3, r3, #1
 80024c6:	3b01      	subs	r3, #1
 80024c8:	041b      	lsls	r3, r3, #16
 80024ca:	431a      	orrs	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024d0:	061b      	lsls	r3, r3, #24
 80024d2:	491b      	ldr	r1, [pc, #108]	@ (8002540 <HAL_RCC_OscConfig+0x470>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002548 <HAL_RCC_OscConfig+0x478>)
 80024da:	2201      	movs	r2, #1
 80024dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024de:	f7fe fb21 	bl	8000b24 <HAL_GetTick>
 80024e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024e4:	e008      	b.n	80024f8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e6:	f7fe fb1d 	bl	8000b24 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e05c      	b.n	80025b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024f8:	4b11      	ldr	r3, [pc, #68]	@ (8002540 <HAL_RCC_OscConfig+0x470>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d0f0      	beq.n	80024e6 <HAL_RCC_OscConfig+0x416>
 8002504:	e054      	b.n	80025b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002506:	4b10      	ldr	r3, [pc, #64]	@ (8002548 <HAL_RCC_OscConfig+0x478>)
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250c:	f7fe fb0a 	bl	8000b24 <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002514:	f7fe fb06 	bl	8000b24 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e045      	b.n	80025b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002526:	4b06      	ldr	r3, [pc, #24]	@ (8002540 <HAL_RCC_OscConfig+0x470>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1f0      	bne.n	8002514 <HAL_RCC_OscConfig+0x444>
 8002532:	e03d      	b.n	80025b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d107      	bne.n	800254c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e038      	b.n	80025b2 <HAL_RCC_OscConfig+0x4e2>
 8002540:	40023800 	.word	0x40023800
 8002544:	40007000 	.word	0x40007000
 8002548:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800254c:	4b1b      	ldr	r3, [pc, #108]	@ (80025bc <HAL_RCC_OscConfig+0x4ec>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d028      	beq.n	80025ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002564:	429a      	cmp	r2, r3
 8002566:	d121      	bne.n	80025ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002572:	429a      	cmp	r2, r3
 8002574:	d11a      	bne.n	80025ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800257c:	4013      	ands	r3, r2
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002582:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002584:	4293      	cmp	r3, r2
 8002586:	d111      	bne.n	80025ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002592:	085b      	lsrs	r3, r3, #1
 8002594:	3b01      	subs	r3, #1
 8002596:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002598:	429a      	cmp	r2, r3
 800259a:	d107      	bne.n	80025ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d001      	beq.n	80025b0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e000      	b.n	80025b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3718      	adds	r7, #24
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	40023800 	.word	0x40023800

080025c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e0cc      	b.n	800276e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025d4:	4b68      	ldr	r3, [pc, #416]	@ (8002778 <HAL_RCC_ClockConfig+0x1b8>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0307 	and.w	r3, r3, #7
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d90c      	bls.n	80025fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e2:	4b65      	ldr	r3, [pc, #404]	@ (8002778 <HAL_RCC_ClockConfig+0x1b8>)
 80025e4:	683a      	ldr	r2, [r7, #0]
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ea:	4b63      	ldr	r3, [pc, #396]	@ (8002778 <HAL_RCC_ClockConfig+0x1b8>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0307 	and.w	r3, r3, #7
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d001      	beq.n	80025fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e0b8      	b.n	800276e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d020      	beq.n	800264a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0304 	and.w	r3, r3, #4
 8002610:	2b00      	cmp	r3, #0
 8002612:	d005      	beq.n	8002620 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002614:	4b59      	ldr	r3, [pc, #356]	@ (800277c <HAL_RCC_ClockConfig+0x1bc>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	4a58      	ldr	r2, [pc, #352]	@ (800277c <HAL_RCC_ClockConfig+0x1bc>)
 800261a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800261e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0308 	and.w	r3, r3, #8
 8002628:	2b00      	cmp	r3, #0
 800262a:	d005      	beq.n	8002638 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800262c:	4b53      	ldr	r3, [pc, #332]	@ (800277c <HAL_RCC_ClockConfig+0x1bc>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	4a52      	ldr	r2, [pc, #328]	@ (800277c <HAL_RCC_ClockConfig+0x1bc>)
 8002632:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002636:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002638:	4b50      	ldr	r3, [pc, #320]	@ (800277c <HAL_RCC_ClockConfig+0x1bc>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	494d      	ldr	r1, [pc, #308]	@ (800277c <HAL_RCC_ClockConfig+0x1bc>)
 8002646:	4313      	orrs	r3, r2
 8002648:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	2b00      	cmp	r3, #0
 8002654:	d044      	beq.n	80026e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d107      	bne.n	800266e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800265e:	4b47      	ldr	r3, [pc, #284]	@ (800277c <HAL_RCC_ClockConfig+0x1bc>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d119      	bne.n	800269e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e07f      	b.n	800276e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	2b02      	cmp	r3, #2
 8002674:	d003      	beq.n	800267e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800267a:	2b03      	cmp	r3, #3
 800267c:	d107      	bne.n	800268e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800267e:	4b3f      	ldr	r3, [pc, #252]	@ (800277c <HAL_RCC_ClockConfig+0x1bc>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d109      	bne.n	800269e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e06f      	b.n	800276e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800268e:	4b3b      	ldr	r3, [pc, #236]	@ (800277c <HAL_RCC_ClockConfig+0x1bc>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e067      	b.n	800276e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800269e:	4b37      	ldr	r3, [pc, #220]	@ (800277c <HAL_RCC_ClockConfig+0x1bc>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f023 0203 	bic.w	r2, r3, #3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	4934      	ldr	r1, [pc, #208]	@ (800277c <HAL_RCC_ClockConfig+0x1bc>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026b0:	f7fe fa38 	bl	8000b24 <HAL_GetTick>
 80026b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026b6:	e00a      	b.n	80026ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026b8:	f7fe fa34 	bl	8000b24 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e04f      	b.n	800276e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ce:	4b2b      	ldr	r3, [pc, #172]	@ (800277c <HAL_RCC_ClockConfig+0x1bc>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f003 020c 	and.w	r2, r3, #12
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	429a      	cmp	r2, r3
 80026de:	d1eb      	bne.n	80026b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026e0:	4b25      	ldr	r3, [pc, #148]	@ (8002778 <HAL_RCC_ClockConfig+0x1b8>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d20c      	bcs.n	8002708 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ee:	4b22      	ldr	r3, [pc, #136]	@ (8002778 <HAL_RCC_ClockConfig+0x1b8>)
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	b2d2      	uxtb	r2, r2
 80026f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026f6:	4b20      	ldr	r3, [pc, #128]	@ (8002778 <HAL_RCC_ClockConfig+0x1b8>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	429a      	cmp	r2, r3
 8002702:	d001      	beq.n	8002708 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e032      	b.n	800276e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0304 	and.w	r3, r3, #4
 8002710:	2b00      	cmp	r3, #0
 8002712:	d008      	beq.n	8002726 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002714:	4b19      	ldr	r3, [pc, #100]	@ (800277c <HAL_RCC_ClockConfig+0x1bc>)
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	4916      	ldr	r1, [pc, #88]	@ (800277c <HAL_RCC_ClockConfig+0x1bc>)
 8002722:	4313      	orrs	r3, r2
 8002724:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0308 	and.w	r3, r3, #8
 800272e:	2b00      	cmp	r3, #0
 8002730:	d009      	beq.n	8002746 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002732:	4b12      	ldr	r3, [pc, #72]	@ (800277c <HAL_RCC_ClockConfig+0x1bc>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	490e      	ldr	r1, [pc, #56]	@ (800277c <HAL_RCC_ClockConfig+0x1bc>)
 8002742:	4313      	orrs	r3, r2
 8002744:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002746:	f000 f821 	bl	800278c <HAL_RCC_GetSysClockFreq>
 800274a:	4602      	mov	r2, r0
 800274c:	4b0b      	ldr	r3, [pc, #44]	@ (800277c <HAL_RCC_ClockConfig+0x1bc>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	091b      	lsrs	r3, r3, #4
 8002752:	f003 030f 	and.w	r3, r3, #15
 8002756:	490a      	ldr	r1, [pc, #40]	@ (8002780 <HAL_RCC_ClockConfig+0x1c0>)
 8002758:	5ccb      	ldrb	r3, [r1, r3]
 800275a:	fa22 f303 	lsr.w	r3, r2, r3
 800275e:	4a09      	ldr	r2, [pc, #36]	@ (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 8002760:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002762:	4b09      	ldr	r3, [pc, #36]	@ (8002788 <HAL_RCC_ClockConfig+0x1c8>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4618      	mov	r0, r3
 8002768:	f7fe f998 	bl	8000a9c <HAL_InitTick>

  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	40023c00 	.word	0x40023c00
 800277c:	40023800 	.word	0x40023800
 8002780:	08003408 	.word	0x08003408
 8002784:	20000000 	.word	0x20000000
 8002788:	20000004 	.word	0x20000004

0800278c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800278c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002790:	b090      	sub	sp, #64	@ 0x40
 8002792:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002794:	2300      	movs	r3, #0
 8002796:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002798:	2300      	movs	r3, #0
 800279a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800279c:	2300      	movs	r3, #0
 800279e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80027a0:	2300      	movs	r3, #0
 80027a2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027a4:	4b59      	ldr	r3, [pc, #356]	@ (800290c <HAL_RCC_GetSysClockFreq+0x180>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f003 030c 	and.w	r3, r3, #12
 80027ac:	2b08      	cmp	r3, #8
 80027ae:	d00d      	beq.n	80027cc <HAL_RCC_GetSysClockFreq+0x40>
 80027b0:	2b08      	cmp	r3, #8
 80027b2:	f200 80a1 	bhi.w	80028f8 <HAL_RCC_GetSysClockFreq+0x16c>
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d002      	beq.n	80027c0 <HAL_RCC_GetSysClockFreq+0x34>
 80027ba:	2b04      	cmp	r3, #4
 80027bc:	d003      	beq.n	80027c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80027be:	e09b      	b.n	80028f8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027c0:	4b53      	ldr	r3, [pc, #332]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x184>)
 80027c2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80027c4:	e09b      	b.n	80028fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027c6:	4b53      	ldr	r3, [pc, #332]	@ (8002914 <HAL_RCC_GetSysClockFreq+0x188>)
 80027c8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80027ca:	e098      	b.n	80028fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027cc:	4b4f      	ldr	r3, [pc, #316]	@ (800290c <HAL_RCC_GetSysClockFreq+0x180>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80027d4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027d6:	4b4d      	ldr	r3, [pc, #308]	@ (800290c <HAL_RCC_GetSysClockFreq+0x180>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d028      	beq.n	8002834 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027e2:	4b4a      	ldr	r3, [pc, #296]	@ (800290c <HAL_RCC_GetSysClockFreq+0x180>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	099b      	lsrs	r3, r3, #6
 80027e8:	2200      	movs	r2, #0
 80027ea:	623b      	str	r3, [r7, #32]
 80027ec:	627a      	str	r2, [r7, #36]	@ 0x24
 80027ee:	6a3b      	ldr	r3, [r7, #32]
 80027f0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80027f4:	2100      	movs	r1, #0
 80027f6:	4b47      	ldr	r3, [pc, #284]	@ (8002914 <HAL_RCC_GetSysClockFreq+0x188>)
 80027f8:	fb03 f201 	mul.w	r2, r3, r1
 80027fc:	2300      	movs	r3, #0
 80027fe:	fb00 f303 	mul.w	r3, r0, r3
 8002802:	4413      	add	r3, r2
 8002804:	4a43      	ldr	r2, [pc, #268]	@ (8002914 <HAL_RCC_GetSysClockFreq+0x188>)
 8002806:	fba0 1202 	umull	r1, r2, r0, r2
 800280a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800280c:	460a      	mov	r2, r1
 800280e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002810:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002812:	4413      	add	r3, r2
 8002814:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002816:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002818:	2200      	movs	r2, #0
 800281a:	61bb      	str	r3, [r7, #24]
 800281c:	61fa      	str	r2, [r7, #28]
 800281e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002822:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002826:	f7fd fccf 	bl	80001c8 <__aeabi_uldivmod>
 800282a:	4602      	mov	r2, r0
 800282c:	460b      	mov	r3, r1
 800282e:	4613      	mov	r3, r2
 8002830:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002832:	e053      	b.n	80028dc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002834:	4b35      	ldr	r3, [pc, #212]	@ (800290c <HAL_RCC_GetSysClockFreq+0x180>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	099b      	lsrs	r3, r3, #6
 800283a:	2200      	movs	r2, #0
 800283c:	613b      	str	r3, [r7, #16]
 800283e:	617a      	str	r2, [r7, #20]
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002846:	f04f 0b00 	mov.w	fp, #0
 800284a:	4652      	mov	r2, sl
 800284c:	465b      	mov	r3, fp
 800284e:	f04f 0000 	mov.w	r0, #0
 8002852:	f04f 0100 	mov.w	r1, #0
 8002856:	0159      	lsls	r1, r3, #5
 8002858:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800285c:	0150      	lsls	r0, r2, #5
 800285e:	4602      	mov	r2, r0
 8002860:	460b      	mov	r3, r1
 8002862:	ebb2 080a 	subs.w	r8, r2, sl
 8002866:	eb63 090b 	sbc.w	r9, r3, fp
 800286a:	f04f 0200 	mov.w	r2, #0
 800286e:	f04f 0300 	mov.w	r3, #0
 8002872:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002876:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800287a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800287e:	ebb2 0408 	subs.w	r4, r2, r8
 8002882:	eb63 0509 	sbc.w	r5, r3, r9
 8002886:	f04f 0200 	mov.w	r2, #0
 800288a:	f04f 0300 	mov.w	r3, #0
 800288e:	00eb      	lsls	r3, r5, #3
 8002890:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002894:	00e2      	lsls	r2, r4, #3
 8002896:	4614      	mov	r4, r2
 8002898:	461d      	mov	r5, r3
 800289a:	eb14 030a 	adds.w	r3, r4, sl
 800289e:	603b      	str	r3, [r7, #0]
 80028a0:	eb45 030b 	adc.w	r3, r5, fp
 80028a4:	607b      	str	r3, [r7, #4]
 80028a6:	f04f 0200 	mov.w	r2, #0
 80028aa:	f04f 0300 	mov.w	r3, #0
 80028ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028b2:	4629      	mov	r1, r5
 80028b4:	028b      	lsls	r3, r1, #10
 80028b6:	4621      	mov	r1, r4
 80028b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028bc:	4621      	mov	r1, r4
 80028be:	028a      	lsls	r2, r1, #10
 80028c0:	4610      	mov	r0, r2
 80028c2:	4619      	mov	r1, r3
 80028c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028c6:	2200      	movs	r2, #0
 80028c8:	60bb      	str	r3, [r7, #8]
 80028ca:	60fa      	str	r2, [r7, #12]
 80028cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028d0:	f7fd fc7a 	bl	80001c8 <__aeabi_uldivmod>
 80028d4:	4602      	mov	r2, r0
 80028d6:	460b      	mov	r3, r1
 80028d8:	4613      	mov	r3, r2
 80028da:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80028dc:	4b0b      	ldr	r3, [pc, #44]	@ (800290c <HAL_RCC_GetSysClockFreq+0x180>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	0c1b      	lsrs	r3, r3, #16
 80028e2:	f003 0303 	and.w	r3, r3, #3
 80028e6:	3301      	adds	r3, #1
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80028ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80028ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80028f6:	e002      	b.n	80028fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028f8:	4b05      	ldr	r3, [pc, #20]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x184>)
 80028fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80028fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002900:	4618      	mov	r0, r3
 8002902:	3740      	adds	r7, #64	@ 0x40
 8002904:	46bd      	mov	sp, r7
 8002906:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800290a:	bf00      	nop
 800290c:	40023800 	.word	0x40023800
 8002910:	00f42400 	.word	0x00f42400
 8002914:	017d7840 	.word	0x017d7840

08002918 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800291c:	4b03      	ldr	r3, [pc, #12]	@ (800292c <HAL_RCC_GetHCLKFreq+0x14>)
 800291e:	681b      	ldr	r3, [r3, #0]
}
 8002920:	4618      	mov	r0, r3
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	20000000 	.word	0x20000000

08002930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002934:	f7ff fff0 	bl	8002918 <HAL_RCC_GetHCLKFreq>
 8002938:	4602      	mov	r2, r0
 800293a:	4b05      	ldr	r3, [pc, #20]	@ (8002950 <HAL_RCC_GetPCLK1Freq+0x20>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	0a9b      	lsrs	r3, r3, #10
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	4903      	ldr	r1, [pc, #12]	@ (8002954 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002946:	5ccb      	ldrb	r3, [r1, r3]
 8002948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800294c:	4618      	mov	r0, r3
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40023800 	.word	0x40023800
 8002954:	08003418 	.word	0x08003418

08002958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800295c:	f7ff ffdc 	bl	8002918 <HAL_RCC_GetHCLKFreq>
 8002960:	4602      	mov	r2, r0
 8002962:	4b05      	ldr	r3, [pc, #20]	@ (8002978 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	0b5b      	lsrs	r3, r3, #13
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	4903      	ldr	r1, [pc, #12]	@ (800297c <HAL_RCC_GetPCLK2Freq+0x24>)
 800296e:	5ccb      	ldrb	r3, [r1, r3]
 8002970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002974:	4618      	mov	r0, r3
 8002976:	bd80      	pop	{r7, pc}
 8002978:	40023800 	.word	0x40023800
 800297c:	08003418 	.word	0x08003418

08002980 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e042      	b.n	8002a18 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d106      	bne.n	80029ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f7fd ffa2 	bl	80008f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2224      	movs	r2, #36	@ 0x24
 80029b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68da      	ldr	r2, [r3, #12]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80029c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f000 f82b 	bl	8002a20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	691a      	ldr	r2, [r3, #16]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80029d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	695a      	ldr	r2, [r3, #20]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80029e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68da      	ldr	r2, [r3, #12]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80029f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2220      	movs	r2, #32
 8002a04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2220      	movs	r2, #32
 8002a0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3708      	adds	r7, #8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a24:	b0c0      	sub	sp, #256	@ 0x100
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a3c:	68d9      	ldr	r1, [r3, #12]
 8002a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	ea40 0301 	orr.w	r3, r0, r1
 8002a48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	431a      	orrs	r2, r3
 8002a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002a78:	f021 010c 	bic.w	r1, r1, #12
 8002a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002a86:	430b      	orrs	r3, r1
 8002a88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a9a:	6999      	ldr	r1, [r3, #24]
 8002a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	ea40 0301 	orr.w	r3, r0, r1
 8002aa6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	4b8f      	ldr	r3, [pc, #572]	@ (8002cec <UART_SetConfig+0x2cc>)
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d005      	beq.n	8002ac0 <UART_SetConfig+0xa0>
 8002ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	4b8d      	ldr	r3, [pc, #564]	@ (8002cf0 <UART_SetConfig+0x2d0>)
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d104      	bne.n	8002aca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ac0:	f7ff ff4a 	bl	8002958 <HAL_RCC_GetPCLK2Freq>
 8002ac4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002ac8:	e003      	b.n	8002ad2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002aca:	f7ff ff31 	bl	8002930 <HAL_RCC_GetPCLK1Freq>
 8002ace:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ad6:	69db      	ldr	r3, [r3, #28]
 8002ad8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002adc:	f040 810c 	bne.w	8002cf8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ae0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002aea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002aee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002af2:	4622      	mov	r2, r4
 8002af4:	462b      	mov	r3, r5
 8002af6:	1891      	adds	r1, r2, r2
 8002af8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002afa:	415b      	adcs	r3, r3
 8002afc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002afe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002b02:	4621      	mov	r1, r4
 8002b04:	eb12 0801 	adds.w	r8, r2, r1
 8002b08:	4629      	mov	r1, r5
 8002b0a:	eb43 0901 	adc.w	r9, r3, r1
 8002b0e:	f04f 0200 	mov.w	r2, #0
 8002b12:	f04f 0300 	mov.w	r3, #0
 8002b16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b22:	4690      	mov	r8, r2
 8002b24:	4699      	mov	r9, r3
 8002b26:	4623      	mov	r3, r4
 8002b28:	eb18 0303 	adds.w	r3, r8, r3
 8002b2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002b30:	462b      	mov	r3, r5
 8002b32:	eb49 0303 	adc.w	r3, r9, r3
 8002b36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002b46:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002b4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002b4e:	460b      	mov	r3, r1
 8002b50:	18db      	adds	r3, r3, r3
 8002b52:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b54:	4613      	mov	r3, r2
 8002b56:	eb42 0303 	adc.w	r3, r2, r3
 8002b5a:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002b60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002b64:	f7fd fb30 	bl	80001c8 <__aeabi_uldivmod>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	4b61      	ldr	r3, [pc, #388]	@ (8002cf4 <UART_SetConfig+0x2d4>)
 8002b6e:	fba3 2302 	umull	r2, r3, r3, r2
 8002b72:	095b      	lsrs	r3, r3, #5
 8002b74:	011c      	lsls	r4, r3, #4
 8002b76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002b80:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002b84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002b88:	4642      	mov	r2, r8
 8002b8a:	464b      	mov	r3, r9
 8002b8c:	1891      	adds	r1, r2, r2
 8002b8e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002b90:	415b      	adcs	r3, r3
 8002b92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002b98:	4641      	mov	r1, r8
 8002b9a:	eb12 0a01 	adds.w	sl, r2, r1
 8002b9e:	4649      	mov	r1, r9
 8002ba0:	eb43 0b01 	adc.w	fp, r3, r1
 8002ba4:	f04f 0200 	mov.w	r2, #0
 8002ba8:	f04f 0300 	mov.w	r3, #0
 8002bac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002bb0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002bb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bb8:	4692      	mov	sl, r2
 8002bba:	469b      	mov	fp, r3
 8002bbc:	4643      	mov	r3, r8
 8002bbe:	eb1a 0303 	adds.w	r3, sl, r3
 8002bc2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002bc6:	464b      	mov	r3, r9
 8002bc8:	eb4b 0303 	adc.w	r3, fp, r3
 8002bcc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002bdc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002be0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002be4:	460b      	mov	r3, r1
 8002be6:	18db      	adds	r3, r3, r3
 8002be8:	643b      	str	r3, [r7, #64]	@ 0x40
 8002bea:	4613      	mov	r3, r2
 8002bec:	eb42 0303 	adc.w	r3, r2, r3
 8002bf0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bf2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002bf6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002bfa:	f7fd fae5 	bl	80001c8 <__aeabi_uldivmod>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	460b      	mov	r3, r1
 8002c02:	4611      	mov	r1, r2
 8002c04:	4b3b      	ldr	r3, [pc, #236]	@ (8002cf4 <UART_SetConfig+0x2d4>)
 8002c06:	fba3 2301 	umull	r2, r3, r3, r1
 8002c0a:	095b      	lsrs	r3, r3, #5
 8002c0c:	2264      	movs	r2, #100	@ 0x64
 8002c0e:	fb02 f303 	mul.w	r3, r2, r3
 8002c12:	1acb      	subs	r3, r1, r3
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002c1a:	4b36      	ldr	r3, [pc, #216]	@ (8002cf4 <UART_SetConfig+0x2d4>)
 8002c1c:	fba3 2302 	umull	r2, r3, r3, r2
 8002c20:	095b      	lsrs	r3, r3, #5
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002c28:	441c      	add	r4, r3
 8002c2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002c34:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002c38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002c3c:	4642      	mov	r2, r8
 8002c3e:	464b      	mov	r3, r9
 8002c40:	1891      	adds	r1, r2, r2
 8002c42:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002c44:	415b      	adcs	r3, r3
 8002c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002c4c:	4641      	mov	r1, r8
 8002c4e:	1851      	adds	r1, r2, r1
 8002c50:	6339      	str	r1, [r7, #48]	@ 0x30
 8002c52:	4649      	mov	r1, r9
 8002c54:	414b      	adcs	r3, r1
 8002c56:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c58:	f04f 0200 	mov.w	r2, #0
 8002c5c:	f04f 0300 	mov.w	r3, #0
 8002c60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002c64:	4659      	mov	r1, fp
 8002c66:	00cb      	lsls	r3, r1, #3
 8002c68:	4651      	mov	r1, sl
 8002c6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c6e:	4651      	mov	r1, sl
 8002c70:	00ca      	lsls	r2, r1, #3
 8002c72:	4610      	mov	r0, r2
 8002c74:	4619      	mov	r1, r3
 8002c76:	4603      	mov	r3, r0
 8002c78:	4642      	mov	r2, r8
 8002c7a:	189b      	adds	r3, r3, r2
 8002c7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002c80:	464b      	mov	r3, r9
 8002c82:	460a      	mov	r2, r1
 8002c84:	eb42 0303 	adc.w	r3, r2, r3
 8002c88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002c98:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002c9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	18db      	adds	r3, r3, r3
 8002ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	eb42 0303 	adc.w	r3, r2, r3
 8002cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002cb2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002cb6:	f7fd fa87 	bl	80001c8 <__aeabi_uldivmod>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8002cf4 <UART_SetConfig+0x2d4>)
 8002cc0:	fba3 1302 	umull	r1, r3, r3, r2
 8002cc4:	095b      	lsrs	r3, r3, #5
 8002cc6:	2164      	movs	r1, #100	@ 0x64
 8002cc8:	fb01 f303 	mul.w	r3, r1, r3
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	3332      	adds	r3, #50	@ 0x32
 8002cd2:	4a08      	ldr	r2, [pc, #32]	@ (8002cf4 <UART_SetConfig+0x2d4>)
 8002cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd8:	095b      	lsrs	r3, r3, #5
 8002cda:	f003 0207 	and.w	r2, r3, #7
 8002cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4422      	add	r2, r4
 8002ce6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ce8:	e106      	b.n	8002ef8 <UART_SetConfig+0x4d8>
 8002cea:	bf00      	nop
 8002cec:	40011000 	.word	0x40011000
 8002cf0:	40011400 	.word	0x40011400
 8002cf4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002cf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002d02:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002d06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002d0a:	4642      	mov	r2, r8
 8002d0c:	464b      	mov	r3, r9
 8002d0e:	1891      	adds	r1, r2, r2
 8002d10:	6239      	str	r1, [r7, #32]
 8002d12:	415b      	adcs	r3, r3
 8002d14:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d1a:	4641      	mov	r1, r8
 8002d1c:	1854      	adds	r4, r2, r1
 8002d1e:	4649      	mov	r1, r9
 8002d20:	eb43 0501 	adc.w	r5, r3, r1
 8002d24:	f04f 0200 	mov.w	r2, #0
 8002d28:	f04f 0300 	mov.w	r3, #0
 8002d2c:	00eb      	lsls	r3, r5, #3
 8002d2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d32:	00e2      	lsls	r2, r4, #3
 8002d34:	4614      	mov	r4, r2
 8002d36:	461d      	mov	r5, r3
 8002d38:	4643      	mov	r3, r8
 8002d3a:	18e3      	adds	r3, r4, r3
 8002d3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002d40:	464b      	mov	r3, r9
 8002d42:	eb45 0303 	adc.w	r3, r5, r3
 8002d46:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002d56:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002d5a:	f04f 0200 	mov.w	r2, #0
 8002d5e:	f04f 0300 	mov.w	r3, #0
 8002d62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002d66:	4629      	mov	r1, r5
 8002d68:	008b      	lsls	r3, r1, #2
 8002d6a:	4621      	mov	r1, r4
 8002d6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d70:	4621      	mov	r1, r4
 8002d72:	008a      	lsls	r2, r1, #2
 8002d74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002d78:	f7fd fa26 	bl	80001c8 <__aeabi_uldivmod>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	460b      	mov	r3, r1
 8002d80:	4b60      	ldr	r3, [pc, #384]	@ (8002f04 <UART_SetConfig+0x4e4>)
 8002d82:	fba3 2302 	umull	r2, r3, r3, r2
 8002d86:	095b      	lsrs	r3, r3, #5
 8002d88:	011c      	lsls	r4, r3, #4
 8002d8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002d94:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002d98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002d9c:	4642      	mov	r2, r8
 8002d9e:	464b      	mov	r3, r9
 8002da0:	1891      	adds	r1, r2, r2
 8002da2:	61b9      	str	r1, [r7, #24]
 8002da4:	415b      	adcs	r3, r3
 8002da6:	61fb      	str	r3, [r7, #28]
 8002da8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dac:	4641      	mov	r1, r8
 8002dae:	1851      	adds	r1, r2, r1
 8002db0:	6139      	str	r1, [r7, #16]
 8002db2:	4649      	mov	r1, r9
 8002db4:	414b      	adcs	r3, r1
 8002db6:	617b      	str	r3, [r7, #20]
 8002db8:	f04f 0200 	mov.w	r2, #0
 8002dbc:	f04f 0300 	mov.w	r3, #0
 8002dc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002dc4:	4659      	mov	r1, fp
 8002dc6:	00cb      	lsls	r3, r1, #3
 8002dc8:	4651      	mov	r1, sl
 8002dca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dce:	4651      	mov	r1, sl
 8002dd0:	00ca      	lsls	r2, r1, #3
 8002dd2:	4610      	mov	r0, r2
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	4642      	mov	r2, r8
 8002dda:	189b      	adds	r3, r3, r2
 8002ddc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002de0:	464b      	mov	r3, r9
 8002de2:	460a      	mov	r2, r1
 8002de4:	eb42 0303 	adc.w	r3, r2, r3
 8002de8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002df6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002df8:	f04f 0200 	mov.w	r2, #0
 8002dfc:	f04f 0300 	mov.w	r3, #0
 8002e00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002e04:	4649      	mov	r1, r9
 8002e06:	008b      	lsls	r3, r1, #2
 8002e08:	4641      	mov	r1, r8
 8002e0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e0e:	4641      	mov	r1, r8
 8002e10:	008a      	lsls	r2, r1, #2
 8002e12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002e16:	f7fd f9d7 	bl	80001c8 <__aeabi_uldivmod>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	4611      	mov	r1, r2
 8002e20:	4b38      	ldr	r3, [pc, #224]	@ (8002f04 <UART_SetConfig+0x4e4>)
 8002e22:	fba3 2301 	umull	r2, r3, r3, r1
 8002e26:	095b      	lsrs	r3, r3, #5
 8002e28:	2264      	movs	r2, #100	@ 0x64
 8002e2a:	fb02 f303 	mul.w	r3, r2, r3
 8002e2e:	1acb      	subs	r3, r1, r3
 8002e30:	011b      	lsls	r3, r3, #4
 8002e32:	3332      	adds	r3, #50	@ 0x32
 8002e34:	4a33      	ldr	r2, [pc, #204]	@ (8002f04 <UART_SetConfig+0x4e4>)
 8002e36:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3a:	095b      	lsrs	r3, r3, #5
 8002e3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e40:	441c      	add	r4, r3
 8002e42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e46:	2200      	movs	r2, #0
 8002e48:	673b      	str	r3, [r7, #112]	@ 0x70
 8002e4a:	677a      	str	r2, [r7, #116]	@ 0x74
 8002e4c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002e50:	4642      	mov	r2, r8
 8002e52:	464b      	mov	r3, r9
 8002e54:	1891      	adds	r1, r2, r2
 8002e56:	60b9      	str	r1, [r7, #8]
 8002e58:	415b      	adcs	r3, r3
 8002e5a:	60fb      	str	r3, [r7, #12]
 8002e5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e60:	4641      	mov	r1, r8
 8002e62:	1851      	adds	r1, r2, r1
 8002e64:	6039      	str	r1, [r7, #0]
 8002e66:	4649      	mov	r1, r9
 8002e68:	414b      	adcs	r3, r1
 8002e6a:	607b      	str	r3, [r7, #4]
 8002e6c:	f04f 0200 	mov.w	r2, #0
 8002e70:	f04f 0300 	mov.w	r3, #0
 8002e74:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002e78:	4659      	mov	r1, fp
 8002e7a:	00cb      	lsls	r3, r1, #3
 8002e7c:	4651      	mov	r1, sl
 8002e7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e82:	4651      	mov	r1, sl
 8002e84:	00ca      	lsls	r2, r1, #3
 8002e86:	4610      	mov	r0, r2
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	4642      	mov	r2, r8
 8002e8e:	189b      	adds	r3, r3, r2
 8002e90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002e92:	464b      	mov	r3, r9
 8002e94:	460a      	mov	r2, r1
 8002e96:	eb42 0303 	adc.w	r3, r2, r3
 8002e9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	663b      	str	r3, [r7, #96]	@ 0x60
 8002ea6:	667a      	str	r2, [r7, #100]	@ 0x64
 8002ea8:	f04f 0200 	mov.w	r2, #0
 8002eac:	f04f 0300 	mov.w	r3, #0
 8002eb0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002eb4:	4649      	mov	r1, r9
 8002eb6:	008b      	lsls	r3, r1, #2
 8002eb8:	4641      	mov	r1, r8
 8002eba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ebe:	4641      	mov	r1, r8
 8002ec0:	008a      	lsls	r2, r1, #2
 8002ec2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002ec6:	f7fd f97f 	bl	80001c8 <__aeabi_uldivmod>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	460b      	mov	r3, r1
 8002ece:	4b0d      	ldr	r3, [pc, #52]	@ (8002f04 <UART_SetConfig+0x4e4>)
 8002ed0:	fba3 1302 	umull	r1, r3, r3, r2
 8002ed4:	095b      	lsrs	r3, r3, #5
 8002ed6:	2164      	movs	r1, #100	@ 0x64
 8002ed8:	fb01 f303 	mul.w	r3, r1, r3
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	011b      	lsls	r3, r3, #4
 8002ee0:	3332      	adds	r3, #50	@ 0x32
 8002ee2:	4a08      	ldr	r2, [pc, #32]	@ (8002f04 <UART_SetConfig+0x4e4>)
 8002ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee8:	095b      	lsrs	r3, r3, #5
 8002eea:	f003 020f 	and.w	r2, r3, #15
 8002eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4422      	add	r2, r4
 8002ef6:	609a      	str	r2, [r3, #8]
}
 8002ef8:	bf00      	nop
 8002efa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002efe:	46bd      	mov	sp, r7
 8002f00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f04:	51eb851f 	.word	0x51eb851f

08002f08 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002f0c:	bf00      	nop
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
	...

08002f18 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af04      	add	r7, sp, #16
 8002f1e:	4603      	mov	r3, r0
 8002f20:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002f22:	f04f 33ff 	mov.w	r3, #4294967295
 8002f26:	9302      	str	r3, [sp, #8]
 8002f28:	2301      	movs	r3, #1
 8002f2a:	9301      	str	r3, [sp, #4]
 8002f2c:	1dfb      	adds	r3, r7, #7
 8002f2e:	9300      	str	r3, [sp, #0]
 8002f30:	2301      	movs	r3, #1
 8002f32:	2200      	movs	r2, #0
 8002f34:	2178      	movs	r1, #120	@ 0x78
 8002f36:	4803      	ldr	r0, [pc, #12]	@ (8002f44 <ssd1306_WriteCommand+0x2c>)
 8002f38:	f7fe f9ea 	bl	8001310 <HAL_I2C_Mem_Write>
}
 8002f3c:	bf00      	nop
 8002f3e:	3708      	adds	r7, #8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	20000028 	.word	0x20000028

08002f48 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af04      	add	r7, sp, #16
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	f04f 32ff 	mov.w	r2, #4294967295
 8002f5a:	9202      	str	r2, [sp, #8]
 8002f5c:	9301      	str	r3, [sp, #4]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	9300      	str	r3, [sp, #0]
 8002f62:	2301      	movs	r3, #1
 8002f64:	2240      	movs	r2, #64	@ 0x40
 8002f66:	2178      	movs	r1, #120	@ 0x78
 8002f68:	4803      	ldr	r0, [pc, #12]	@ (8002f78 <ssd1306_WriteData+0x30>)
 8002f6a:	f7fe f9d1 	bl	8001310 <HAL_I2C_Mem_Write>
}
 8002f6e:	bf00      	nop
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	20000028 	.word	0x20000028

08002f7c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002f80:	f7ff ffc2 	bl	8002f08 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002f84:	2064      	movs	r0, #100	@ 0x64
 8002f86:	f7fd fdd9 	bl	8000b3c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002f8a:	2000      	movs	r0, #0
 8002f8c:	f000 f9d6 	bl	800333c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002f90:	2020      	movs	r0, #32
 8002f92:	f7ff ffc1 	bl	8002f18 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002f96:	2000      	movs	r0, #0
 8002f98:	f7ff ffbe 	bl	8002f18 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002f9c:	20b0      	movs	r0, #176	@ 0xb0
 8002f9e:	f7ff ffbb 	bl	8002f18 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002fa2:	20c8      	movs	r0, #200	@ 0xc8
 8002fa4:	f7ff ffb8 	bl	8002f18 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002fa8:	2000      	movs	r0, #0
 8002faa:	f7ff ffb5 	bl	8002f18 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002fae:	2010      	movs	r0, #16
 8002fb0:	f7ff ffb2 	bl	8002f18 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002fb4:	2040      	movs	r0, #64	@ 0x40
 8002fb6:	f7ff ffaf 	bl	8002f18 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002fba:	20ff      	movs	r0, #255	@ 0xff
 8002fbc:	f000 f9aa 	bl	8003314 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002fc0:	20a1      	movs	r0, #161	@ 0xa1
 8002fc2:	f7ff ffa9 	bl	8002f18 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002fc6:	20a6      	movs	r0, #166	@ 0xa6
 8002fc8:	f7ff ffa6 	bl	8002f18 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002fcc:	20a8      	movs	r0, #168	@ 0xa8
 8002fce:	f7ff ffa3 	bl	8002f18 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002fd2:	203f      	movs	r0, #63	@ 0x3f
 8002fd4:	f7ff ffa0 	bl	8002f18 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002fd8:	20a4      	movs	r0, #164	@ 0xa4
 8002fda:	f7ff ff9d 	bl	8002f18 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002fde:	20d3      	movs	r0, #211	@ 0xd3
 8002fe0:	f7ff ff9a 	bl	8002f18 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002fe4:	2000      	movs	r0, #0
 8002fe6:	f7ff ff97 	bl	8002f18 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002fea:	20d5      	movs	r0, #213	@ 0xd5
 8002fec:	f7ff ff94 	bl	8002f18 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002ff0:	20f0      	movs	r0, #240	@ 0xf0
 8002ff2:	f7ff ff91 	bl	8002f18 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002ff6:	20d9      	movs	r0, #217	@ 0xd9
 8002ff8:	f7ff ff8e 	bl	8002f18 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002ffc:	2022      	movs	r0, #34	@ 0x22
 8002ffe:	f7ff ff8b 	bl	8002f18 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8003002:	20da      	movs	r0, #218	@ 0xda
 8003004:	f7ff ff88 	bl	8002f18 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8003008:	2012      	movs	r0, #18
 800300a:	f7ff ff85 	bl	8002f18 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800300e:	20db      	movs	r0, #219	@ 0xdb
 8003010:	f7ff ff82 	bl	8002f18 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003014:	2020      	movs	r0, #32
 8003016:	f7ff ff7f 	bl	8002f18 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800301a:	208d      	movs	r0, #141	@ 0x8d
 800301c:	f7ff ff7c 	bl	8002f18 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003020:	2014      	movs	r0, #20
 8003022:	f7ff ff79 	bl	8002f18 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8003026:	2001      	movs	r0, #1
 8003028:	f000 f988 	bl	800333c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800302c:	2000      	movs	r0, #0
 800302e:	f000 f80f 	bl	8003050 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8003032:	f000 f825 	bl	8003080 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8003036:	4b05      	ldr	r3, [pc, #20]	@ (800304c <ssd1306_Init+0xd0>)
 8003038:	2200      	movs	r2, #0
 800303a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800303c:	4b03      	ldr	r3, [pc, #12]	@ (800304c <ssd1306_Init+0xd0>)
 800303e:	2200      	movs	r2, #0
 8003040:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8003042:	4b02      	ldr	r3, [pc, #8]	@ (800304c <ssd1306_Init+0xd0>)
 8003044:	2201      	movs	r2, #1
 8003046:	711a      	strb	r2, [r3, #4]
}
 8003048:	bf00      	nop
 800304a:	bd80      	pop	{r7, pc}
 800304c:	200004c8 	.word	0x200004c8

08003050 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	4603      	mov	r3, r0
 8003058:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800305a:	79fb      	ldrb	r3, [r7, #7]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d101      	bne.n	8003064 <ssd1306_Fill+0x14>
 8003060:	2300      	movs	r3, #0
 8003062:	e000      	b.n	8003066 <ssd1306_Fill+0x16>
 8003064:	23ff      	movs	r3, #255	@ 0xff
 8003066:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800306a:	4619      	mov	r1, r3
 800306c:	4803      	ldr	r0, [pc, #12]	@ (800307c <ssd1306_Fill+0x2c>)
 800306e:	f000 f983 	bl	8003378 <memset>
}
 8003072:	bf00      	nop
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	200000c8 	.word	0x200000c8

08003080 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003086:	2300      	movs	r3, #0
 8003088:	71fb      	strb	r3, [r7, #7]
 800308a:	e016      	b.n	80030ba <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800308c:	79fb      	ldrb	r3, [r7, #7]
 800308e:	3b50      	subs	r3, #80	@ 0x50
 8003090:	b2db      	uxtb	r3, r3
 8003092:	4618      	mov	r0, r3
 8003094:	f7ff ff40 	bl	8002f18 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8003098:	2000      	movs	r0, #0
 800309a:	f7ff ff3d 	bl	8002f18 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800309e:	2010      	movs	r0, #16
 80030a0:	f7ff ff3a 	bl	8002f18 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80030a4:	79fb      	ldrb	r3, [r7, #7]
 80030a6:	01db      	lsls	r3, r3, #7
 80030a8:	4a08      	ldr	r2, [pc, #32]	@ (80030cc <ssd1306_UpdateScreen+0x4c>)
 80030aa:	4413      	add	r3, r2
 80030ac:	2180      	movs	r1, #128	@ 0x80
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7ff ff4a 	bl	8002f48 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80030b4:	79fb      	ldrb	r3, [r7, #7]
 80030b6:	3301      	adds	r3, #1
 80030b8:	71fb      	strb	r3, [r7, #7]
 80030ba:	79fb      	ldrb	r3, [r7, #7]
 80030bc:	2b07      	cmp	r3, #7
 80030be:	d9e5      	bls.n	800308c <ssd1306_UpdateScreen+0xc>
    }
}
 80030c0:	bf00      	nop
 80030c2:	bf00      	nop
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	200000c8 	.word	0x200000c8

080030d0 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	4603      	mov	r3, r0
 80030d8:	71fb      	strb	r3, [r7, #7]
 80030da:	460b      	mov	r3, r1
 80030dc:	71bb      	strb	r3, [r7, #6]
 80030de:	4613      	mov	r3, r2
 80030e0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80030e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	db3d      	blt.n	8003166 <ssd1306_DrawPixel+0x96>
 80030ea:	79bb      	ldrb	r3, [r7, #6]
 80030ec:	2b3f      	cmp	r3, #63	@ 0x3f
 80030ee:	d83a      	bhi.n	8003166 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80030f0:	797b      	ldrb	r3, [r7, #5]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d11a      	bne.n	800312c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80030f6:	79fa      	ldrb	r2, [r7, #7]
 80030f8:	79bb      	ldrb	r3, [r7, #6]
 80030fa:	08db      	lsrs	r3, r3, #3
 80030fc:	b2d8      	uxtb	r0, r3
 80030fe:	4603      	mov	r3, r0
 8003100:	01db      	lsls	r3, r3, #7
 8003102:	4413      	add	r3, r2
 8003104:	4a1b      	ldr	r2, [pc, #108]	@ (8003174 <ssd1306_DrawPixel+0xa4>)
 8003106:	5cd3      	ldrb	r3, [r2, r3]
 8003108:	b25a      	sxtb	r2, r3
 800310a:	79bb      	ldrb	r3, [r7, #6]
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	2101      	movs	r1, #1
 8003112:	fa01 f303 	lsl.w	r3, r1, r3
 8003116:	b25b      	sxtb	r3, r3
 8003118:	4313      	orrs	r3, r2
 800311a:	b259      	sxtb	r1, r3
 800311c:	79fa      	ldrb	r2, [r7, #7]
 800311e:	4603      	mov	r3, r0
 8003120:	01db      	lsls	r3, r3, #7
 8003122:	4413      	add	r3, r2
 8003124:	b2c9      	uxtb	r1, r1
 8003126:	4a13      	ldr	r2, [pc, #76]	@ (8003174 <ssd1306_DrawPixel+0xa4>)
 8003128:	54d1      	strb	r1, [r2, r3]
 800312a:	e01d      	b.n	8003168 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800312c:	79fa      	ldrb	r2, [r7, #7]
 800312e:	79bb      	ldrb	r3, [r7, #6]
 8003130:	08db      	lsrs	r3, r3, #3
 8003132:	b2d8      	uxtb	r0, r3
 8003134:	4603      	mov	r3, r0
 8003136:	01db      	lsls	r3, r3, #7
 8003138:	4413      	add	r3, r2
 800313a:	4a0e      	ldr	r2, [pc, #56]	@ (8003174 <ssd1306_DrawPixel+0xa4>)
 800313c:	5cd3      	ldrb	r3, [r2, r3]
 800313e:	b25a      	sxtb	r2, r3
 8003140:	79bb      	ldrb	r3, [r7, #6]
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	2101      	movs	r1, #1
 8003148:	fa01 f303 	lsl.w	r3, r1, r3
 800314c:	b25b      	sxtb	r3, r3
 800314e:	43db      	mvns	r3, r3
 8003150:	b25b      	sxtb	r3, r3
 8003152:	4013      	ands	r3, r2
 8003154:	b259      	sxtb	r1, r3
 8003156:	79fa      	ldrb	r2, [r7, #7]
 8003158:	4603      	mov	r3, r0
 800315a:	01db      	lsls	r3, r3, #7
 800315c:	4413      	add	r3, r2
 800315e:	b2c9      	uxtb	r1, r1
 8003160:	4a04      	ldr	r2, [pc, #16]	@ (8003174 <ssd1306_DrawPixel+0xa4>)
 8003162:	54d1      	strb	r1, [r2, r3]
 8003164:	e000      	b.n	8003168 <ssd1306_DrawPixel+0x98>
        return;
 8003166:	bf00      	nop
    }
}
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	200000c8 	.word	0x200000c8

08003178 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8003178:	b590      	push	{r4, r7, lr}
 800317a:	b089      	sub	sp, #36	@ 0x24
 800317c:	af00      	add	r7, sp, #0
 800317e:	4604      	mov	r4, r0
 8003180:	4638      	mov	r0, r7
 8003182:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8003186:	4623      	mov	r3, r4
 8003188:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800318a:	7bfb      	ldrb	r3, [r7, #15]
 800318c:	2b1f      	cmp	r3, #31
 800318e:	d902      	bls.n	8003196 <ssd1306_WriteChar+0x1e>
 8003190:	7bfb      	ldrb	r3, [r7, #15]
 8003192:	2b7e      	cmp	r3, #126	@ 0x7e
 8003194:	d901      	bls.n	800319a <ssd1306_WriteChar+0x22>
        return 0;
 8003196:	2300      	movs	r3, #0
 8003198:	e077      	b.n	800328a <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800319a:	4b3e      	ldr	r3, [pc, #248]	@ (8003294 <ssd1306_WriteChar+0x11c>)
 800319c:	881b      	ldrh	r3, [r3, #0]
 800319e:	461a      	mov	r2, r3
 80031a0:	783b      	ldrb	r3, [r7, #0]
 80031a2:	4413      	add	r3, r2
 80031a4:	2b80      	cmp	r3, #128	@ 0x80
 80031a6:	dc06      	bgt.n	80031b6 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80031a8:	4b3a      	ldr	r3, [pc, #232]	@ (8003294 <ssd1306_WriteChar+0x11c>)
 80031aa:	885b      	ldrh	r3, [r3, #2]
 80031ac:	461a      	mov	r2, r3
 80031ae:	787b      	ldrb	r3, [r7, #1]
 80031b0:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80031b2:	2b40      	cmp	r3, #64	@ 0x40
 80031b4:	dd01      	ble.n	80031ba <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 80031b6:	2300      	movs	r3, #0
 80031b8:	e067      	b.n	800328a <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80031ba:	2300      	movs	r3, #0
 80031bc:	61fb      	str	r3, [r7, #28]
 80031be:	e04e      	b.n	800325e <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	7bfb      	ldrb	r3, [r7, #15]
 80031c4:	3b20      	subs	r3, #32
 80031c6:	7879      	ldrb	r1, [r7, #1]
 80031c8:	fb01 f303 	mul.w	r3, r1, r3
 80031cc:	4619      	mov	r1, r3
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	440b      	add	r3, r1
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	4413      	add	r3, r2
 80031d6:	881b      	ldrh	r3, [r3, #0]
 80031d8:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 80031da:	2300      	movs	r3, #0
 80031dc:	61bb      	str	r3, [r7, #24]
 80031de:	e036      	b.n	800324e <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 80031e0:	697a      	ldr	r2, [r7, #20]
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d013      	beq.n	8003218 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80031f0:	4b28      	ldr	r3, [pc, #160]	@ (8003294 <ssd1306_WriteChar+0x11c>)
 80031f2:	881b      	ldrh	r3, [r3, #0]
 80031f4:	b2da      	uxtb	r2, r3
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	4413      	add	r3, r2
 80031fc:	b2d8      	uxtb	r0, r3
 80031fe:	4b25      	ldr	r3, [pc, #148]	@ (8003294 <ssd1306_WriteChar+0x11c>)
 8003200:	885b      	ldrh	r3, [r3, #2]
 8003202:	b2da      	uxtb	r2, r3
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	b2db      	uxtb	r3, r3
 8003208:	4413      	add	r3, r2
 800320a:	b2db      	uxtb	r3, r3
 800320c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8003210:	4619      	mov	r1, r3
 8003212:	f7ff ff5d 	bl	80030d0 <ssd1306_DrawPixel>
 8003216:	e017      	b.n	8003248 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8003218:	4b1e      	ldr	r3, [pc, #120]	@ (8003294 <ssd1306_WriteChar+0x11c>)
 800321a:	881b      	ldrh	r3, [r3, #0]
 800321c:	b2da      	uxtb	r2, r3
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	b2db      	uxtb	r3, r3
 8003222:	4413      	add	r3, r2
 8003224:	b2d8      	uxtb	r0, r3
 8003226:	4b1b      	ldr	r3, [pc, #108]	@ (8003294 <ssd1306_WriteChar+0x11c>)
 8003228:	885b      	ldrh	r3, [r3, #2]
 800322a:	b2da      	uxtb	r2, r3
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	b2db      	uxtb	r3, r3
 8003230:	4413      	add	r3, r2
 8003232:	b2d9      	uxtb	r1, r3
 8003234:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003238:	2b00      	cmp	r3, #0
 800323a:	bf0c      	ite	eq
 800323c:	2301      	moveq	r3, #1
 800323e:	2300      	movne	r3, #0
 8003240:	b2db      	uxtb	r3, r3
 8003242:	461a      	mov	r2, r3
 8003244:	f7ff ff44 	bl	80030d0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	3301      	adds	r3, #1
 800324c:	61bb      	str	r3, [r7, #24]
 800324e:	783b      	ldrb	r3, [r7, #0]
 8003250:	461a      	mov	r2, r3
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	4293      	cmp	r3, r2
 8003256:	d3c3      	bcc.n	80031e0 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	3301      	adds	r3, #1
 800325c:	61fb      	str	r3, [r7, #28]
 800325e:	787b      	ldrb	r3, [r7, #1]
 8003260:	461a      	mov	r2, r3
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	4293      	cmp	r3, r2
 8003266:	d3ab      	bcc.n	80031c0 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8003268:	4b0a      	ldr	r3, [pc, #40]	@ (8003294 <ssd1306_WriteChar+0x11c>)
 800326a:	881b      	ldrh	r3, [r3, #0]
 800326c:	68ba      	ldr	r2, [r7, #8]
 800326e:	2a00      	cmp	r2, #0
 8003270:	d005      	beq.n	800327e <ssd1306_WriteChar+0x106>
 8003272:	68b9      	ldr	r1, [r7, #8]
 8003274:	7bfa      	ldrb	r2, [r7, #15]
 8003276:	3a20      	subs	r2, #32
 8003278:	440a      	add	r2, r1
 800327a:	7812      	ldrb	r2, [r2, #0]
 800327c:	e000      	b.n	8003280 <ssd1306_WriteChar+0x108>
 800327e:	783a      	ldrb	r2, [r7, #0]
 8003280:	4413      	add	r3, r2
 8003282:	b29a      	uxth	r2, r3
 8003284:	4b03      	ldr	r3, [pc, #12]	@ (8003294 <ssd1306_WriteChar+0x11c>)
 8003286:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8003288:	7bfb      	ldrb	r3, [r7, #15]
}
 800328a:	4618      	mov	r0, r3
 800328c:	3724      	adds	r7, #36	@ 0x24
 800328e:	46bd      	mov	sp, r7
 8003290:	bd90      	pop	{r4, r7, pc}
 8003292:	bf00      	nop
 8003294:	200004c8 	.word	0x200004c8

08003298 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af02      	add	r7, sp, #8
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	4638      	mov	r0, r7
 80032a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 80032a6:	e013      	b.n	80032d0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	7818      	ldrb	r0, [r3, #0]
 80032ac:	7e3b      	ldrb	r3, [r7, #24]
 80032ae:	9300      	str	r3, [sp, #0]
 80032b0:	463b      	mov	r3, r7
 80032b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032b4:	f7ff ff60 	bl	8003178 <ssd1306_WriteChar>
 80032b8:	4603      	mov	r3, r0
 80032ba:	461a      	mov	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d002      	beq.n	80032ca <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	e008      	b.n	80032dc <ssd1306_WriteString+0x44>
        }
        str++;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	3301      	adds	r3, #1
 80032ce:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d1e7      	bne.n	80032a8 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	781b      	ldrb	r3, [r3, #0]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	4603      	mov	r3, r0
 80032ec:	460a      	mov	r2, r1
 80032ee:	71fb      	strb	r3, [r7, #7]
 80032f0:	4613      	mov	r3, r2
 80032f2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80032f4:	79fb      	ldrb	r3, [r7, #7]
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	4b05      	ldr	r3, [pc, #20]	@ (8003310 <ssd1306_SetCursor+0x2c>)
 80032fa:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80032fc:	79bb      	ldrb	r3, [r7, #6]
 80032fe:	b29a      	uxth	r2, r3
 8003300:	4b03      	ldr	r3, [pc, #12]	@ (8003310 <ssd1306_SetCursor+0x2c>)
 8003302:	805a      	strh	r2, [r3, #2]
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr
 8003310:	200004c8 	.word	0x200004c8

08003314 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	4603      	mov	r3, r0
 800331c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800331e:	2381      	movs	r3, #129	@ 0x81
 8003320:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8003322:	7bfb      	ldrb	r3, [r7, #15]
 8003324:	4618      	mov	r0, r3
 8003326:	f7ff fdf7 	bl	8002f18 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800332a:	79fb      	ldrb	r3, [r7, #7]
 800332c:	4618      	mov	r0, r3
 800332e:	f7ff fdf3 	bl	8002f18 <ssd1306_WriteCommand>
}
 8003332:	bf00      	nop
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
	...

0800333c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	4603      	mov	r3, r0
 8003344:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8003346:	79fb      	ldrb	r3, [r7, #7]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d005      	beq.n	8003358 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800334c:	23af      	movs	r3, #175	@ 0xaf
 800334e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8003350:	4b08      	ldr	r3, [pc, #32]	@ (8003374 <ssd1306_SetDisplayOn+0x38>)
 8003352:	2201      	movs	r2, #1
 8003354:	715a      	strb	r2, [r3, #5]
 8003356:	e004      	b.n	8003362 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8003358:	23ae      	movs	r3, #174	@ 0xae
 800335a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800335c:	4b05      	ldr	r3, [pc, #20]	@ (8003374 <ssd1306_SetDisplayOn+0x38>)
 800335e:	2200      	movs	r2, #0
 8003360:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8003362:	7bfb      	ldrb	r3, [r7, #15]
 8003364:	4618      	mov	r0, r3
 8003366:	f7ff fdd7 	bl	8002f18 <ssd1306_WriteCommand>
}
 800336a:	bf00      	nop
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	200004c8 	.word	0x200004c8

08003378 <memset>:
 8003378:	4402      	add	r2, r0
 800337a:	4603      	mov	r3, r0
 800337c:	4293      	cmp	r3, r2
 800337e:	d100      	bne.n	8003382 <memset+0xa>
 8003380:	4770      	bx	lr
 8003382:	f803 1b01 	strb.w	r1, [r3], #1
 8003386:	e7f9      	b.n	800337c <memset+0x4>

08003388 <__libc_init_array>:
 8003388:	b570      	push	{r4, r5, r6, lr}
 800338a:	4d0d      	ldr	r5, [pc, #52]	@ (80033c0 <__libc_init_array+0x38>)
 800338c:	4c0d      	ldr	r4, [pc, #52]	@ (80033c4 <__libc_init_array+0x3c>)
 800338e:	1b64      	subs	r4, r4, r5
 8003390:	10a4      	asrs	r4, r4, #2
 8003392:	2600      	movs	r6, #0
 8003394:	42a6      	cmp	r6, r4
 8003396:	d109      	bne.n	80033ac <__libc_init_array+0x24>
 8003398:	4d0b      	ldr	r5, [pc, #44]	@ (80033c8 <__libc_init_array+0x40>)
 800339a:	4c0c      	ldr	r4, [pc, #48]	@ (80033cc <__libc_init_array+0x44>)
 800339c:	f000 f818 	bl	80033d0 <_init>
 80033a0:	1b64      	subs	r4, r4, r5
 80033a2:	10a4      	asrs	r4, r4, #2
 80033a4:	2600      	movs	r6, #0
 80033a6:	42a6      	cmp	r6, r4
 80033a8:	d105      	bne.n	80033b6 <__libc_init_array+0x2e>
 80033aa:	bd70      	pop	{r4, r5, r6, pc}
 80033ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80033b0:	4798      	blx	r3
 80033b2:	3601      	adds	r6, #1
 80033b4:	e7ee      	b.n	8003394 <__libc_init_array+0xc>
 80033b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80033ba:	4798      	blx	r3
 80033bc:	3601      	adds	r6, #1
 80033be:	e7f2      	b.n	80033a6 <__libc_init_array+0x1e>
 80033c0:	08003ba0 	.word	0x08003ba0
 80033c4:	08003ba0 	.word	0x08003ba0
 80033c8:	08003ba0 	.word	0x08003ba0
 80033cc:	08003ba4 	.word	0x08003ba4

080033d0 <_init>:
 80033d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033d2:	bf00      	nop
 80033d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033d6:	bc08      	pop	{r3}
 80033d8:	469e      	mov	lr, r3
 80033da:	4770      	bx	lr

080033dc <_fini>:
 80033dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033de:	bf00      	nop
 80033e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033e2:	bc08      	pop	{r3}
 80033e4:	469e      	mov	lr, r3
 80033e6:	4770      	bx	lr
