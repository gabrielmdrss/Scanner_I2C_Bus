
Scanner_i2cbus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000372c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000064c  080038b4  080038b4  000048b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f00  08003f00  00005010  2**0
                  CONTENTS
  4 .ARM          00000008  08003f00  08003f00  00004f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f08  08003f08  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f08  08003f08  00004f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003f0c  08003f0c  00004f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003f10  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005010  2**0
                  CONTENTS
 10 .bss          000004d4  20000010  20000010  00005010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004e4  200004e4  00005010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b3ec  00000000  00000000  00005040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a8b  00000000  00000000  0001042c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a20  00000000  00000000  00011eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007e2  00000000  00000000  000128d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020aac  00000000  00000000  000130ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d450  00000000  00000000  00033b66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5c0d  00000000  00000000  00040fb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00106bc3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002a10  00000000  00000000  00106c08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  00109618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800389c 	.word	0x0800389c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	0800389c 	.word	0x0800389c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <MPU6050_Init>:
float Ax, Ay, Az;

void MPU6050_Init();
void MPU6050_Read_Accel();

void MPU6050_Init (void){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b086      	sub	sp, #24
 80004bc:	af04      	add	r7, sp, #16
uint8_t check = 0;
 80004be:	2300      	movs	r3, #0
 80004c0:	71fb      	strb	r3, [r7, #7]
uint8_t Data;
// check device ID WHO_AM_I
HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, 0x75, 1, &check, 1, 1000);
 80004c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80004c6:	9302      	str	r3, [sp, #8]
 80004c8:	2301      	movs	r3, #1
 80004ca:	9301      	str	r3, [sp, #4]
 80004cc:	1dfb      	adds	r3, r7, #7
 80004ce:	9300      	str	r3, [sp, #0]
 80004d0:	2301      	movs	r3, #1
 80004d2:	2275      	movs	r2, #117	@ 0x75
 80004d4:	2168      	movs	r1, #104	@ 0x68
 80004d6:	4823      	ldr	r0, [pc, #140]	@ (8000564 <MPU6050_Init+0xac>)
 80004d8:	f001 f94c 	bl	8001774 <HAL_I2C_Mem_Read>
if (check == 0x70) // 0x68 will be returned by the sensor if OK
 80004dc:	79fb      	ldrb	r3, [r7, #7]
 80004de:	2b70      	cmp	r3, #112	@ 0x70
 80004e0:	d13b      	bne.n	800055a <MPU6050_Init+0xa2>
{

// power management register 0X6B we should write all 0's to wake the sensor up
Data = 0;
 80004e2:	2300      	movs	r3, #0
 80004e4:	71bb      	strb	r3, [r7, #6]
HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x6B, 1,&Data, 1, 1000);
 80004e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80004ea:	9302      	str	r3, [sp, #8]
 80004ec:	2301      	movs	r3, #1
 80004ee:	9301      	str	r3, [sp, #4]
 80004f0:	1dbb      	adds	r3, r7, #6
 80004f2:	9300      	str	r3, [sp, #0]
 80004f4:	2301      	movs	r3, #1
 80004f6:	226b      	movs	r2, #107	@ 0x6b
 80004f8:	2168      	movs	r1, #104	@ 0x68
 80004fa:	481a      	ldr	r0, [pc, #104]	@ (8000564 <MPU6050_Init+0xac>)
 80004fc:	f001 f840 	bl	8001580 <HAL_I2C_Mem_Write>
// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
Data = 0x07;
 8000500:	2307      	movs	r3, #7
 8000502:	71bb      	strb	r3, [r7, #6]
HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x19, 1, &Data, 1, 1000);
 8000504:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000508:	9302      	str	r3, [sp, #8]
 800050a:	2301      	movs	r3, #1
 800050c:	9301      	str	r3, [sp, #4]
 800050e:	1dbb      	adds	r3, r7, #6
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	2301      	movs	r3, #1
 8000514:	2219      	movs	r2, #25
 8000516:	2168      	movs	r1, #104	@ 0x68
 8000518:	4812      	ldr	r0, [pc, #72]	@ (8000564 <MPU6050_Init+0xac>)
 800051a:	f001 f831 	bl	8001580 <HAL_I2C_Mem_Write>
// Set Gyroscopic configuration in GYRO_CONFIG Register
Data = 0x00; // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ± 250 ̐/s
 800051e:	2300      	movs	r3, #0
 8000520:	71bb      	strb	r3, [r7, #6]
HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x1B, 1, &Data, 1, 1000);
 8000522:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000526:	9302      	str	r3, [sp, #8]
 8000528:	2301      	movs	r3, #1
 800052a:	9301      	str	r3, [sp, #4]
 800052c:	1dbb      	adds	r3, r7, #6
 800052e:	9300      	str	r3, [sp, #0]
 8000530:	2301      	movs	r3, #1
 8000532:	221b      	movs	r2, #27
 8000534:	2168      	movs	r1, #104	@ 0x68
 8000536:	480b      	ldr	r0, [pc, #44]	@ (8000564 <MPU6050_Init+0xac>)
 8000538:	f001 f822 	bl	8001580 <HAL_I2C_Mem_Write>
// Set accelerometer configuration in ACCEL_CONFIG Register
Data = 0x00; // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ± 2g
 800053c:	2300      	movs	r3, #0
 800053e:	71bb      	strb	r3, [r7, #6]
HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x1C, 1, &Data, 1, 1000);
 8000540:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000544:	9302      	str	r3, [sp, #8]
 8000546:	2301      	movs	r3, #1
 8000548:	9301      	str	r3, [sp, #4]
 800054a:	1dbb      	adds	r3, r7, #6
 800054c:	9300      	str	r3, [sp, #0]
 800054e:	2301      	movs	r3, #1
 8000550:	221c      	movs	r2, #28
 8000552:	2168      	movs	r1, #104	@ 0x68
 8000554:	4803      	ldr	r0, [pc, #12]	@ (8000564 <MPU6050_Init+0xac>)
 8000556:	f001 f813 	bl	8001580 <HAL_I2C_Mem_Write>
}}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	2000002c 	.word	0x2000002c

08000568 <int_to_hex>:
#ifndef FUNCTIONS_H_
#define FUNCTIONS_H_

void int_to_hex(uint8_t value, char *buffer) {
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	4603      	mov	r3, r0
 8000570:	6039      	str	r1, [r7, #0]
 8000572:	71fb      	strb	r3, [r7, #7]
	buffer[0] = '0';
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	2230      	movs	r2, #48	@ 0x30
 8000578:	701a      	strb	r2, [r3, #0]
	buffer[1] = 'x';
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	3301      	adds	r3, #1
 800057e:	2278      	movs	r2, #120	@ 0x78
 8000580:	701a      	strb	r2, [r3, #0]
	buffer[2] = "0123456789ABCDEF"[(value >> 4) & 0x0F]; // Extrai o nibble mais significativo
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	091b      	lsrs	r3, r3, #4
 8000586:	b2db      	uxtb	r3, r3
 8000588:	f003 020f 	and.w	r2, r3, #15
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	3302      	adds	r3, #2
 8000590:	490a      	ldr	r1, [pc, #40]	@ (80005bc <int_to_hex+0x54>)
 8000592:	5c8a      	ldrb	r2, [r1, r2]
 8000594:	701a      	strb	r2, [r3, #0]
	buffer[3] = "0123456789ABCDEF"[value & 0x0F]; // Extrai o nibble menos significativo
 8000596:	79fb      	ldrb	r3, [r7, #7]
 8000598:	f003 020f 	and.w	r2, r3, #15
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	3303      	adds	r3, #3
 80005a0:	4906      	ldr	r1, [pc, #24]	@ (80005bc <int_to_hex+0x54>)
 80005a2:	5c8a      	ldrb	r2, [r1, r2]
 80005a4:	701a      	strb	r2, [r3, #0]
	buffer[4] = '\0'; // Finaliza a string
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	3304      	adds	r3, #4
 80005aa:	2200      	movs	r2, #0
 80005ac:	701a      	strb	r2, [r3, #0]
}
 80005ae:	bf00      	nop
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	080038b4 	.word	0x080038b4

080005c0 <i2c_clock_speed>:

void i2c_clock_speed(uint32_t clock) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]


	hi2c1.Instance = I2C1;
 80005c8:	4b13      	ldr	r3, [pc, #76]	@ (8000618 <i2c_clock_speed+0x58>)
 80005ca:	4a14      	ldr	r2, [pc, #80]	@ (800061c <i2c_clock_speed+0x5c>)
 80005cc:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = clock;
 80005ce:	4a12      	ldr	r2, [pc, #72]	@ (8000618 <i2c_clock_speed+0x58>)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	6053      	str	r3, [r2, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005d4:	4b10      	ldr	r3, [pc, #64]	@ (8000618 <i2c_clock_speed+0x58>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80005da:	4b0f      	ldr	r3, [pc, #60]	@ (8000618 <i2c_clock_speed+0x58>)
 80005dc:	2200      	movs	r2, #0
 80005de:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000618 <i2c_clock_speed+0x58>)
 80005e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80005e6:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000618 <i2c_clock_speed+0x58>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80005ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000618 <i2c_clock_speed+0x58>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005f4:	4b08      	ldr	r3, [pc, #32]	@ (8000618 <i2c_clock_speed+0x58>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005fa:	4b07      	ldr	r3, [pc, #28]	@ (8000618 <i2c_clock_speed+0x58>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000600:	4805      	ldr	r0, [pc, #20]	@ (8000618 <i2c_clock_speed+0x58>)
 8000602:	f000 fe79 	bl	80012f8 <HAL_I2C_Init>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <i2c_clock_speed+0x50>
		Error_Handler();
 800060c:	f000 fa1a 	bl	8000a44 <Error_Handler>
	}
}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	2000002c 	.word	0x2000002c
 800061c:	40005400 	.word	0x40005400

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000626:	f000 fb37 	bl	8000c98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062a:	f000 f8e7 	bl	80007fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062e:	f000 f99b 	bl	8000968 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000632:	f000 f941 	bl	80008b8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000636:	f000 f96d 	bl	8000914 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	/* Inicialize o display SSD1306 */
	ssd1306_Init();
 800063a:	f002 ff05 	bl	8003448 <ssd1306_Init>
	//	ssd1306_SetCursor(2, 30); // Defina a posição inicial
	//	ssd1306_WriteString(message, Font_7x10, 1); // Escreva a mensagem
	//	ssd1306_UpdateScreen(); // Atualize o display
	/*Mostrar uma leitura do acelerômetro, no display*/

	MPU6050_Init();
 800063e:	f7ff ff3b 	bl	80004b8 <MPU6050_Init>
	HAL_Delay(1);
 8000642:	2001      	movs	r0, #1
 8000644:	f000 fb9a 	bl	8000d7c <HAL_Delay>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		ssd1306_Fill(0); //Seta todos os pixels do buffer para branco
 8000648:	2000      	movs	r0, #0
 800064a:	f002 ff67 	bl	800351c <ssd1306_Fill>

		verifica = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 800064e:	2180      	movs	r1, #128	@ 0x80
 8000650:	485e      	ldr	r0, [pc, #376]	@ (80007cc <main+0x1ac>)
 8000652:	f000 fe39 	bl	80012c8 <HAL_GPIO_ReadPin>
 8000656:	4603      	mov	r3, r0
 8000658:	461a      	mov	r2, r3
 800065a:	4b5d      	ldr	r3, [pc, #372]	@ (80007d0 <main+0x1b0>)
 800065c:	601a      	str	r2, [r3, #0]

		if(verifica)
 800065e:	4b5c      	ldr	r3, [pc, #368]	@ (80007d0 <main+0x1b0>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d052      	beq.n	800070c <main+0xec>
		{
			i2c_clock_speed(100000);
 8000666:	485b      	ldr	r0, [pc, #364]	@ (80007d4 <main+0x1b4>)
 8000668:	f7ff ffaa 	bl	80005c0 <i2c_clock_speed>
			ssd1306_SetCursor(30, y); //Posiciona o "cursor" no pixel correspondente
 800066c:	4b5a      	ldr	r3, [pc, #360]	@ (80007d8 <main+0x1b8>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	4619      	mov	r1, r3
 8000672:	201e      	movs	r0, #30
 8000674:	f003 f89c 	bl	80037b0 <ssd1306_SetCursor>
			ssd1306_WriteString("FREQ 100KHZ", Font_6x8, 1); //Escreve o texto no buffer
 8000678:	4b58      	ldr	r3, [pc, #352]	@ (80007dc <main+0x1bc>)
 800067a:	2201      	movs	r2, #1
 800067c:	9200      	str	r2, [sp, #0]
 800067e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000680:	4857      	ldr	r0, [pc, #348]	@ (80007e0 <main+0x1c0>)
 8000682:	f003 f86f 	bl	8003764 <ssd1306_WriteString>
			y = y + 20;
 8000686:	4b54      	ldr	r3, [pc, #336]	@ (80007d8 <main+0x1b8>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	3314      	adds	r3, #20
 800068c:	b2da      	uxtb	r2, r3
 800068e:	4b52      	ldr	r3, [pc, #328]	@ (80007d8 <main+0x1b8>)
 8000690:	701a      	strb	r2, [r3, #0]

			for (uint8_t i = 0; i < 128; i++) {
 8000692:	2300      	movs	r3, #0
 8000694:	71fb      	strb	r3, [r7, #7]
 8000696:	e034      	b.n	8000702 <main+0xe2>
				ret = HAL_I2C_IsDeviceReady(&hi2c1, (i << 1), 1, 100);
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	b29b      	uxth	r3, r3
 800069c:	005b      	lsls	r3, r3, #1
 800069e:	b299      	uxth	r1, r3
 80006a0:	2364      	movs	r3, #100	@ 0x64
 80006a2:	2201      	movs	r2, #1
 80006a4:	484f      	ldr	r0, [pc, #316]	@ (80007e4 <main+0x1c4>)
 80006a6:	f001 fa97 	bl	8001bd8 <HAL_I2C_IsDeviceReady>
 80006aa:	4603      	mov	r3, r0
 80006ac:	461a      	mov	r2, r3
 80006ae:	4b4e      	ldr	r3, [pc, #312]	@ (80007e8 <main+0x1c8>)
 80006b0:	701a      	strb	r2, [r3, #0]

				if (ret == HAL_OK) {
 80006b2:	4b4d      	ldr	r3, [pc, #308]	@ (80007e8 <main+0x1c8>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d120      	bne.n	80006fc <main+0xdc>
					ssd1306_SetCursor(2, y); //Posiciona o "cursor" no pixel correspondente
 80006ba:	4b47      	ldr	r3, [pc, #284]	@ (80007d8 <main+0x1b8>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	4619      	mov	r1, r3
 80006c0:	2002      	movs	r0, #2
 80006c2:	f003 f875 	bl	80037b0 <ssd1306_SetCursor>
					ssd1306_WriteString("Address: ", Font_6x8, 1); //Escreve o texto no buffer
 80006c6:	4b45      	ldr	r3, [pc, #276]	@ (80007dc <main+0x1bc>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	9200      	str	r2, [sp, #0]
 80006cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80006ce:	4847      	ldr	r0, [pc, #284]	@ (80007ec <main+0x1cc>)
 80006d0:	f003 f848 	bl	8003764 <ssd1306_WriteString>
					int_to_hex(i, buffer_address);
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	4946      	ldr	r1, [pc, #280]	@ (80007f0 <main+0x1d0>)
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff ff45 	bl	8000568 <int_to_hex>
					ssd1306_WriteString(buffer_address, Font_6x8, 1); //Escreve o texto no buffer
 80006de:	4b3f      	ldr	r3, [pc, #252]	@ (80007dc <main+0x1bc>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	9200      	str	r2, [sp, #0]
 80006e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80006e6:	4842      	ldr	r0, [pc, #264]	@ (80007f0 <main+0x1d0>)
 80006e8:	f003 f83c 	bl	8003764 <ssd1306_WriteString>
					ssd1306_UpdateScreen();
 80006ec:	f002 ff2e 	bl	800354c <ssd1306_UpdateScreen>
					y = y + 10;
 80006f0:	4b39      	ldr	r3, [pc, #228]	@ (80007d8 <main+0x1b8>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	330a      	adds	r3, #10
 80006f6:	b2da      	uxtb	r2, r3
 80006f8:	4b37      	ldr	r3, [pc, #220]	@ (80007d8 <main+0x1b8>)
 80006fa:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < 128; i++) {
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	3301      	adds	r3, #1
 8000700:	71fb      	strb	r3, [r7, #7]
 8000702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000706:	2b00      	cmp	r3, #0
 8000708:	dac6      	bge.n	8000698 <main+0x78>
 800070a:	e051      	b.n	80007b0 <main+0x190>
				}
			}
		} else {

			i2c_clock_speed(400000);
 800070c:	4839      	ldr	r0, [pc, #228]	@ (80007f4 <main+0x1d4>)
 800070e:	f7ff ff57 	bl	80005c0 <i2c_clock_speed>
			ssd1306_SetCursor(30, y); //Posiciona o "cursor" no pixel correspondente
 8000712:	4b31      	ldr	r3, [pc, #196]	@ (80007d8 <main+0x1b8>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	4619      	mov	r1, r3
 8000718:	201e      	movs	r0, #30
 800071a:	f003 f849 	bl	80037b0 <ssd1306_SetCursor>
			ssd1306_WriteString("FREQ 400KHZ", Font_6x8, 1); //Escreve o texto no buffer
 800071e:	4b2f      	ldr	r3, [pc, #188]	@ (80007dc <main+0x1bc>)
 8000720:	2201      	movs	r2, #1
 8000722:	9200      	str	r2, [sp, #0]
 8000724:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000726:	4834      	ldr	r0, [pc, #208]	@ (80007f8 <main+0x1d8>)
 8000728:	f003 f81c 	bl	8003764 <ssd1306_WriteString>
			y = y + 20;
 800072c:	4b2a      	ldr	r3, [pc, #168]	@ (80007d8 <main+0x1b8>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	3314      	adds	r3, #20
 8000732:	b2da      	uxtb	r2, r3
 8000734:	4b28      	ldr	r3, [pc, #160]	@ (80007d8 <main+0x1b8>)
 8000736:	701a      	strb	r2, [r3, #0]

			for (uint8_t i = 0; i < 128; i++) {
 8000738:	2300      	movs	r3, #0
 800073a:	71bb      	strb	r3, [r7, #6]
 800073c:	e034      	b.n	80007a8 <main+0x188>
				ret = HAL_I2C_IsDeviceReady(&hi2c1, (i << 1), 1, 100);
 800073e:	79bb      	ldrb	r3, [r7, #6]
 8000740:	b29b      	uxth	r3, r3
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	b299      	uxth	r1, r3
 8000746:	2364      	movs	r3, #100	@ 0x64
 8000748:	2201      	movs	r2, #1
 800074a:	4826      	ldr	r0, [pc, #152]	@ (80007e4 <main+0x1c4>)
 800074c:	f001 fa44 	bl	8001bd8 <HAL_I2C_IsDeviceReady>
 8000750:	4603      	mov	r3, r0
 8000752:	461a      	mov	r2, r3
 8000754:	4b24      	ldr	r3, [pc, #144]	@ (80007e8 <main+0x1c8>)
 8000756:	701a      	strb	r2, [r3, #0]

				if (ret == HAL_OK) {
 8000758:	4b23      	ldr	r3, [pc, #140]	@ (80007e8 <main+0x1c8>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d120      	bne.n	80007a2 <main+0x182>
					ssd1306_SetCursor(2, y); //Posiciona o "cursor" no pixel correspondente
 8000760:	4b1d      	ldr	r3, [pc, #116]	@ (80007d8 <main+0x1b8>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	4619      	mov	r1, r3
 8000766:	2002      	movs	r0, #2
 8000768:	f003 f822 	bl	80037b0 <ssd1306_SetCursor>
					ssd1306_WriteString("Address: ", Font_6x8, 1); //Escreve o texto no buffer
 800076c:	4b1b      	ldr	r3, [pc, #108]	@ (80007dc <main+0x1bc>)
 800076e:	2201      	movs	r2, #1
 8000770:	9200      	str	r2, [sp, #0]
 8000772:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000774:	481d      	ldr	r0, [pc, #116]	@ (80007ec <main+0x1cc>)
 8000776:	f002 fff5 	bl	8003764 <ssd1306_WriteString>
					int_to_hex(i, buffer_address);
 800077a:	79bb      	ldrb	r3, [r7, #6]
 800077c:	491c      	ldr	r1, [pc, #112]	@ (80007f0 <main+0x1d0>)
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff fef2 	bl	8000568 <int_to_hex>
					ssd1306_WriteString(buffer_address, Font_6x8, 1); //Escreve o texto no buffer
 8000784:	4b15      	ldr	r3, [pc, #84]	@ (80007dc <main+0x1bc>)
 8000786:	2201      	movs	r2, #1
 8000788:	9200      	str	r2, [sp, #0]
 800078a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800078c:	4818      	ldr	r0, [pc, #96]	@ (80007f0 <main+0x1d0>)
 800078e:	f002 ffe9 	bl	8003764 <ssd1306_WriteString>
					ssd1306_UpdateScreen();
 8000792:	f002 fedb 	bl	800354c <ssd1306_UpdateScreen>
					y = y + 10;
 8000796:	4b10      	ldr	r3, [pc, #64]	@ (80007d8 <main+0x1b8>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	330a      	adds	r3, #10
 800079c:	b2da      	uxtb	r2, r3
 800079e:	4b0e      	ldr	r3, [pc, #56]	@ (80007d8 <main+0x1b8>)
 80007a0:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < 128; i++) {
 80007a2:	79bb      	ldrb	r3, [r7, #6]
 80007a4:	3301      	adds	r3, #1
 80007a6:	71bb      	strb	r3, [r7, #6]
 80007a8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	dac6      	bge.n	800073e <main+0x11e>
				}
			}
		}

		HAL_Delay(5000);
 80007b0:	f241 3088 	movw	r0, #5000	@ 0x1388
 80007b4:	f000 fae2 	bl	8000d7c <HAL_Delay>
		y = 5;
 80007b8:	4b07      	ldr	r3, [pc, #28]	@ (80007d8 <main+0x1b8>)
 80007ba:	2205      	movs	r2, #5
 80007bc:	701a      	strb	r2, [r3, #0]
		ssd1306_Fill(0);
 80007be:	2000      	movs	r0, #0
 80007c0:	f002 feac 	bl	800351c <ssd1306_Fill>
		ssd1306_UpdateScreen();
 80007c4:	f002 fec2 	bl	800354c <ssd1306_UpdateScreen>
		ssd1306_Fill(0); //Seta todos os pixels do buffer para branco
 80007c8:	e73e      	b.n	8000648 <main+0x28>
 80007ca:	bf00      	nop
 80007cc:	40020000 	.word	0x40020000
 80007d0:	200000d4 	.word	0x200000d4
 80007d4:	000186a0 	.word	0x000186a0
 80007d8:	20000000 	.word	0x20000000
 80007dc:	08003ef4 	.word	0x08003ef4
 80007e0:	080038c8 	.word	0x080038c8
 80007e4:	2000002c 	.word	0x2000002c
 80007e8:	200000c8 	.word	0x200000c8
 80007ec:	080038d4 	.word	0x080038d4
 80007f0:	200000cc 	.word	0x200000cc
 80007f4:	00061a80 	.word	0x00061a80
 80007f8:	080038e0 	.word	0x080038e0

080007fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b094      	sub	sp, #80	@ 0x50
 8000800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000802:	f107 0320 	add.w	r3, r7, #32
 8000806:	2230      	movs	r2, #48	@ 0x30
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f003 f81a 	bl	8003844 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000820:	2300      	movs	r3, #0
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	4b22      	ldr	r3, [pc, #136]	@ (80008b0 <SystemClock_Config+0xb4>)
 8000826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000828:	4a21      	ldr	r2, [pc, #132]	@ (80008b0 <SystemClock_Config+0xb4>)
 800082a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800082e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000830:	4b1f      	ldr	r3, [pc, #124]	@ (80008b0 <SystemClock_Config+0xb4>)
 8000832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000834:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800083c:	2300      	movs	r3, #0
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	4b1c      	ldr	r3, [pc, #112]	@ (80008b4 <SystemClock_Config+0xb8>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a1b      	ldr	r2, [pc, #108]	@ (80008b4 <SystemClock_Config+0xb8>)
 8000846:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800084a:	6013      	str	r3, [r2, #0]
 800084c:	4b19      	ldr	r3, [pc, #100]	@ (80008b4 <SystemClock_Config+0xb8>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000858:	2302      	movs	r3, #2
 800085a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800085c:	2301      	movs	r3, #1
 800085e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000860:	2310      	movs	r3, #16
 8000862:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000864:	2300      	movs	r3, #0
 8000866:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000868:	f107 0320 	add.w	r3, r7, #32
 800086c:	4618      	mov	r0, r3
 800086e:	f001 fe95 	bl	800259c <HAL_RCC_OscConfig>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000878:	f000 f8e4 	bl	8000a44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087c:	230f      	movs	r3, #15
 800087e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000880:	2300      	movs	r3, #0
 8000882:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000888:	2300      	movs	r3, #0
 800088a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800088c:	2300      	movs	r3, #0
 800088e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000890:	f107 030c 	add.w	r3, r7, #12
 8000894:	2100      	movs	r1, #0
 8000896:	4618      	mov	r0, r3
 8000898:	f002 f8f8 	bl	8002a8c <HAL_RCC_ClockConfig>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80008a2:	f000 f8cf 	bl	8000a44 <Error_Handler>
  }
}
 80008a6:	bf00      	nop
 80008a8:	3750      	adds	r7, #80	@ 0x50
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40023800 	.word	0x40023800
 80008b4:	40007000 	.word	0x40007000

080008b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008bc:	4b12      	ldr	r3, [pc, #72]	@ (8000908 <MX_I2C1_Init+0x50>)
 80008be:	4a13      	ldr	r2, [pc, #76]	@ (800090c <MX_I2C1_Init+0x54>)
 80008c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80008c2:	4b11      	ldr	r3, [pc, #68]	@ (8000908 <MX_I2C1_Init+0x50>)
 80008c4:	4a12      	ldr	r2, [pc, #72]	@ (8000910 <MX_I2C1_Init+0x58>)
 80008c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000908 <MX_I2C1_Init+0x50>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000908 <MX_I2C1_Init+0x50>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000908 <MX_I2C1_Init+0x50>)
 80008d6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000908 <MX_I2C1_Init+0x50>)
 80008de:	2200      	movs	r2, #0
 80008e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008e2:	4b09      	ldr	r3, [pc, #36]	@ (8000908 <MX_I2C1_Init+0x50>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008e8:	4b07      	ldr	r3, [pc, #28]	@ (8000908 <MX_I2C1_Init+0x50>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ee:	4b06      	ldr	r3, [pc, #24]	@ (8000908 <MX_I2C1_Init+0x50>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008f4:	4804      	ldr	r0, [pc, #16]	@ (8000908 <MX_I2C1_Init+0x50>)
 80008f6:	f000 fcff 	bl	80012f8 <HAL_I2C_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000900:	f000 f8a0 	bl	8000a44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}
 8000908:	2000002c 	.word	0x2000002c
 800090c:	40005400 	.word	0x40005400
 8000910:	00061a80 	.word	0x00061a80

08000914 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000918:	4b10      	ldr	r3, [pc, #64]	@ (800095c <MX_USART1_UART_Init+0x48>)
 800091a:	4a11      	ldr	r2, [pc, #68]	@ (8000960 <MX_USART1_UART_Init+0x4c>)
 800091c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 800091e:	4b0f      	ldr	r3, [pc, #60]	@ (800095c <MX_USART1_UART_Init+0x48>)
 8000920:	4a10      	ldr	r2, [pc, #64]	@ (8000964 <MX_USART1_UART_Init+0x50>)
 8000922:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000924:	4b0d      	ldr	r3, [pc, #52]	@ (800095c <MX_USART1_UART_Init+0x48>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800092a:	4b0c      	ldr	r3, [pc, #48]	@ (800095c <MX_USART1_UART_Init+0x48>)
 800092c:	2200      	movs	r2, #0
 800092e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000930:	4b0a      	ldr	r3, [pc, #40]	@ (800095c <MX_USART1_UART_Init+0x48>)
 8000932:	2200      	movs	r2, #0
 8000934:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000936:	4b09      	ldr	r3, [pc, #36]	@ (800095c <MX_USART1_UART_Init+0x48>)
 8000938:	220c      	movs	r2, #12
 800093a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093c:	4b07      	ldr	r3, [pc, #28]	@ (800095c <MX_USART1_UART_Init+0x48>)
 800093e:	2200      	movs	r2, #0
 8000940:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000942:	4b06      	ldr	r3, [pc, #24]	@ (800095c <MX_USART1_UART_Init+0x48>)
 8000944:	2200      	movs	r2, #0
 8000946:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000948:	4804      	ldr	r0, [pc, #16]	@ (800095c <MX_USART1_UART_Init+0x48>)
 800094a:	f002 fa7f 	bl	8002e4c <HAL_UART_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8000954:	f000 f876 	bl	8000a44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000080 	.word	0x20000080
 8000960:	40011000 	.word	0x40011000
 8000964:	000f4240 	.word	0x000f4240

08000968 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b088      	sub	sp, #32
 800096c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096e:	f107 030c 	add.w	r3, r7, #12
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
 800097c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	4b15      	ldr	r3, [pc, #84]	@ (80009d8 <MX_GPIO_Init+0x70>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	4a14      	ldr	r2, [pc, #80]	@ (80009d8 <MX_GPIO_Init+0x70>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	6313      	str	r3, [r2, #48]	@ 0x30
 800098e:	4b12      	ldr	r3, [pc, #72]	@ (80009d8 <MX_GPIO_Init+0x70>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	60bb      	str	r3, [r7, #8]
 8000998:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	4b0e      	ldr	r3, [pc, #56]	@ (80009d8 <MX_GPIO_Init+0x70>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	4a0d      	ldr	r2, [pc, #52]	@ (80009d8 <MX_GPIO_Init+0x70>)
 80009a4:	f043 0302 	orr.w	r3, r3, #2
 80009a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009aa:	4b0b      	ldr	r3, [pc, #44]	@ (80009d8 <MX_GPIO_Init+0x70>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	f003 0302 	and.w	r3, r3, #2
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80009b6:	2380      	movs	r3, #128	@ 0x80
 80009b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ba:	2300      	movs	r3, #0
 80009bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c2:	f107 030c 	add.w	r3, r7, #12
 80009c6:	4619      	mov	r1, r3
 80009c8:	4804      	ldr	r0, [pc, #16]	@ (80009dc <MX_GPIO_Init+0x74>)
 80009ca:	f000 fae1 	bl	8000f90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009ce:	bf00      	nop
 80009d0:	3720      	adds	r7, #32
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40020000 	.word	0x40020000

080009e0 <__io_putchar>:
//void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
//{
//	verifica = 1;
//}

int __io_putchar(int ch) {
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
	USART1->DR = (ch & (uint16_t) 0x01FF);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4a09      	ldr	r2, [pc, #36]	@ (8000a10 <__io_putchar+0x30>)
 80009ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80009f0:	6053      	str	r3, [r2, #4]
	while (!(USART1->SR & USART_SR_TXE))
 80009f2:	bf00      	nop
 80009f4:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <__io_putchar+0x30>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d0f9      	beq.n	80009f4 <__io_putchar+0x14>
		;//espera pelo fim da transmissão do caractere para evitar a segunda transmissão antes da primeira ser concluída
	return ch;
 8000a00:	687b      	ldr	r3, [r7, #4]
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	40011000 	.word	0x40011000

08000a14 <__io_getchar>:
int __io_getchar(void) {
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
	return (uint16_t) (USART1->DR & (uint16_t) 0x01FF);
 8000a18:	4b04      	ldr	r3, [pc, #16]	@ (8000a2c <__io_getchar+0x18>)
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	b29b      	uxth	r3, r3
 8000a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	40011000 	.word	0x40011000

08000a30 <USART1_IRQHandler>:
//ISR da USART1. Todas as ISR's estão definidas no arquivo startup_stm32.s
void USART1_IRQHandler(void) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
	__io_putchar(__io_getchar());
 8000a34:	f7ff ffee 	bl	8000a14 <__io_getchar>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff ffd0 	bl	80009e0 <__io_putchar>
}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a48:	b672      	cpsid	i
}
 8000a4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <Error_Handler+0x8>

08000a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	4b10      	ldr	r3, [pc, #64]	@ (8000a9c <HAL_MspInit+0x4c>)
 8000a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a5e:	4a0f      	ldr	r2, [pc, #60]	@ (8000a9c <HAL_MspInit+0x4c>)
 8000a60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a64:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a66:	4b0d      	ldr	r3, [pc, #52]	@ (8000a9c <HAL_MspInit+0x4c>)
 8000a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	603b      	str	r3, [r7, #0]
 8000a76:	4b09      	ldr	r3, [pc, #36]	@ (8000a9c <HAL_MspInit+0x4c>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a7a:	4a08      	ldr	r2, [pc, #32]	@ (8000a9c <HAL_MspInit+0x4c>)
 8000a7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a80:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a82:	4b06      	ldr	r3, [pc, #24]	@ (8000a9c <HAL_MspInit+0x4c>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	40023800 	.word	0x40023800

08000aa0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08a      	sub	sp, #40	@ 0x28
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a19      	ldr	r2, [pc, #100]	@ (8000b24 <HAL_I2C_MspInit+0x84>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d12c      	bne.n	8000b1c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	613b      	str	r3, [r7, #16]
 8000ac6:	4b18      	ldr	r3, [pc, #96]	@ (8000b28 <HAL_I2C_MspInit+0x88>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aca:	4a17      	ldr	r2, [pc, #92]	@ (8000b28 <HAL_I2C_MspInit+0x88>)
 8000acc:	f043 0302 	orr.w	r3, r3, #2
 8000ad0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ad2:	4b15      	ldr	r3, [pc, #84]	@ (8000b28 <HAL_I2C_MspInit+0x88>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	f003 0302 	and.w	r3, r3, #2
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000ade:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000ae2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ae4:	2312      	movs	r3, #18
 8000ae6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aec:	2303      	movs	r3, #3
 8000aee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000af0:	2304      	movs	r3, #4
 8000af2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	4619      	mov	r1, r3
 8000afa:	480c      	ldr	r0, [pc, #48]	@ (8000b2c <HAL_I2C_MspInit+0x8c>)
 8000afc:	f000 fa48 	bl	8000f90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b00:	2300      	movs	r3, #0
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	4b08      	ldr	r3, [pc, #32]	@ (8000b28 <HAL_I2C_MspInit+0x88>)
 8000b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b08:	4a07      	ldr	r2, [pc, #28]	@ (8000b28 <HAL_I2C_MspInit+0x88>)
 8000b0a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b10:	4b05      	ldr	r3, [pc, #20]	@ (8000b28 <HAL_I2C_MspInit+0x88>)
 8000b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000b1c:	bf00      	nop
 8000b1e:	3728      	adds	r7, #40	@ 0x28
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40005400 	.word	0x40005400
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40020400 	.word	0x40020400

08000b30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08a      	sub	sp, #40	@ 0x28
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a19      	ldr	r2, [pc, #100]	@ (8000bb4 <HAL_UART_MspInit+0x84>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d12c      	bne.n	8000bac <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	613b      	str	r3, [r7, #16]
 8000b56:	4b18      	ldr	r3, [pc, #96]	@ (8000bb8 <HAL_UART_MspInit+0x88>)
 8000b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b5a:	4a17      	ldr	r2, [pc, #92]	@ (8000bb8 <HAL_UART_MspInit+0x88>)
 8000b5c:	f043 0310 	orr.w	r3, r3, #16
 8000b60:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b62:	4b15      	ldr	r3, [pc, #84]	@ (8000bb8 <HAL_UART_MspInit+0x88>)
 8000b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b66:	f003 0310 	and.w	r3, r3, #16
 8000b6a:	613b      	str	r3, [r7, #16]
 8000b6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	4b11      	ldr	r3, [pc, #68]	@ (8000bb8 <HAL_UART_MspInit+0x88>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b76:	4a10      	ldr	r2, [pc, #64]	@ (8000bb8 <HAL_UART_MspInit+0x88>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb8 <HAL_UART_MspInit+0x88>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b8a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000b8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b90:	2302      	movs	r3, #2
 8000b92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b98:	2303      	movs	r3, #3
 8000b9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b9c:	2307      	movs	r3, #7
 8000b9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4805      	ldr	r0, [pc, #20]	@ (8000bbc <HAL_UART_MspInit+0x8c>)
 8000ba8:	f000 f9f2 	bl	8000f90 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000bac:	bf00      	nop
 8000bae:	3728      	adds	r7, #40	@ 0x28
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40011000 	.word	0x40011000
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40020000 	.word	0x40020000

08000bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bc4:	bf00      	nop
 8000bc6:	e7fd      	b.n	8000bc4 <NMI_Handler+0x4>

08000bc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <HardFault_Handler+0x4>

08000bd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd4:	bf00      	nop
 8000bd6:	e7fd      	b.n	8000bd4 <MemManage_Handler+0x4>

08000bd8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <BusFault_Handler+0x4>

08000be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be4:	bf00      	nop
 8000be6:	e7fd      	b.n	8000be4 <UsageFault_Handler+0x4>

08000be8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c16:	f000 f891 	bl	8000d3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
	...

08000c20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c24:	4b06      	ldr	r3, [pc, #24]	@ (8000c40 <SystemInit+0x20>)
 8000c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c2a:	4a05      	ldr	r2, [pc, #20]	@ (8000c40 <SystemInit+0x20>)
 8000c2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c7c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c48:	f7ff ffea 	bl	8000c20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c4c:	480c      	ldr	r0, [pc, #48]	@ (8000c80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c4e:	490d      	ldr	r1, [pc, #52]	@ (8000c84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c50:	4a0d      	ldr	r2, [pc, #52]	@ (8000c88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c54:	e002      	b.n	8000c5c <LoopCopyDataInit>

08000c56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c5a:	3304      	adds	r3, #4

08000c5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c60:	d3f9      	bcc.n	8000c56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c62:	4a0a      	ldr	r2, [pc, #40]	@ (8000c8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c64:	4c0a      	ldr	r4, [pc, #40]	@ (8000c90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c68:	e001      	b.n	8000c6e <LoopFillZerobss>

08000c6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c6c:	3204      	adds	r2, #4

08000c6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c70:	d3fb      	bcc.n	8000c6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c72:	f002 fdef 	bl	8003854 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c76:	f7ff fcd3 	bl	8000620 <main>
  bx  lr    
 8000c7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c84:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000c88:	08003f10 	.word	0x08003f10
  ldr r2, =_sbss
 8000c8c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c90:	200004e4 	.word	0x200004e4

08000c94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c94:	e7fe      	b.n	8000c94 <ADC_IRQHandler>
	...

08000c98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd8 <HAL_Init+0x40>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a0d      	ldr	r2, [pc, #52]	@ (8000cd8 <HAL_Init+0x40>)
 8000ca2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ca6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd8 <HAL_Init+0x40>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd8 <HAL_Init+0x40>)
 8000cae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb4:	4b08      	ldr	r3, [pc, #32]	@ (8000cd8 <HAL_Init+0x40>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a07      	ldr	r2, [pc, #28]	@ (8000cd8 <HAL_Init+0x40>)
 8000cba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc0:	2003      	movs	r0, #3
 8000cc2:	f000 f931 	bl	8000f28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cc6:	200f      	movs	r0, #15
 8000cc8:	f000 f808 	bl	8000cdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ccc:	f7ff fec0 	bl	8000a50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40023c00 	.word	0x40023c00

08000cdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ce4:	4b12      	ldr	r3, [pc, #72]	@ (8000d30 <HAL_InitTick+0x54>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	4b12      	ldr	r3, [pc, #72]	@ (8000d34 <HAL_InitTick+0x58>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	4619      	mov	r1, r3
 8000cee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f000 f93b 	bl	8000f76 <HAL_SYSTICK_Config>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e00e      	b.n	8000d28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2b0f      	cmp	r3, #15
 8000d0e:	d80a      	bhi.n	8000d26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d10:	2200      	movs	r2, #0
 8000d12:	6879      	ldr	r1, [r7, #4]
 8000d14:	f04f 30ff 	mov.w	r0, #4294967295
 8000d18:	f000 f911 	bl	8000f3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d1c:	4a06      	ldr	r2, [pc, #24]	@ (8000d38 <HAL_InitTick+0x5c>)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d22:	2300      	movs	r3, #0
 8000d24:	e000      	b.n	8000d28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000004 	.word	0x20000004
 8000d34:	2000000c 	.word	0x2000000c
 8000d38:	20000008 	.word	0x20000008

08000d3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d40:	4b06      	ldr	r3, [pc, #24]	@ (8000d5c <HAL_IncTick+0x20>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	461a      	mov	r2, r3
 8000d46:	4b06      	ldr	r3, [pc, #24]	@ (8000d60 <HAL_IncTick+0x24>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	4a04      	ldr	r2, [pc, #16]	@ (8000d60 <HAL_IncTick+0x24>)
 8000d4e:	6013      	str	r3, [r2, #0]
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	2000000c 	.word	0x2000000c
 8000d60:	200000d8 	.word	0x200000d8

08000d64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return uwTick;
 8000d68:	4b03      	ldr	r3, [pc, #12]	@ (8000d78 <HAL_GetTick+0x14>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	200000d8 	.word	0x200000d8

08000d7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d84:	f7ff ffee 	bl	8000d64 <HAL_GetTick>
 8000d88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d94:	d005      	beq.n	8000da2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d96:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc0 <HAL_Delay+0x44>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	4413      	add	r3, r2
 8000da0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000da2:	bf00      	nop
 8000da4:	f7ff ffde 	bl	8000d64 <HAL_GetTick>
 8000da8:	4602      	mov	r2, r0
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	68fa      	ldr	r2, [r7, #12]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d8f7      	bhi.n	8000da4 <HAL_Delay+0x28>
  {
  }
}
 8000db4:	bf00      	nop
 8000db6:	bf00      	nop
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	2000000c 	.word	0x2000000c

08000dc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000e08 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000de0:	4013      	ands	r3, r2
 8000de2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000df0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000df4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000df6:	4a04      	ldr	r2, [pc, #16]	@ (8000e08 <__NVIC_SetPriorityGrouping+0x44>)
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	60d3      	str	r3, [r2, #12]
}
 8000dfc:	bf00      	nop
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e10:	4b04      	ldr	r3, [pc, #16]	@ (8000e24 <__NVIC_GetPriorityGrouping+0x18>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	0a1b      	lsrs	r3, r3, #8
 8000e16:	f003 0307 	and.w	r3, r3, #7
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	6039      	str	r1, [r7, #0]
 8000e32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	db0a      	blt.n	8000e52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	490c      	ldr	r1, [pc, #48]	@ (8000e74 <__NVIC_SetPriority+0x4c>)
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	0112      	lsls	r2, r2, #4
 8000e48:	b2d2      	uxtb	r2, r2
 8000e4a:	440b      	add	r3, r1
 8000e4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e50:	e00a      	b.n	8000e68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	4908      	ldr	r1, [pc, #32]	@ (8000e78 <__NVIC_SetPriority+0x50>)
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	f003 030f 	and.w	r3, r3, #15
 8000e5e:	3b04      	subs	r3, #4
 8000e60:	0112      	lsls	r2, r2, #4
 8000e62:	b2d2      	uxtb	r2, r2
 8000e64:	440b      	add	r3, r1
 8000e66:	761a      	strb	r2, [r3, #24]
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000e100 	.word	0xe000e100
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b089      	sub	sp, #36	@ 0x24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	f1c3 0307 	rsb	r3, r3, #7
 8000e96:	2b04      	cmp	r3, #4
 8000e98:	bf28      	it	cs
 8000e9a:	2304      	movcs	r3, #4
 8000e9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	2b06      	cmp	r3, #6
 8000ea4:	d902      	bls.n	8000eac <NVIC_EncodePriority+0x30>
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	3b03      	subs	r3, #3
 8000eaa:	e000      	b.n	8000eae <NVIC_EncodePriority+0x32>
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43da      	mvns	r2, r3
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	401a      	ands	r2, r3
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	fa01 f303 	lsl.w	r3, r1, r3
 8000ece:	43d9      	mvns	r1, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed4:	4313      	orrs	r3, r2
         );
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3724      	adds	r7, #36	@ 0x24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
	...

08000ee4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ef4:	d301      	bcc.n	8000efa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e00f      	b.n	8000f1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000efa:	4a0a      	ldr	r2, [pc, #40]	@ (8000f24 <SysTick_Config+0x40>)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f02:	210f      	movs	r1, #15
 8000f04:	f04f 30ff 	mov.w	r0, #4294967295
 8000f08:	f7ff ff8e 	bl	8000e28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f0c:	4b05      	ldr	r3, [pc, #20]	@ (8000f24 <SysTick_Config+0x40>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f12:	4b04      	ldr	r3, [pc, #16]	@ (8000f24 <SysTick_Config+0x40>)
 8000f14:	2207      	movs	r2, #7
 8000f16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	e000e010 	.word	0xe000e010

08000f28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f7ff ff47 	bl	8000dc4 <__NVIC_SetPriorityGrouping>
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b086      	sub	sp, #24
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	4603      	mov	r3, r0
 8000f46:	60b9      	str	r1, [r7, #8]
 8000f48:	607a      	str	r2, [r7, #4]
 8000f4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f50:	f7ff ff5c 	bl	8000e0c <__NVIC_GetPriorityGrouping>
 8000f54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	68b9      	ldr	r1, [r7, #8]
 8000f5a:	6978      	ldr	r0, [r7, #20]
 8000f5c:	f7ff ff8e 	bl	8000e7c <NVIC_EncodePriority>
 8000f60:	4602      	mov	r2, r0
 8000f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f66:	4611      	mov	r1, r2
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ff5d 	bl	8000e28 <__NVIC_SetPriority>
}
 8000f6e:	bf00      	nop
 8000f70:	3718      	adds	r7, #24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f7ff ffb0 	bl	8000ee4 <SysTick_Config>
 8000f84:	4603      	mov	r3, r0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b089      	sub	sp, #36	@ 0x24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61fb      	str	r3, [r7, #28]
 8000faa:	e16b      	b.n	8001284 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fac:	2201      	movs	r2, #1
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	697a      	ldr	r2, [r7, #20]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	f040 815a 	bne.w	800127e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f003 0303 	and.w	r3, r3, #3
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d005      	beq.n	8000fe2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d130      	bne.n	8001044 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	2203      	movs	r2, #3
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	68da      	ldr	r2, [r3, #12]
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4313      	orrs	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001018:	2201      	movs	r2, #1
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4013      	ands	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	091b      	lsrs	r3, r3, #4
 800102e:	f003 0201 	and.w	r2, r3, #1
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4313      	orrs	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f003 0303 	and.w	r3, r3, #3
 800104c:	2b03      	cmp	r3, #3
 800104e:	d017      	beq.n	8001080 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	2203      	movs	r2, #3
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	689a      	ldr	r2, [r3, #8]
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4313      	orrs	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f003 0303 	and.w	r3, r3, #3
 8001088:	2b02      	cmp	r3, #2
 800108a:	d123      	bne.n	80010d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	08da      	lsrs	r2, r3, #3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3208      	adds	r2, #8
 8001094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001098:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	f003 0307 	and.w	r3, r3, #7
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	220f      	movs	r2, #15
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	691a      	ldr	r2, [r3, #16]
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	08da      	lsrs	r2, r3, #3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	3208      	adds	r2, #8
 80010ce:	69b9      	ldr	r1, [r7, #24]
 80010d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	2203      	movs	r2, #3
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f003 0203 	and.w	r2, r3, #3
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4313      	orrs	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001110:	2b00      	cmp	r3, #0
 8001112:	f000 80b4 	beq.w	800127e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	4b60      	ldr	r3, [pc, #384]	@ (800129c <HAL_GPIO_Init+0x30c>)
 800111c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800111e:	4a5f      	ldr	r2, [pc, #380]	@ (800129c <HAL_GPIO_Init+0x30c>)
 8001120:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001124:	6453      	str	r3, [r2, #68]	@ 0x44
 8001126:	4b5d      	ldr	r3, [pc, #372]	@ (800129c <HAL_GPIO_Init+0x30c>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800112a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001132:	4a5b      	ldr	r2, [pc, #364]	@ (80012a0 <HAL_GPIO_Init+0x310>)
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	089b      	lsrs	r3, r3, #2
 8001138:	3302      	adds	r3, #2
 800113a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800113e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	f003 0303 	and.w	r3, r3, #3
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	220f      	movs	r2, #15
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43db      	mvns	r3, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4013      	ands	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a52      	ldr	r2, [pc, #328]	@ (80012a4 <HAL_GPIO_Init+0x314>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d02b      	beq.n	80011b6 <HAL_GPIO_Init+0x226>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a51      	ldr	r2, [pc, #324]	@ (80012a8 <HAL_GPIO_Init+0x318>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d025      	beq.n	80011b2 <HAL_GPIO_Init+0x222>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a50      	ldr	r2, [pc, #320]	@ (80012ac <HAL_GPIO_Init+0x31c>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d01f      	beq.n	80011ae <HAL_GPIO_Init+0x21e>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a4f      	ldr	r2, [pc, #316]	@ (80012b0 <HAL_GPIO_Init+0x320>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d019      	beq.n	80011aa <HAL_GPIO_Init+0x21a>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a4e      	ldr	r2, [pc, #312]	@ (80012b4 <HAL_GPIO_Init+0x324>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d013      	beq.n	80011a6 <HAL_GPIO_Init+0x216>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a4d      	ldr	r2, [pc, #308]	@ (80012b8 <HAL_GPIO_Init+0x328>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d00d      	beq.n	80011a2 <HAL_GPIO_Init+0x212>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a4c      	ldr	r2, [pc, #304]	@ (80012bc <HAL_GPIO_Init+0x32c>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d007      	beq.n	800119e <HAL_GPIO_Init+0x20e>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a4b      	ldr	r2, [pc, #300]	@ (80012c0 <HAL_GPIO_Init+0x330>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d101      	bne.n	800119a <HAL_GPIO_Init+0x20a>
 8001196:	2307      	movs	r3, #7
 8001198:	e00e      	b.n	80011b8 <HAL_GPIO_Init+0x228>
 800119a:	2308      	movs	r3, #8
 800119c:	e00c      	b.n	80011b8 <HAL_GPIO_Init+0x228>
 800119e:	2306      	movs	r3, #6
 80011a0:	e00a      	b.n	80011b8 <HAL_GPIO_Init+0x228>
 80011a2:	2305      	movs	r3, #5
 80011a4:	e008      	b.n	80011b8 <HAL_GPIO_Init+0x228>
 80011a6:	2304      	movs	r3, #4
 80011a8:	e006      	b.n	80011b8 <HAL_GPIO_Init+0x228>
 80011aa:	2303      	movs	r3, #3
 80011ac:	e004      	b.n	80011b8 <HAL_GPIO_Init+0x228>
 80011ae:	2302      	movs	r3, #2
 80011b0:	e002      	b.n	80011b8 <HAL_GPIO_Init+0x228>
 80011b2:	2301      	movs	r3, #1
 80011b4:	e000      	b.n	80011b8 <HAL_GPIO_Init+0x228>
 80011b6:	2300      	movs	r3, #0
 80011b8:	69fa      	ldr	r2, [r7, #28]
 80011ba:	f002 0203 	and.w	r2, r2, #3
 80011be:	0092      	lsls	r2, r2, #2
 80011c0:	4093      	lsls	r3, r2
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011c8:	4935      	ldr	r1, [pc, #212]	@ (80012a0 <HAL_GPIO_Init+0x310>)
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	089b      	lsrs	r3, r3, #2
 80011ce:	3302      	adds	r3, #2
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011d6:	4b3b      	ldr	r3, [pc, #236]	@ (80012c4 <HAL_GPIO_Init+0x334>)
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	43db      	mvns	r3, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4013      	ands	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011fa:	4a32      	ldr	r2, [pc, #200]	@ (80012c4 <HAL_GPIO_Init+0x334>)
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001200:	4b30      	ldr	r3, [pc, #192]	@ (80012c4 <HAL_GPIO_Init+0x334>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	43db      	mvns	r3, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4013      	ands	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d003      	beq.n	8001224 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	4313      	orrs	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001224:	4a27      	ldr	r2, [pc, #156]	@ (80012c4 <HAL_GPIO_Init+0x334>)
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800122a:	4b26      	ldr	r3, [pc, #152]	@ (80012c4 <HAL_GPIO_Init+0x334>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	43db      	mvns	r3, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4013      	ands	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800124e:	4a1d      	ldr	r2, [pc, #116]	@ (80012c4 <HAL_GPIO_Init+0x334>)
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001254:	4b1b      	ldr	r3, [pc, #108]	@ (80012c4 <HAL_GPIO_Init+0x334>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	43db      	mvns	r3, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4013      	ands	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d003      	beq.n	8001278 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	4313      	orrs	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001278:	4a12      	ldr	r2, [pc, #72]	@ (80012c4 <HAL_GPIO_Init+0x334>)
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3301      	adds	r3, #1
 8001282:	61fb      	str	r3, [r7, #28]
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	2b0f      	cmp	r3, #15
 8001288:	f67f ae90 	bls.w	8000fac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800128c:	bf00      	nop
 800128e:	bf00      	nop
 8001290:	3724      	adds	r7, #36	@ 0x24
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	40023800 	.word	0x40023800
 80012a0:	40013800 	.word	0x40013800
 80012a4:	40020000 	.word	0x40020000
 80012a8:	40020400 	.word	0x40020400
 80012ac:	40020800 	.word	0x40020800
 80012b0:	40020c00 	.word	0x40020c00
 80012b4:	40021000 	.word	0x40021000
 80012b8:	40021400 	.word	0x40021400
 80012bc:	40021800 	.word	0x40021800
 80012c0:	40021c00 	.word	0x40021c00
 80012c4:	40013c00 	.word	0x40013c00

080012c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	460b      	mov	r3, r1
 80012d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	691a      	ldr	r2, [r3, #16]
 80012d8:	887b      	ldrh	r3, [r7, #2]
 80012da:	4013      	ands	r3, r2
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d002      	beq.n	80012e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012e0:	2301      	movs	r3, #1
 80012e2:	73fb      	strb	r3, [r7, #15]
 80012e4:	e001      	b.n	80012ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012e6:	2300      	movs	r3, #0
 80012e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3714      	adds	r7, #20
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d101      	bne.n	800130a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e12b      	b.n	8001562 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2b00      	cmp	r3, #0
 8001314:	d106      	bne.n	8001324 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2200      	movs	r2, #0
 800131a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f7ff fbbe 	bl	8000aa0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2224      	movs	r2, #36	@ 0x24
 8001328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f022 0201 	bic.w	r2, r2, #1
 800133a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800134a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800135a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800135c:	f001 fd4e 	bl	8002dfc <HAL_RCC_GetPCLK1Freq>
 8001360:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	4a81      	ldr	r2, [pc, #516]	@ (800156c <HAL_I2C_Init+0x274>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d807      	bhi.n	800137c <HAL_I2C_Init+0x84>
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4a80      	ldr	r2, [pc, #512]	@ (8001570 <HAL_I2C_Init+0x278>)
 8001370:	4293      	cmp	r3, r2
 8001372:	bf94      	ite	ls
 8001374:	2301      	movls	r3, #1
 8001376:	2300      	movhi	r3, #0
 8001378:	b2db      	uxtb	r3, r3
 800137a:	e006      	b.n	800138a <HAL_I2C_Init+0x92>
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	4a7d      	ldr	r2, [pc, #500]	@ (8001574 <HAL_I2C_Init+0x27c>)
 8001380:	4293      	cmp	r3, r2
 8001382:	bf94      	ite	ls
 8001384:	2301      	movls	r3, #1
 8001386:	2300      	movhi	r3, #0
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e0e7      	b.n	8001562 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	4a78      	ldr	r2, [pc, #480]	@ (8001578 <HAL_I2C_Init+0x280>)
 8001396:	fba2 2303 	umull	r2, r3, r2, r3
 800139a:	0c9b      	lsrs	r3, r3, #18
 800139c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	68ba      	ldr	r2, [r7, #8]
 80013ae:	430a      	orrs	r2, r1
 80013b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	6a1b      	ldr	r3, [r3, #32]
 80013b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	4a6a      	ldr	r2, [pc, #424]	@ (800156c <HAL_I2C_Init+0x274>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d802      	bhi.n	80013cc <HAL_I2C_Init+0xd4>
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	3301      	adds	r3, #1
 80013ca:	e009      	b.n	80013e0 <HAL_I2C_Init+0xe8>
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80013d2:	fb02 f303 	mul.w	r3, r2, r3
 80013d6:	4a69      	ldr	r2, [pc, #420]	@ (800157c <HAL_I2C_Init+0x284>)
 80013d8:	fba2 2303 	umull	r2, r3, r2, r3
 80013dc:	099b      	lsrs	r3, r3, #6
 80013de:	3301      	adds	r3, #1
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	6812      	ldr	r2, [r2, #0]
 80013e4:	430b      	orrs	r3, r1
 80013e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80013f2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	495c      	ldr	r1, [pc, #368]	@ (800156c <HAL_I2C_Init+0x274>)
 80013fc:	428b      	cmp	r3, r1
 80013fe:	d819      	bhi.n	8001434 <HAL_I2C_Init+0x13c>
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	1e59      	subs	r1, r3, #1
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	fbb1 f3f3 	udiv	r3, r1, r3
 800140e:	1c59      	adds	r1, r3, #1
 8001410:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001414:	400b      	ands	r3, r1
 8001416:	2b00      	cmp	r3, #0
 8001418:	d00a      	beq.n	8001430 <HAL_I2C_Init+0x138>
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	1e59      	subs	r1, r3, #1
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	fbb1 f3f3 	udiv	r3, r1, r3
 8001428:	3301      	adds	r3, #1
 800142a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800142e:	e051      	b.n	80014d4 <HAL_I2C_Init+0x1dc>
 8001430:	2304      	movs	r3, #4
 8001432:	e04f      	b.n	80014d4 <HAL_I2C_Init+0x1dc>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d111      	bne.n	8001460 <HAL_I2C_Init+0x168>
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	1e58      	subs	r0, r3, #1
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6859      	ldr	r1, [r3, #4]
 8001444:	460b      	mov	r3, r1
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	440b      	add	r3, r1
 800144a:	fbb0 f3f3 	udiv	r3, r0, r3
 800144e:	3301      	adds	r3, #1
 8001450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001454:	2b00      	cmp	r3, #0
 8001456:	bf0c      	ite	eq
 8001458:	2301      	moveq	r3, #1
 800145a:	2300      	movne	r3, #0
 800145c:	b2db      	uxtb	r3, r3
 800145e:	e012      	b.n	8001486 <HAL_I2C_Init+0x18e>
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	1e58      	subs	r0, r3, #1
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6859      	ldr	r1, [r3, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	440b      	add	r3, r1
 800146e:	0099      	lsls	r1, r3, #2
 8001470:	440b      	add	r3, r1
 8001472:	fbb0 f3f3 	udiv	r3, r0, r3
 8001476:	3301      	adds	r3, #1
 8001478:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800147c:	2b00      	cmp	r3, #0
 800147e:	bf0c      	ite	eq
 8001480:	2301      	moveq	r3, #1
 8001482:	2300      	movne	r3, #0
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <HAL_I2C_Init+0x196>
 800148a:	2301      	movs	r3, #1
 800148c:	e022      	b.n	80014d4 <HAL_I2C_Init+0x1dc>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d10e      	bne.n	80014b4 <HAL_I2C_Init+0x1bc>
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	1e58      	subs	r0, r3, #1
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6859      	ldr	r1, [r3, #4]
 800149e:	460b      	mov	r3, r1
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	440b      	add	r3, r1
 80014a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80014a8:	3301      	adds	r3, #1
 80014aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014b2:	e00f      	b.n	80014d4 <HAL_I2C_Init+0x1dc>
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	1e58      	subs	r0, r3, #1
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6859      	ldr	r1, [r3, #4]
 80014bc:	460b      	mov	r3, r1
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	440b      	add	r3, r1
 80014c2:	0099      	lsls	r1, r3, #2
 80014c4:	440b      	add	r3, r1
 80014c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80014ca:	3301      	adds	r3, #1
 80014cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80014d4:	6879      	ldr	r1, [r7, #4]
 80014d6:	6809      	ldr	r1, [r1, #0]
 80014d8:	4313      	orrs	r3, r2
 80014da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	69da      	ldr	r2, [r3, #28]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a1b      	ldr	r3, [r3, #32]
 80014ee:	431a      	orrs	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001502:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	6911      	ldr	r1, [r2, #16]
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	68d2      	ldr	r2, [r2, #12]
 800150e:	4311      	orrs	r1, r2
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	6812      	ldr	r2, [r2, #0]
 8001514:	430b      	orrs	r3, r1
 8001516:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	695a      	ldr	r2, [r3, #20]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	431a      	orrs	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	430a      	orrs	r2, r1
 8001532:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f042 0201 	orr.w	r2, r2, #1
 8001542:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2220      	movs	r2, #32
 800154e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	000186a0 	.word	0x000186a0
 8001570:	001e847f 	.word	0x001e847f
 8001574:	003d08ff 	.word	0x003d08ff
 8001578:	431bde83 	.word	0x431bde83
 800157c:	10624dd3 	.word	0x10624dd3

08001580 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b088      	sub	sp, #32
 8001584:	af02      	add	r7, sp, #8
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	4608      	mov	r0, r1
 800158a:	4611      	mov	r1, r2
 800158c:	461a      	mov	r2, r3
 800158e:	4603      	mov	r3, r0
 8001590:	817b      	strh	r3, [r7, #10]
 8001592:	460b      	mov	r3, r1
 8001594:	813b      	strh	r3, [r7, #8]
 8001596:	4613      	mov	r3, r2
 8001598:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800159a:	f7ff fbe3 	bl	8000d64 <HAL_GetTick>
 800159e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	2b20      	cmp	r3, #32
 80015aa:	f040 80d9 	bne.w	8001760 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	9300      	str	r3, [sp, #0]
 80015b2:	2319      	movs	r3, #25
 80015b4:	2201      	movs	r2, #1
 80015b6:	496d      	ldr	r1, [pc, #436]	@ (800176c <HAL_I2C_Mem_Write+0x1ec>)
 80015b8:	68f8      	ldr	r0, [r7, #12]
 80015ba:	f000 fdb9 	bl	8002130 <I2C_WaitOnFlagUntilTimeout>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80015c4:	2302      	movs	r3, #2
 80015c6:	e0cc      	b.n	8001762 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d101      	bne.n	80015d6 <HAL_I2C_Mem_Write+0x56>
 80015d2:	2302      	movs	r3, #2
 80015d4:	e0c5      	b.n	8001762 <HAL_I2C_Mem_Write+0x1e2>
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2201      	movs	r2, #1
 80015da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0301 	and.w	r3, r3, #1
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d007      	beq.n	80015fc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f042 0201 	orr.w	r2, r2, #1
 80015fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800160a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2221      	movs	r2, #33	@ 0x21
 8001610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2240      	movs	r2, #64	@ 0x40
 8001618:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2200      	movs	r2, #0
 8001620:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	6a3a      	ldr	r2, [r7, #32]
 8001626:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800162c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001632:	b29a      	uxth	r2, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4a4d      	ldr	r2, [pc, #308]	@ (8001770 <HAL_I2C_Mem_Write+0x1f0>)
 800163c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800163e:	88f8      	ldrh	r0, [r7, #6]
 8001640:	893a      	ldrh	r2, [r7, #8]
 8001642:	8979      	ldrh	r1, [r7, #10]
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	9301      	str	r3, [sp, #4]
 8001648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800164a:	9300      	str	r3, [sp, #0]
 800164c:	4603      	mov	r3, r0
 800164e:	68f8      	ldr	r0, [r7, #12]
 8001650:	f000 fbf0 	bl	8001e34 <I2C_RequestMemoryWrite>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d052      	beq.n	8001700 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e081      	b.n	8001762 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800165e:	697a      	ldr	r2, [r7, #20]
 8001660:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f000 fe7e 	bl	8002364 <I2C_WaitOnTXEFlagUntilTimeout>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d00d      	beq.n	800168a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001672:	2b04      	cmp	r3, #4
 8001674:	d107      	bne.n	8001686 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001684:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e06b      	b.n	8001762 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800168e:	781a      	ldrb	r2, [r3, #0]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800169a:	1c5a      	adds	r2, r3, #1
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016a4:	3b01      	subs	r3, #1
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	3b01      	subs	r3, #1
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	695b      	ldr	r3, [r3, #20]
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	2b04      	cmp	r3, #4
 80016c6:	d11b      	bne.n	8001700 <HAL_I2C_Mem_Write+0x180>
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d017      	beq.n	8001700 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d4:	781a      	ldrb	r2, [r3, #0]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016e0:	1c5a      	adds	r2, r3, #1
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016ea:	3b01      	subs	r3, #1
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	3b01      	subs	r3, #1
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1aa      	bne.n	800165e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001708:	697a      	ldr	r2, [r7, #20]
 800170a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800170c:	68f8      	ldr	r0, [r7, #12]
 800170e:	f000 fe71 	bl	80023f4 <I2C_WaitOnBTFFlagUntilTimeout>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d00d      	beq.n	8001734 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171c:	2b04      	cmp	r3, #4
 800171e:	d107      	bne.n	8001730 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800172e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e016      	b.n	8001762 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001742:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2220      	movs	r2, #32
 8001748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2200      	movs	r2, #0
 8001750:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2200      	movs	r2, #0
 8001758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800175c:	2300      	movs	r3, #0
 800175e:	e000      	b.n	8001762 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001760:	2302      	movs	r3, #2
  }
}
 8001762:	4618      	mov	r0, r3
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	00100002 	.word	0x00100002
 8001770:	ffff0000 	.word	0xffff0000

08001774 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b08c      	sub	sp, #48	@ 0x30
 8001778:	af02      	add	r7, sp, #8
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	4608      	mov	r0, r1
 800177e:	4611      	mov	r1, r2
 8001780:	461a      	mov	r2, r3
 8001782:	4603      	mov	r3, r0
 8001784:	817b      	strh	r3, [r7, #10]
 8001786:	460b      	mov	r3, r1
 8001788:	813b      	strh	r3, [r7, #8]
 800178a:	4613      	mov	r3, r2
 800178c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800178e:	f7ff fae9 	bl	8000d64 <HAL_GetTick>
 8001792:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800179a:	b2db      	uxtb	r3, r3
 800179c:	2b20      	cmp	r3, #32
 800179e:	f040 8214 	bne.w	8001bca <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	2319      	movs	r3, #25
 80017a8:	2201      	movs	r2, #1
 80017aa:	497b      	ldr	r1, [pc, #492]	@ (8001998 <HAL_I2C_Mem_Read+0x224>)
 80017ac:	68f8      	ldr	r0, [r7, #12]
 80017ae:	f000 fcbf 	bl	8002130 <I2C_WaitOnFlagUntilTimeout>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80017b8:	2302      	movs	r3, #2
 80017ba:	e207      	b.n	8001bcc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d101      	bne.n	80017ca <HAL_I2C_Mem_Read+0x56>
 80017c6:	2302      	movs	r3, #2
 80017c8:	e200      	b.n	8001bcc <HAL_I2C_Mem_Read+0x458>
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2201      	movs	r2, #1
 80017ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0301 	and.w	r3, r3, #1
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d007      	beq.n	80017f0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f042 0201 	orr.w	r2, r2, #1
 80017ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2222      	movs	r2, #34	@ 0x22
 8001804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2240      	movs	r2, #64	@ 0x40
 800180c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2200      	movs	r2, #0
 8001814:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800181a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001820:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001826:	b29a      	uxth	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	4a5b      	ldr	r2, [pc, #364]	@ (800199c <HAL_I2C_Mem_Read+0x228>)
 8001830:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001832:	88f8      	ldrh	r0, [r7, #6]
 8001834:	893a      	ldrh	r2, [r7, #8]
 8001836:	8979      	ldrh	r1, [r7, #10]
 8001838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800183a:	9301      	str	r3, [sp, #4]
 800183c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	4603      	mov	r3, r0
 8001842:	68f8      	ldr	r0, [r7, #12]
 8001844:	f000 fb8c 	bl	8001f60 <I2C_RequestMemoryRead>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e1bc      	b.n	8001bcc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001856:	2b00      	cmp	r3, #0
 8001858:	d113      	bne.n	8001882 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800185a:	2300      	movs	r3, #0
 800185c:	623b      	str	r3, [r7, #32]
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	695b      	ldr	r3, [r3, #20]
 8001864:	623b      	str	r3, [r7, #32]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	623b      	str	r3, [r7, #32]
 800186e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	e190      	b.n	8001ba4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001886:	2b01      	cmp	r3, #1
 8001888:	d11b      	bne.n	80018c2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001898:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	695b      	ldr	r3, [r3, #20]
 80018a4:	61fb      	str	r3, [r7, #28]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	61fb      	str	r3, [r7, #28]
 80018ae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	e170      	b.n	8001ba4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d11b      	bne.n	8001902 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80018d8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80018e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018ea:	2300      	movs	r3, #0
 80018ec:	61bb      	str	r3, [r7, #24]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	61bb      	str	r3, [r7, #24]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	61bb      	str	r3, [r7, #24]
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	e150      	b.n	8001ba4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001902:	2300      	movs	r3, #0
 8001904:	617b      	str	r3, [r7, #20]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	695b      	ldr	r3, [r3, #20]
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	617b      	str	r3, [r7, #20]
 8001916:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001918:	e144      	b.n	8001ba4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800191e:	2b03      	cmp	r3, #3
 8001920:	f200 80f1 	bhi.w	8001b06 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001928:	2b01      	cmp	r3, #1
 800192a:	d123      	bne.n	8001974 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800192c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800192e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001930:	68f8      	ldr	r0, [r7, #12]
 8001932:	f000 fda7 	bl	8002484 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e145      	b.n	8001bcc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	691a      	ldr	r2, [r3, #16]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800194a:	b2d2      	uxtb	r2, r2
 800194c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001952:	1c5a      	adds	r2, r3, #1
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800195c:	3b01      	subs	r3, #1
 800195e:	b29a      	uxth	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001968:	b29b      	uxth	r3, r3
 800196a:	3b01      	subs	r3, #1
 800196c:	b29a      	uxth	r2, r3
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001972:	e117      	b.n	8001ba4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001978:	2b02      	cmp	r3, #2
 800197a:	d14e      	bne.n	8001a1a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800197c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800197e:	9300      	str	r3, [sp, #0]
 8001980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001982:	2200      	movs	r2, #0
 8001984:	4906      	ldr	r1, [pc, #24]	@ (80019a0 <HAL_I2C_Mem_Read+0x22c>)
 8001986:	68f8      	ldr	r0, [r7, #12]
 8001988:	f000 fbd2 	bl	8002130 <I2C_WaitOnFlagUntilTimeout>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d008      	beq.n	80019a4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e11a      	b.n	8001bcc <HAL_I2C_Mem_Read+0x458>
 8001996:	bf00      	nop
 8001998:	00100002 	.word	0x00100002
 800199c:	ffff0000 	.word	0xffff0000
 80019a0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	691a      	ldr	r2, [r3, #16]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019be:	b2d2      	uxtb	r2, r2
 80019c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c6:	1c5a      	adds	r2, r3, #1
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019d0:	3b01      	subs	r3, #1
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019dc:	b29b      	uxth	r3, r3
 80019de:	3b01      	subs	r3, #1
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	691a      	ldr	r2, [r3, #16]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f0:	b2d2      	uxtb	r2, r2
 80019f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f8:	1c5a      	adds	r2, r3, #1
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a02:	3b01      	subs	r3, #1
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	3b01      	subs	r3, #1
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001a18:	e0c4      	b.n	8001ba4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a20:	2200      	movs	r2, #0
 8001a22:	496c      	ldr	r1, [pc, #432]	@ (8001bd4 <HAL_I2C_Mem_Read+0x460>)
 8001a24:	68f8      	ldr	r0, [r7, #12]
 8001a26:	f000 fb83 	bl	8002130 <I2C_WaitOnFlagUntilTimeout>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e0cb      	b.n	8001bcc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	691a      	ldr	r2, [r3, #16]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a4e:	b2d2      	uxtb	r2, r2
 8001a50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a56:	1c5a      	adds	r2, r3, #1
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a60:	3b01      	subs	r3, #1
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a78:	9300      	str	r3, [sp, #0]
 8001a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	4955      	ldr	r1, [pc, #340]	@ (8001bd4 <HAL_I2C_Mem_Read+0x460>)
 8001a80:	68f8      	ldr	r0, [r7, #12]
 8001a82:	f000 fb55 	bl	8002130 <I2C_WaitOnFlagUntilTimeout>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e09d      	b.n	8001bcc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	691a      	ldr	r2, [r3, #16]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab2:	1c5a      	adds	r2, r3, #1
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001abc:	3b01      	subs	r3, #1
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	3b01      	subs	r3, #1
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	691a      	ldr	r2, [r3, #16]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001adc:	b2d2      	uxtb	r2, r2
 8001ade:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae4:	1c5a      	adds	r2, r3, #1
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aee:	3b01      	subs	r3, #1
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	3b01      	subs	r3, #1
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001b04:	e04e      	b.n	8001ba4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b08:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	f000 fcba 	bl	8002484 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e058      	b.n	8001bcc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	691a      	ldr	r2, [r3, #16]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b24:	b2d2      	uxtb	r2, r2
 8001b26:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b2c:	1c5a      	adds	r2, r3, #1
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b36:	3b01      	subs	r3, #1
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	3b01      	subs	r3, #1
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	695b      	ldr	r3, [r3, #20]
 8001b52:	f003 0304 	and.w	r3, r3, #4
 8001b56:	2b04      	cmp	r3, #4
 8001b58:	d124      	bne.n	8001ba4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b5e:	2b03      	cmp	r3, #3
 8001b60:	d107      	bne.n	8001b72 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b70:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	691a      	ldr	r2, [r3, #16]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b7c:	b2d2      	uxtb	r2, r2
 8001b7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b84:	1c5a      	adds	r2, r3, #1
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f47f aeb6 	bne.w	800191a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2220      	movs	r2, #32
 8001bb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	e000      	b.n	8001bcc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001bca:	2302      	movs	r3, #2
  }
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3728      	adds	r7, #40	@ 0x28
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	00010004 	.word	0x00010004

08001bd8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08a      	sub	sp, #40	@ 0x28
 8001bdc:	af02      	add	r7, sp, #8
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	607a      	str	r2, [r7, #4]
 8001be2:	603b      	str	r3, [r7, #0]
 8001be4:	460b      	mov	r3, r1
 8001be6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001be8:	f7ff f8bc 	bl	8000d64 <HAL_GetTick>
 8001bec:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b20      	cmp	r3, #32
 8001bfc:	f040 8111 	bne.w	8001e22 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	2319      	movs	r3, #25
 8001c06:	2201      	movs	r2, #1
 8001c08:	4988      	ldr	r1, [pc, #544]	@ (8001e2c <HAL_I2C_IsDeviceReady+0x254>)
 8001c0a:	68f8      	ldr	r0, [r7, #12]
 8001c0c:	f000 fa90 	bl	8002130 <I2C_WaitOnFlagUntilTimeout>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001c16:	2302      	movs	r3, #2
 8001c18:	e104      	b.n	8001e24 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d101      	bne.n	8001c28 <HAL_I2C_IsDeviceReady+0x50>
 8001c24:	2302      	movs	r3, #2
 8001c26:	e0fd      	b.n	8001e24 <HAL_I2C_IsDeviceReady+0x24c>
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d007      	beq.n	8001c4e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f042 0201 	orr.w	r2, r2, #1
 8001c4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c5c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2224      	movs	r2, #36	@ 0x24
 8001c62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	4a70      	ldr	r2, [pc, #448]	@ (8001e30 <HAL_I2C_IsDeviceReady+0x258>)
 8001c70:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c80:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	9300      	str	r3, [sp, #0]
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001c8e:	68f8      	ldr	r0, [r7, #12]
 8001c90:	f000 fa4e 	bl	8002130 <I2C_WaitOnFlagUntilTimeout>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d00d      	beq.n	8001cb6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ca4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ca8:	d103      	bne.n	8001cb2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cb0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e0b6      	b.n	8001e24 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001cb6:	897b      	ldrh	r3, [r7, #10]
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	461a      	mov	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001cc4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001cc6:	f7ff f84d 	bl	8000d64 <HAL_GetTick>
 8001cca:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	bf0c      	ite	eq
 8001cda:	2301      	moveq	r3, #1
 8001cdc:	2300      	movne	r3, #0
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	695b      	ldr	r3, [r3, #20]
 8001ce8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cf0:	bf0c      	ite	eq
 8001cf2:	2301      	moveq	r3, #1
 8001cf4:	2300      	movne	r3, #0
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001cfa:	e025      	b.n	8001d48 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001cfc:	f7ff f832 	bl	8000d64 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d302      	bcc.n	8001d12 <HAL_I2C_IsDeviceReady+0x13a>
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d103      	bne.n	8001d1a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	22a0      	movs	r2, #160	@ 0xa0
 8001d16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	695b      	ldr	r3, [r3, #20]
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	bf0c      	ite	eq
 8001d28:	2301      	moveq	r3, #1
 8001d2a:	2300      	movne	r3, #0
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	695b      	ldr	r3, [r3, #20]
 8001d36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d3e:	bf0c      	ite	eq
 8001d40:	2301      	moveq	r3, #1
 8001d42:	2300      	movne	r3, #0
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2ba0      	cmp	r3, #160	@ 0xa0
 8001d52:	d005      	beq.n	8001d60 <HAL_I2C_IsDeviceReady+0x188>
 8001d54:	7dfb      	ldrb	r3, [r7, #23]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d102      	bne.n	8001d60 <HAL_I2C_IsDeviceReady+0x188>
 8001d5a:	7dbb      	ldrb	r3, [r7, #22]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0cd      	beq.n	8001cfc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2220      	movs	r2, #32
 8001d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d129      	bne.n	8001dca <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d84:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d86:	2300      	movs	r3, #0
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	695b      	ldr	r3, [r3, #20]
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	613b      	str	r3, [r7, #16]
 8001d9a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	2319      	movs	r3, #25
 8001da2:	2201      	movs	r2, #1
 8001da4:	4921      	ldr	r1, [pc, #132]	@ (8001e2c <HAL_I2C_IsDeviceReady+0x254>)
 8001da6:	68f8      	ldr	r0, [r7, #12]
 8001da8:	f000 f9c2 	bl	8002130 <I2C_WaitOnFlagUntilTimeout>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e036      	b.n	8001e24 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2220      	movs	r2, #32
 8001dba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	e02c      	b.n	8001e24 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001dd8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001de2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	2319      	movs	r3, #25
 8001dea:	2201      	movs	r2, #1
 8001dec:	490f      	ldr	r1, [pc, #60]	@ (8001e2c <HAL_I2C_IsDeviceReady+0x254>)
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f000 f99e 	bl	8002130 <I2C_WaitOnFlagUntilTimeout>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e012      	b.n	8001e24 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	3301      	adds	r3, #1
 8001e02:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	f4ff af32 	bcc.w	8001c72 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2220      	movs	r2, #32
 8001e12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e000      	b.n	8001e24 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001e22:	2302      	movs	r3, #2
  }
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3720      	adds	r7, #32
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	00100002 	.word	0x00100002
 8001e30:	ffff0000 	.word	0xffff0000

08001e34 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b088      	sub	sp, #32
 8001e38:	af02      	add	r7, sp, #8
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	4608      	mov	r0, r1
 8001e3e:	4611      	mov	r1, r2
 8001e40:	461a      	mov	r2, r3
 8001e42:	4603      	mov	r3, r0
 8001e44:	817b      	strh	r3, [r7, #10]
 8001e46:	460b      	mov	r3, r1
 8001e48:	813b      	strh	r3, [r7, #8]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e60:	9300      	str	r3, [sp, #0]
 8001e62:	6a3b      	ldr	r3, [r7, #32]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f000 f960 	bl	8002130 <I2C_WaitOnFlagUntilTimeout>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d00d      	beq.n	8001e92 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e84:	d103      	bne.n	8001e8e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e8c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e05f      	b.n	8001f52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e92:	897b      	ldrh	r3, [r7, #10]
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	461a      	mov	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001ea0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea4:	6a3a      	ldr	r2, [r7, #32]
 8001ea6:	492d      	ldr	r1, [pc, #180]	@ (8001f5c <I2C_RequestMemoryWrite+0x128>)
 8001ea8:	68f8      	ldr	r0, [r7, #12]
 8001eaa:	f000 f9bb 	bl	8002224 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e04c      	b.n	8001f52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001eb8:	2300      	movs	r3, #0
 8001eba:	617b      	str	r3, [r7, #20]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	617b      	str	r3, [r7, #20]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	617b      	str	r3, [r7, #20]
 8001ecc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ece:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ed0:	6a39      	ldr	r1, [r7, #32]
 8001ed2:	68f8      	ldr	r0, [r7, #12]
 8001ed4:	f000 fa46 	bl	8002364 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d00d      	beq.n	8001efa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	d107      	bne.n	8001ef6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ef4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e02b      	b.n	8001f52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001efa:	88fb      	ldrh	r3, [r7, #6]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d105      	bne.n	8001f0c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f00:	893b      	ldrh	r3, [r7, #8]
 8001f02:	b2da      	uxtb	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	611a      	str	r2, [r3, #16]
 8001f0a:	e021      	b.n	8001f50 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001f0c:	893b      	ldrh	r3, [r7, #8]
 8001f0e:	0a1b      	lsrs	r3, r3, #8
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	b2da      	uxtb	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f1c:	6a39      	ldr	r1, [r7, #32]
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	f000 fa20 	bl	8002364 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d00d      	beq.n	8001f46 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	d107      	bne.n	8001f42 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e005      	b.n	8001f52 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f46:	893b      	ldrh	r3, [r7, #8]
 8001f48:	b2da      	uxtb	r2, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3718      	adds	r7, #24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	00010002 	.word	0x00010002

08001f60 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b088      	sub	sp, #32
 8001f64:	af02      	add	r7, sp, #8
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	4608      	mov	r0, r1
 8001f6a:	4611      	mov	r1, r2
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4603      	mov	r3, r0
 8001f70:	817b      	strh	r3, [r7, #10]
 8001f72:	460b      	mov	r3, r1
 8001f74:	813b      	strh	r3, [r7, #8]
 8001f76:	4613      	mov	r3, r2
 8001f78:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001f88:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f98:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f9c:	9300      	str	r3, [sp, #0]
 8001f9e:	6a3b      	ldr	r3, [r7, #32]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	f000 f8c2 	bl	8002130 <I2C_WaitOnFlagUntilTimeout>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00d      	beq.n	8001fce <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fc0:	d103      	bne.n	8001fca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fc8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e0aa      	b.n	8002124 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001fce:	897b      	ldrh	r3, [r7, #10]
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001fdc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe0:	6a3a      	ldr	r2, [r7, #32]
 8001fe2:	4952      	ldr	r1, [pc, #328]	@ (800212c <I2C_RequestMemoryRead+0x1cc>)
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	f000 f91d 	bl	8002224 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e097      	b.n	8002124 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	617b      	str	r3, [r7, #20]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800200a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800200c:	6a39      	ldr	r1, [r7, #32]
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f000 f9a8 	bl	8002364 <I2C_WaitOnTXEFlagUntilTimeout>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00d      	beq.n	8002036 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201e:	2b04      	cmp	r3, #4
 8002020:	d107      	bne.n	8002032 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002030:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e076      	b.n	8002124 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002036:	88fb      	ldrh	r3, [r7, #6]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d105      	bne.n	8002048 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800203c:	893b      	ldrh	r3, [r7, #8]
 800203e:	b2da      	uxtb	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	611a      	str	r2, [r3, #16]
 8002046:	e021      	b.n	800208c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002048:	893b      	ldrh	r3, [r7, #8]
 800204a:	0a1b      	lsrs	r3, r3, #8
 800204c:	b29b      	uxth	r3, r3
 800204e:	b2da      	uxtb	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002056:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002058:	6a39      	ldr	r1, [r7, #32]
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	f000 f982 	bl	8002364 <I2C_WaitOnTXEFlagUntilTimeout>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00d      	beq.n	8002082 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206a:	2b04      	cmp	r3, #4
 800206c:	d107      	bne.n	800207e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800207c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e050      	b.n	8002124 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002082:	893b      	ldrh	r3, [r7, #8]
 8002084:	b2da      	uxtb	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800208c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800208e:	6a39      	ldr	r1, [r7, #32]
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	f000 f967 	bl	8002364 <I2C_WaitOnTXEFlagUntilTimeout>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00d      	beq.n	80020b8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a0:	2b04      	cmp	r3, #4
 80020a2:	d107      	bne.n	80020b4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020b2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e035      	b.n	8002124 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020c6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	6a3b      	ldr	r3, [r7, #32]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	f000 f82b 	bl	8002130 <I2C_WaitOnFlagUntilTimeout>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d00d      	beq.n	80020fc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020ee:	d103      	bne.n	80020f8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020f6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e013      	b.n	8002124 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80020fc:	897b      	ldrh	r3, [r7, #10]
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	f043 0301 	orr.w	r3, r3, #1
 8002104:	b2da      	uxtb	r2, r3
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800210c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210e:	6a3a      	ldr	r2, [r7, #32]
 8002110:	4906      	ldr	r1, [pc, #24]	@ (800212c <I2C_RequestMemoryRead+0x1cc>)
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f000 f886 	bl	8002224 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e000      	b.n	8002124 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3718      	adds	r7, #24
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	00010002 	.word	0x00010002

08002130 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	603b      	str	r3, [r7, #0]
 800213c:	4613      	mov	r3, r2
 800213e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002140:	e048      	b.n	80021d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002148:	d044      	beq.n	80021d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800214a:	f7fe fe0b 	bl	8000d64 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	429a      	cmp	r2, r3
 8002158:	d302      	bcc.n	8002160 <I2C_WaitOnFlagUntilTimeout+0x30>
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d139      	bne.n	80021d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	0c1b      	lsrs	r3, r3, #16
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b01      	cmp	r3, #1
 8002168:	d10d      	bne.n	8002186 <I2C_WaitOnFlagUntilTimeout+0x56>
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	695b      	ldr	r3, [r3, #20]
 8002170:	43da      	mvns	r2, r3
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	4013      	ands	r3, r2
 8002176:	b29b      	uxth	r3, r3
 8002178:	2b00      	cmp	r3, #0
 800217a:	bf0c      	ite	eq
 800217c:	2301      	moveq	r3, #1
 800217e:	2300      	movne	r3, #0
 8002180:	b2db      	uxtb	r3, r3
 8002182:	461a      	mov	r2, r3
 8002184:	e00c      	b.n	80021a0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	43da      	mvns	r2, r3
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	4013      	ands	r3, r2
 8002192:	b29b      	uxth	r3, r3
 8002194:	2b00      	cmp	r3, #0
 8002196:	bf0c      	ite	eq
 8002198:	2301      	moveq	r3, #1
 800219a:	2300      	movne	r3, #0
 800219c:	b2db      	uxtb	r3, r3
 800219e:	461a      	mov	r2, r3
 80021a0:	79fb      	ldrb	r3, [r7, #7]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d116      	bne.n	80021d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2220      	movs	r2, #32
 80021b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c0:	f043 0220 	orr.w	r2, r3, #32
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e023      	b.n	800221c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	0c1b      	lsrs	r3, r3, #16
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d10d      	bne.n	80021fa <I2C_WaitOnFlagUntilTimeout+0xca>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	43da      	mvns	r2, r3
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	4013      	ands	r3, r2
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	bf0c      	ite	eq
 80021f0:	2301      	moveq	r3, #1
 80021f2:	2300      	movne	r3, #0
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	461a      	mov	r2, r3
 80021f8:	e00c      	b.n	8002214 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	43da      	mvns	r2, r3
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	4013      	ands	r3, r2
 8002206:	b29b      	uxth	r3, r3
 8002208:	2b00      	cmp	r3, #0
 800220a:	bf0c      	ite	eq
 800220c:	2301      	moveq	r3, #1
 800220e:	2300      	movne	r3, #0
 8002210:	b2db      	uxtb	r3, r3
 8002212:	461a      	mov	r2, r3
 8002214:	79fb      	ldrb	r3, [r7, #7]
 8002216:	429a      	cmp	r2, r3
 8002218:	d093      	beq.n	8002142 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
 8002230:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002232:	e071      	b.n	8002318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800223e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002242:	d123      	bne.n	800228c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002252:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800225c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2200      	movs	r2, #0
 8002262:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2220      	movs	r2, #32
 8002268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002278:	f043 0204 	orr.w	r2, r3, #4
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e067      	b.n	800235c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002292:	d041      	beq.n	8002318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002294:	f7fe fd66 	bl	8000d64 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d302      	bcc.n	80022aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d136      	bne.n	8002318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	0c1b      	lsrs	r3, r3, #16
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d10c      	bne.n	80022ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	43da      	mvns	r2, r3
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	4013      	ands	r3, r2
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	bf14      	ite	ne
 80022c6:	2301      	movne	r3, #1
 80022c8:	2300      	moveq	r3, #0
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	e00b      	b.n	80022e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	43da      	mvns	r2, r3
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	4013      	ands	r3, r2
 80022da:	b29b      	uxth	r3, r3
 80022dc:	2b00      	cmp	r3, #0
 80022de:	bf14      	ite	ne
 80022e0:	2301      	movne	r3, #1
 80022e2:	2300      	moveq	r3, #0
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d016      	beq.n	8002318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2220      	movs	r2, #32
 80022f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002304:	f043 0220 	orr.w	r2, r3, #32
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e021      	b.n	800235c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	0c1b      	lsrs	r3, r3, #16
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b01      	cmp	r3, #1
 8002320:	d10c      	bne.n	800233c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	695b      	ldr	r3, [r3, #20]
 8002328:	43da      	mvns	r2, r3
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	4013      	ands	r3, r2
 800232e:	b29b      	uxth	r3, r3
 8002330:	2b00      	cmp	r3, #0
 8002332:	bf14      	ite	ne
 8002334:	2301      	movne	r3, #1
 8002336:	2300      	moveq	r3, #0
 8002338:	b2db      	uxtb	r3, r3
 800233a:	e00b      	b.n	8002354 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	43da      	mvns	r2, r3
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	4013      	ands	r3, r2
 8002348:	b29b      	uxth	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	bf14      	ite	ne
 800234e:	2301      	movne	r3, #1
 8002350:	2300      	moveq	r3, #0
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b00      	cmp	r3, #0
 8002356:	f47f af6d 	bne.w	8002234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002370:	e034      	b.n	80023dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	f000 f8e3 	bl	800253e <I2C_IsAcknowledgeFailed>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e034      	b.n	80023ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002388:	d028      	beq.n	80023dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800238a:	f7fe fceb 	bl	8000d64 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	68ba      	ldr	r2, [r7, #8]
 8002396:	429a      	cmp	r2, r3
 8002398:	d302      	bcc.n	80023a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d11d      	bne.n	80023dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023aa:	2b80      	cmp	r3, #128	@ 0x80
 80023ac:	d016      	beq.n	80023dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2220      	movs	r2, #32
 80023b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c8:	f043 0220 	orr.w	r2, r3, #32
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e007      	b.n	80023ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023e6:	2b80      	cmp	r3, #128	@ 0x80
 80023e8:	d1c3      	bne.n	8002372 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002400:	e034      	b.n	800246c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	f000 f89b 	bl	800253e <I2C_IsAcknowledgeFailed>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e034      	b.n	800247c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002418:	d028      	beq.n	800246c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800241a:	f7fe fca3 	bl	8000d64 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	68ba      	ldr	r2, [r7, #8]
 8002426:	429a      	cmp	r2, r3
 8002428:	d302      	bcc.n	8002430 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d11d      	bne.n	800246c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	f003 0304 	and.w	r3, r3, #4
 800243a:	2b04      	cmp	r3, #4
 800243c:	d016      	beq.n	800246c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2220      	movs	r2, #32
 8002448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002458:	f043 0220 	orr.w	r2, r3, #32
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e007      	b.n	800247c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	f003 0304 	and.w	r3, r3, #4
 8002476:	2b04      	cmp	r3, #4
 8002478:	d1c3      	bne.n	8002402 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002490:	e049      	b.n	8002526 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	695b      	ldr	r3, [r3, #20]
 8002498:	f003 0310 	and.w	r3, r3, #16
 800249c:	2b10      	cmp	r3, #16
 800249e:	d119      	bne.n	80024d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f06f 0210 	mvn.w	r2, #16
 80024a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2220      	movs	r2, #32
 80024b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e030      	b.n	8002536 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024d4:	f7fe fc46 	bl	8000d64 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d302      	bcc.n	80024ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d11d      	bne.n	8002526 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	695b      	ldr	r3, [r3, #20]
 80024f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024f4:	2b40      	cmp	r3, #64	@ 0x40
 80024f6:	d016      	beq.n	8002526 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2220      	movs	r2, #32
 8002502:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002512:	f043 0220 	orr.w	r2, r3, #32
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e007      	b.n	8002536 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002530:	2b40      	cmp	r3, #64	@ 0x40
 8002532:	d1ae      	bne.n	8002492 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800253e:	b480      	push	{r7}
 8002540:	b083      	sub	sp, #12
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002550:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002554:	d11b      	bne.n	800258e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800255e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2220      	movs	r2, #32
 800256a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257a:	f043 0204 	orr.w	r2, r3, #4
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e000      	b.n	8002590 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e267      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d075      	beq.n	80026a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80025ba:	4b88      	ldr	r3, [pc, #544]	@ (80027dc <HAL_RCC_OscConfig+0x240>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 030c 	and.w	r3, r3, #12
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	d00c      	beq.n	80025e0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025c6:	4b85      	ldr	r3, [pc, #532]	@ (80027dc <HAL_RCC_OscConfig+0x240>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80025ce:	2b08      	cmp	r3, #8
 80025d0:	d112      	bne.n	80025f8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025d2:	4b82      	ldr	r3, [pc, #520]	@ (80027dc <HAL_RCC_OscConfig+0x240>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025de:	d10b      	bne.n	80025f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e0:	4b7e      	ldr	r3, [pc, #504]	@ (80027dc <HAL_RCC_OscConfig+0x240>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d05b      	beq.n	80026a4 <HAL_RCC_OscConfig+0x108>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d157      	bne.n	80026a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e242      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002600:	d106      	bne.n	8002610 <HAL_RCC_OscConfig+0x74>
 8002602:	4b76      	ldr	r3, [pc, #472]	@ (80027dc <HAL_RCC_OscConfig+0x240>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a75      	ldr	r2, [pc, #468]	@ (80027dc <HAL_RCC_OscConfig+0x240>)
 8002608:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800260c:	6013      	str	r3, [r2, #0]
 800260e:	e01d      	b.n	800264c <HAL_RCC_OscConfig+0xb0>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002618:	d10c      	bne.n	8002634 <HAL_RCC_OscConfig+0x98>
 800261a:	4b70      	ldr	r3, [pc, #448]	@ (80027dc <HAL_RCC_OscConfig+0x240>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a6f      	ldr	r2, [pc, #444]	@ (80027dc <HAL_RCC_OscConfig+0x240>)
 8002620:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002624:	6013      	str	r3, [r2, #0]
 8002626:	4b6d      	ldr	r3, [pc, #436]	@ (80027dc <HAL_RCC_OscConfig+0x240>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a6c      	ldr	r2, [pc, #432]	@ (80027dc <HAL_RCC_OscConfig+0x240>)
 800262c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002630:	6013      	str	r3, [r2, #0]
 8002632:	e00b      	b.n	800264c <HAL_RCC_OscConfig+0xb0>
 8002634:	4b69      	ldr	r3, [pc, #420]	@ (80027dc <HAL_RCC_OscConfig+0x240>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a68      	ldr	r2, [pc, #416]	@ (80027dc <HAL_RCC_OscConfig+0x240>)
 800263a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800263e:	6013      	str	r3, [r2, #0]
 8002640:	4b66      	ldr	r3, [pc, #408]	@ (80027dc <HAL_RCC_OscConfig+0x240>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a65      	ldr	r2, [pc, #404]	@ (80027dc <HAL_RCC_OscConfig+0x240>)
 8002646:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800264a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d013      	beq.n	800267c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002654:	f7fe fb86 	bl	8000d64 <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800265c:	f7fe fb82 	bl	8000d64 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b64      	cmp	r3, #100	@ 0x64
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e207      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800266e:	4b5b      	ldr	r3, [pc, #364]	@ (80027dc <HAL_RCC_OscConfig+0x240>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d0f0      	beq.n	800265c <HAL_RCC_OscConfig+0xc0>
 800267a:	e014      	b.n	80026a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267c:	f7fe fb72 	bl	8000d64 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002684:	f7fe fb6e 	bl	8000d64 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b64      	cmp	r3, #100	@ 0x64
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e1f3      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002696:	4b51      	ldr	r3, [pc, #324]	@ (80027dc <HAL_RCC_OscConfig+0x240>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1f0      	bne.n	8002684 <HAL_RCC_OscConfig+0xe8>
 80026a2:	e000      	b.n	80026a6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d063      	beq.n	800277a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80026b2:	4b4a      	ldr	r3, [pc, #296]	@ (80027dc <HAL_RCC_OscConfig+0x240>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f003 030c 	and.w	r3, r3, #12
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00b      	beq.n	80026d6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026be:	4b47      	ldr	r3, [pc, #284]	@ (80027dc <HAL_RCC_OscConfig+0x240>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80026c6:	2b08      	cmp	r3, #8
 80026c8:	d11c      	bne.n	8002704 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026ca:	4b44      	ldr	r3, [pc, #272]	@ (80027dc <HAL_RCC_OscConfig+0x240>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d116      	bne.n	8002704 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026d6:	4b41      	ldr	r3, [pc, #260]	@ (80027dc <HAL_RCC_OscConfig+0x240>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d005      	beq.n	80026ee <HAL_RCC_OscConfig+0x152>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d001      	beq.n	80026ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e1c7      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ee:	4b3b      	ldr	r3, [pc, #236]	@ (80027dc <HAL_RCC_OscConfig+0x240>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	4937      	ldr	r1, [pc, #220]	@ (80027dc <HAL_RCC_OscConfig+0x240>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002702:	e03a      	b.n	800277a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d020      	beq.n	800274e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800270c:	4b34      	ldr	r3, [pc, #208]	@ (80027e0 <HAL_RCC_OscConfig+0x244>)
 800270e:	2201      	movs	r2, #1
 8002710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002712:	f7fe fb27 	bl	8000d64 <HAL_GetTick>
 8002716:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002718:	e008      	b.n	800272c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800271a:	f7fe fb23 	bl	8000d64 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e1a8      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800272c:	4b2b      	ldr	r3, [pc, #172]	@ (80027dc <HAL_RCC_OscConfig+0x240>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d0f0      	beq.n	800271a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002738:	4b28      	ldr	r3, [pc, #160]	@ (80027dc <HAL_RCC_OscConfig+0x240>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	4925      	ldr	r1, [pc, #148]	@ (80027dc <HAL_RCC_OscConfig+0x240>)
 8002748:	4313      	orrs	r3, r2
 800274a:	600b      	str	r3, [r1, #0]
 800274c:	e015      	b.n	800277a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800274e:	4b24      	ldr	r3, [pc, #144]	@ (80027e0 <HAL_RCC_OscConfig+0x244>)
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002754:	f7fe fb06 	bl	8000d64 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800275c:	f7fe fb02 	bl	8000d64 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e187      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800276e:	4b1b      	ldr	r3, [pc, #108]	@ (80027dc <HAL_RCC_OscConfig+0x240>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f0      	bne.n	800275c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	2b00      	cmp	r3, #0
 8002784:	d036      	beq.n	80027f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d016      	beq.n	80027bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800278e:	4b15      	ldr	r3, [pc, #84]	@ (80027e4 <HAL_RCC_OscConfig+0x248>)
 8002790:	2201      	movs	r2, #1
 8002792:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002794:	f7fe fae6 	bl	8000d64 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800279c:	f7fe fae2 	bl	8000d64 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e167      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ae:	4b0b      	ldr	r3, [pc, #44]	@ (80027dc <HAL_RCC_OscConfig+0x240>)
 80027b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d0f0      	beq.n	800279c <HAL_RCC_OscConfig+0x200>
 80027ba:	e01b      	b.n	80027f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027bc:	4b09      	ldr	r3, [pc, #36]	@ (80027e4 <HAL_RCC_OscConfig+0x248>)
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c2:	f7fe facf 	bl	8000d64 <HAL_GetTick>
 80027c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027c8:	e00e      	b.n	80027e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027ca:	f7fe facb 	bl	8000d64 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d907      	bls.n	80027e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e150      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
 80027dc:	40023800 	.word	0x40023800
 80027e0:	42470000 	.word	0x42470000
 80027e4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027e8:	4b88      	ldr	r3, [pc, #544]	@ (8002a0c <HAL_RCC_OscConfig+0x470>)
 80027ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1ea      	bne.n	80027ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f000 8097 	beq.w	8002930 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002802:	2300      	movs	r3, #0
 8002804:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002806:	4b81      	ldr	r3, [pc, #516]	@ (8002a0c <HAL_RCC_OscConfig+0x470>)
 8002808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10f      	bne.n	8002832 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	60bb      	str	r3, [r7, #8]
 8002816:	4b7d      	ldr	r3, [pc, #500]	@ (8002a0c <HAL_RCC_OscConfig+0x470>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281a:	4a7c      	ldr	r2, [pc, #496]	@ (8002a0c <HAL_RCC_OscConfig+0x470>)
 800281c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002820:	6413      	str	r3, [r2, #64]	@ 0x40
 8002822:	4b7a      	ldr	r3, [pc, #488]	@ (8002a0c <HAL_RCC_OscConfig+0x470>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002826:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800282a:	60bb      	str	r3, [r7, #8]
 800282c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800282e:	2301      	movs	r3, #1
 8002830:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002832:	4b77      	ldr	r3, [pc, #476]	@ (8002a10 <HAL_RCC_OscConfig+0x474>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800283a:	2b00      	cmp	r3, #0
 800283c:	d118      	bne.n	8002870 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800283e:	4b74      	ldr	r3, [pc, #464]	@ (8002a10 <HAL_RCC_OscConfig+0x474>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a73      	ldr	r2, [pc, #460]	@ (8002a10 <HAL_RCC_OscConfig+0x474>)
 8002844:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002848:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800284a:	f7fe fa8b 	bl	8000d64 <HAL_GetTick>
 800284e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002850:	e008      	b.n	8002864 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002852:	f7fe fa87 	bl	8000d64 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e10c      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002864:	4b6a      	ldr	r3, [pc, #424]	@ (8002a10 <HAL_RCC_OscConfig+0x474>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0f0      	beq.n	8002852 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	2b01      	cmp	r3, #1
 8002876:	d106      	bne.n	8002886 <HAL_RCC_OscConfig+0x2ea>
 8002878:	4b64      	ldr	r3, [pc, #400]	@ (8002a0c <HAL_RCC_OscConfig+0x470>)
 800287a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800287c:	4a63      	ldr	r2, [pc, #396]	@ (8002a0c <HAL_RCC_OscConfig+0x470>)
 800287e:	f043 0301 	orr.w	r3, r3, #1
 8002882:	6713      	str	r3, [r2, #112]	@ 0x70
 8002884:	e01c      	b.n	80028c0 <HAL_RCC_OscConfig+0x324>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	2b05      	cmp	r3, #5
 800288c:	d10c      	bne.n	80028a8 <HAL_RCC_OscConfig+0x30c>
 800288e:	4b5f      	ldr	r3, [pc, #380]	@ (8002a0c <HAL_RCC_OscConfig+0x470>)
 8002890:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002892:	4a5e      	ldr	r2, [pc, #376]	@ (8002a0c <HAL_RCC_OscConfig+0x470>)
 8002894:	f043 0304 	orr.w	r3, r3, #4
 8002898:	6713      	str	r3, [r2, #112]	@ 0x70
 800289a:	4b5c      	ldr	r3, [pc, #368]	@ (8002a0c <HAL_RCC_OscConfig+0x470>)
 800289c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800289e:	4a5b      	ldr	r2, [pc, #364]	@ (8002a0c <HAL_RCC_OscConfig+0x470>)
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80028a6:	e00b      	b.n	80028c0 <HAL_RCC_OscConfig+0x324>
 80028a8:	4b58      	ldr	r3, [pc, #352]	@ (8002a0c <HAL_RCC_OscConfig+0x470>)
 80028aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ac:	4a57      	ldr	r2, [pc, #348]	@ (8002a0c <HAL_RCC_OscConfig+0x470>)
 80028ae:	f023 0301 	bic.w	r3, r3, #1
 80028b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80028b4:	4b55      	ldr	r3, [pc, #340]	@ (8002a0c <HAL_RCC_OscConfig+0x470>)
 80028b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028b8:	4a54      	ldr	r2, [pc, #336]	@ (8002a0c <HAL_RCC_OscConfig+0x470>)
 80028ba:	f023 0304 	bic.w	r3, r3, #4
 80028be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d015      	beq.n	80028f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c8:	f7fe fa4c 	bl	8000d64 <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ce:	e00a      	b.n	80028e6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028d0:	f7fe fa48 	bl	8000d64 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028de:	4293      	cmp	r3, r2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e0cb      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028e6:	4b49      	ldr	r3, [pc, #292]	@ (8002a0c <HAL_RCC_OscConfig+0x470>)
 80028e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d0ee      	beq.n	80028d0 <HAL_RCC_OscConfig+0x334>
 80028f2:	e014      	b.n	800291e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028f4:	f7fe fa36 	bl	8000d64 <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028fa:	e00a      	b.n	8002912 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028fc:	f7fe fa32 	bl	8000d64 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	f241 3288 	movw	r2, #5000	@ 0x1388
 800290a:	4293      	cmp	r3, r2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e0b5      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002912:	4b3e      	ldr	r3, [pc, #248]	@ (8002a0c <HAL_RCC_OscConfig+0x470>)
 8002914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1ee      	bne.n	80028fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800291e:	7dfb      	ldrb	r3, [r7, #23]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d105      	bne.n	8002930 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002924:	4b39      	ldr	r3, [pc, #228]	@ (8002a0c <HAL_RCC_OscConfig+0x470>)
 8002926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002928:	4a38      	ldr	r2, [pc, #224]	@ (8002a0c <HAL_RCC_OscConfig+0x470>)
 800292a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800292e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	2b00      	cmp	r3, #0
 8002936:	f000 80a1 	beq.w	8002a7c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800293a:	4b34      	ldr	r3, [pc, #208]	@ (8002a0c <HAL_RCC_OscConfig+0x470>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 030c 	and.w	r3, r3, #12
 8002942:	2b08      	cmp	r3, #8
 8002944:	d05c      	beq.n	8002a00 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	2b02      	cmp	r3, #2
 800294c:	d141      	bne.n	80029d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800294e:	4b31      	ldr	r3, [pc, #196]	@ (8002a14 <HAL_RCC_OscConfig+0x478>)
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002954:	f7fe fa06 	bl	8000d64 <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800295c:	f7fe fa02 	bl	8000d64 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e087      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800296e:	4b27      	ldr	r3, [pc, #156]	@ (8002a0c <HAL_RCC_OscConfig+0x470>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1f0      	bne.n	800295c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	69da      	ldr	r2, [r3, #28]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	431a      	orrs	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002988:	019b      	lsls	r3, r3, #6
 800298a:	431a      	orrs	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002990:	085b      	lsrs	r3, r3, #1
 8002992:	3b01      	subs	r3, #1
 8002994:	041b      	lsls	r3, r3, #16
 8002996:	431a      	orrs	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800299c:	061b      	lsls	r3, r3, #24
 800299e:	491b      	ldr	r1, [pc, #108]	@ (8002a0c <HAL_RCC_OscConfig+0x470>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002a14 <HAL_RCC_OscConfig+0x478>)
 80029a6:	2201      	movs	r2, #1
 80029a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029aa:	f7fe f9db 	bl	8000d64 <HAL_GetTick>
 80029ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029b0:	e008      	b.n	80029c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b2:	f7fe f9d7 	bl	8000d64 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e05c      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029c4:	4b11      	ldr	r3, [pc, #68]	@ (8002a0c <HAL_RCC_OscConfig+0x470>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d0f0      	beq.n	80029b2 <HAL_RCC_OscConfig+0x416>
 80029d0:	e054      	b.n	8002a7c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029d2:	4b10      	ldr	r3, [pc, #64]	@ (8002a14 <HAL_RCC_OscConfig+0x478>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d8:	f7fe f9c4 	bl	8000d64 <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e0:	f7fe f9c0 	bl	8000d64 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e045      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029f2:	4b06      	ldr	r3, [pc, #24]	@ (8002a0c <HAL_RCC_OscConfig+0x470>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1f0      	bne.n	80029e0 <HAL_RCC_OscConfig+0x444>
 80029fe:	e03d      	b.n	8002a7c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d107      	bne.n	8002a18 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e038      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	40007000 	.word	0x40007000
 8002a14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a18:	4b1b      	ldr	r3, [pc, #108]	@ (8002a88 <HAL_RCC_OscConfig+0x4ec>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d028      	beq.n	8002a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d121      	bne.n	8002a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d11a      	bne.n	8002a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a48:	4013      	ands	r3, r2
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d111      	bne.n	8002a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a5e:	085b      	lsrs	r3, r3, #1
 8002a60:	3b01      	subs	r3, #1
 8002a62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d107      	bne.n	8002a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d001      	beq.n	8002a7c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e000      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3718      	adds	r7, #24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40023800 	.word	0x40023800

08002a8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d101      	bne.n	8002aa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e0cc      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002aa0:	4b68      	ldr	r3, [pc, #416]	@ (8002c44 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d90c      	bls.n	8002ac8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aae:	4b65      	ldr	r3, [pc, #404]	@ (8002c44 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ab6:	4b63      	ldr	r3, [pc, #396]	@ (8002c44 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d001      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e0b8      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d020      	beq.n	8002b16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d005      	beq.n	8002aec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ae0:	4b59      	ldr	r3, [pc, #356]	@ (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	4a58      	ldr	r2, [pc, #352]	@ (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002aea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0308 	and.w	r3, r3, #8
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d005      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002af8:	4b53      	ldr	r3, [pc, #332]	@ (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	4a52      	ldr	r2, [pc, #328]	@ (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002afe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b04:	4b50      	ldr	r3, [pc, #320]	@ (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	494d      	ldr	r1, [pc, #308]	@ (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d044      	beq.n	8002bac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d107      	bne.n	8002b3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b2a:	4b47      	ldr	r3, [pc, #284]	@ (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d119      	bne.n	8002b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e07f      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d003      	beq.n	8002b4a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b46:	2b03      	cmp	r3, #3
 8002b48:	d107      	bne.n	8002b5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b4a:	4b3f      	ldr	r3, [pc, #252]	@ (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d109      	bne.n	8002b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e06f      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b5a:	4b3b      	ldr	r3, [pc, #236]	@ (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e067      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b6a:	4b37      	ldr	r3, [pc, #220]	@ (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f023 0203 	bic.w	r2, r3, #3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	4934      	ldr	r1, [pc, #208]	@ (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b7c:	f7fe f8f2 	bl	8000d64 <HAL_GetTick>
 8002b80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b82:	e00a      	b.n	8002b9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b84:	f7fe f8ee 	bl	8000d64 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e04f      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b9a:	4b2b      	ldr	r3, [pc, #172]	@ (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f003 020c 	and.w	r2, r3, #12
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d1eb      	bne.n	8002b84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bac:	4b25      	ldr	r3, [pc, #148]	@ (8002c44 <HAL_RCC_ClockConfig+0x1b8>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d20c      	bcs.n	8002bd4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bba:	4b22      	ldr	r3, [pc, #136]	@ (8002c44 <HAL_RCC_ClockConfig+0x1b8>)
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc2:	4b20      	ldr	r3, [pc, #128]	@ (8002c44 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0307 	and.w	r3, r3, #7
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d001      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e032      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d008      	beq.n	8002bf2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002be0:	4b19      	ldr	r3, [pc, #100]	@ (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	4916      	ldr	r1, [pc, #88]	@ (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0308 	and.w	r3, r3, #8
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d009      	beq.n	8002c12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bfe:	4b12      	ldr	r3, [pc, #72]	@ (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	490e      	ldr	r1, [pc, #56]	@ (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c12:	f000 f821 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 8002c16:	4602      	mov	r2, r0
 8002c18:	4b0b      	ldr	r3, [pc, #44]	@ (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	091b      	lsrs	r3, r3, #4
 8002c1e:	f003 030f 	and.w	r3, r3, #15
 8002c22:	490a      	ldr	r1, [pc, #40]	@ (8002c4c <HAL_RCC_ClockConfig+0x1c0>)
 8002c24:	5ccb      	ldrb	r3, [r1, r3]
 8002c26:	fa22 f303 	lsr.w	r3, r2, r3
 8002c2a:	4a09      	ldr	r2, [pc, #36]	@ (8002c50 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002c2e:	4b09      	ldr	r3, [pc, #36]	@ (8002c54 <HAL_RCC_ClockConfig+0x1c8>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7fe f852 	bl	8000cdc <HAL_InitTick>

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40023c00 	.word	0x40023c00
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	080038ec 	.word	0x080038ec
 8002c50:	20000004 	.word	0x20000004
 8002c54:	20000008 	.word	0x20000008

08002c58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c5c:	b090      	sub	sp, #64	@ 0x40
 8002c5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002c64:	2300      	movs	r3, #0
 8002c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c70:	4b59      	ldr	r3, [pc, #356]	@ (8002dd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f003 030c 	and.w	r3, r3, #12
 8002c78:	2b08      	cmp	r3, #8
 8002c7a:	d00d      	beq.n	8002c98 <HAL_RCC_GetSysClockFreq+0x40>
 8002c7c:	2b08      	cmp	r3, #8
 8002c7e:	f200 80a1 	bhi.w	8002dc4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d002      	beq.n	8002c8c <HAL_RCC_GetSysClockFreq+0x34>
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	d003      	beq.n	8002c92 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c8a:	e09b      	b.n	8002dc4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c8c:	4b53      	ldr	r3, [pc, #332]	@ (8002ddc <HAL_RCC_GetSysClockFreq+0x184>)
 8002c8e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c90:	e09b      	b.n	8002dca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c92:	4b53      	ldr	r3, [pc, #332]	@ (8002de0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c94:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c96:	e098      	b.n	8002dca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c98:	4b4f      	ldr	r3, [pc, #316]	@ (8002dd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ca0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ca2:	4b4d      	ldr	r3, [pc, #308]	@ (8002dd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d028      	beq.n	8002d00 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cae:	4b4a      	ldr	r3, [pc, #296]	@ (8002dd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	099b      	lsrs	r3, r3, #6
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	623b      	str	r3, [r7, #32]
 8002cb8:	627a      	str	r2, [r7, #36]	@ 0x24
 8002cba:	6a3b      	ldr	r3, [r7, #32]
 8002cbc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	4b47      	ldr	r3, [pc, #284]	@ (8002de0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002cc4:	fb03 f201 	mul.w	r2, r3, r1
 8002cc8:	2300      	movs	r3, #0
 8002cca:	fb00 f303 	mul.w	r3, r0, r3
 8002cce:	4413      	add	r3, r2
 8002cd0:	4a43      	ldr	r2, [pc, #268]	@ (8002de0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002cd2:	fba0 1202 	umull	r1, r2, r0, r2
 8002cd6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002cd8:	460a      	mov	r2, r1
 8002cda:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002cdc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cde:	4413      	add	r3, r2
 8002ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ce2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	61bb      	str	r3, [r7, #24]
 8002ce8:	61fa      	str	r2, [r7, #28]
 8002cea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002cf2:	f7fd fa69 	bl	80001c8 <__aeabi_uldivmod>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002cfe:	e053      	b.n	8002da8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d00:	4b35      	ldr	r3, [pc, #212]	@ (8002dd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	099b      	lsrs	r3, r3, #6
 8002d06:	2200      	movs	r2, #0
 8002d08:	613b      	str	r3, [r7, #16]
 8002d0a:	617a      	str	r2, [r7, #20]
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002d12:	f04f 0b00 	mov.w	fp, #0
 8002d16:	4652      	mov	r2, sl
 8002d18:	465b      	mov	r3, fp
 8002d1a:	f04f 0000 	mov.w	r0, #0
 8002d1e:	f04f 0100 	mov.w	r1, #0
 8002d22:	0159      	lsls	r1, r3, #5
 8002d24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d28:	0150      	lsls	r0, r2, #5
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	ebb2 080a 	subs.w	r8, r2, sl
 8002d32:	eb63 090b 	sbc.w	r9, r3, fp
 8002d36:	f04f 0200 	mov.w	r2, #0
 8002d3a:	f04f 0300 	mov.w	r3, #0
 8002d3e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002d42:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d46:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d4a:	ebb2 0408 	subs.w	r4, r2, r8
 8002d4e:	eb63 0509 	sbc.w	r5, r3, r9
 8002d52:	f04f 0200 	mov.w	r2, #0
 8002d56:	f04f 0300 	mov.w	r3, #0
 8002d5a:	00eb      	lsls	r3, r5, #3
 8002d5c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d60:	00e2      	lsls	r2, r4, #3
 8002d62:	4614      	mov	r4, r2
 8002d64:	461d      	mov	r5, r3
 8002d66:	eb14 030a 	adds.w	r3, r4, sl
 8002d6a:	603b      	str	r3, [r7, #0]
 8002d6c:	eb45 030b 	adc.w	r3, r5, fp
 8002d70:	607b      	str	r3, [r7, #4]
 8002d72:	f04f 0200 	mov.w	r2, #0
 8002d76:	f04f 0300 	mov.w	r3, #0
 8002d7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d7e:	4629      	mov	r1, r5
 8002d80:	028b      	lsls	r3, r1, #10
 8002d82:	4621      	mov	r1, r4
 8002d84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d88:	4621      	mov	r1, r4
 8002d8a:	028a      	lsls	r2, r1, #10
 8002d8c:	4610      	mov	r0, r2
 8002d8e:	4619      	mov	r1, r3
 8002d90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d92:	2200      	movs	r2, #0
 8002d94:	60bb      	str	r3, [r7, #8]
 8002d96:	60fa      	str	r2, [r7, #12]
 8002d98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d9c:	f7fd fa14 	bl	80001c8 <__aeabi_uldivmod>
 8002da0:	4602      	mov	r2, r0
 8002da2:	460b      	mov	r3, r1
 8002da4:	4613      	mov	r3, r2
 8002da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002da8:	4b0b      	ldr	r3, [pc, #44]	@ (8002dd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	0c1b      	lsrs	r3, r3, #16
 8002dae:	f003 0303 	and.w	r3, r3, #3
 8002db2:	3301      	adds	r3, #1
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002db8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002dc2:	e002      	b.n	8002dca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002dc4:	4b05      	ldr	r3, [pc, #20]	@ (8002ddc <HAL_RCC_GetSysClockFreq+0x184>)
 8002dc6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002dc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3740      	adds	r7, #64	@ 0x40
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	00f42400 	.word	0x00f42400
 8002de0:	017d7840 	.word	0x017d7840

08002de4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002de8:	4b03      	ldr	r3, [pc, #12]	@ (8002df8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dea:	681b      	ldr	r3, [r3, #0]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	20000004 	.word	0x20000004

08002dfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e00:	f7ff fff0 	bl	8002de4 <HAL_RCC_GetHCLKFreq>
 8002e04:	4602      	mov	r2, r0
 8002e06:	4b05      	ldr	r3, [pc, #20]	@ (8002e1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	0a9b      	lsrs	r3, r3, #10
 8002e0c:	f003 0307 	and.w	r3, r3, #7
 8002e10:	4903      	ldr	r1, [pc, #12]	@ (8002e20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e12:	5ccb      	ldrb	r3, [r1, r3]
 8002e14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	080038fc 	.word	0x080038fc

08002e24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e28:	f7ff ffdc 	bl	8002de4 <HAL_RCC_GetHCLKFreq>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	4b05      	ldr	r3, [pc, #20]	@ (8002e44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	0b5b      	lsrs	r3, r3, #13
 8002e34:	f003 0307 	and.w	r3, r3, #7
 8002e38:	4903      	ldr	r1, [pc, #12]	@ (8002e48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e3a:	5ccb      	ldrb	r3, [r1, r3]
 8002e3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40023800 	.word	0x40023800
 8002e48:	080038fc 	.word	0x080038fc

08002e4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e042      	b.n	8002ee4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d106      	bne.n	8002e78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7fd fe5c 	bl	8000b30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2224      	movs	r2, #36	@ 0x24
 8002e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68da      	ldr	r2, [r3, #12]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 f82b 	bl	8002eec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	691a      	ldr	r2, [r3, #16]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ea4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	695a      	ldr	r2, [r3, #20]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002eb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68da      	ldr	r2, [r3, #12]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ec4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002eec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ef0:	b0c0      	sub	sp, #256	@ 0x100
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f08:	68d9      	ldr	r1, [r3, #12]
 8002f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	ea40 0301 	orr.w	r3, r0, r1
 8002f14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f1a:	689a      	ldr	r2, [r3, #8]
 8002f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	431a      	orrs	r2, r3
 8002f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002f44:	f021 010c 	bic.w	r1, r1, #12
 8002f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002f52:	430b      	orrs	r3, r1
 8002f54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f66:	6999      	ldr	r1, [r3, #24]
 8002f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	ea40 0301 	orr.w	r3, r0, r1
 8002f72:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	4b8f      	ldr	r3, [pc, #572]	@ (80031b8 <UART_SetConfig+0x2cc>)
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d005      	beq.n	8002f8c <UART_SetConfig+0xa0>
 8002f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	4b8d      	ldr	r3, [pc, #564]	@ (80031bc <UART_SetConfig+0x2d0>)
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d104      	bne.n	8002f96 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f8c:	f7ff ff4a 	bl	8002e24 <HAL_RCC_GetPCLK2Freq>
 8002f90:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002f94:	e003      	b.n	8002f9e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f96:	f7ff ff31 	bl	8002dfc <HAL_RCC_GetPCLK1Freq>
 8002f9a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fa2:	69db      	ldr	r3, [r3, #28]
 8002fa4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fa8:	f040 810c 	bne.w	80031c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002fb6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002fba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002fbe:	4622      	mov	r2, r4
 8002fc0:	462b      	mov	r3, r5
 8002fc2:	1891      	adds	r1, r2, r2
 8002fc4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002fc6:	415b      	adcs	r3, r3
 8002fc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002fca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002fce:	4621      	mov	r1, r4
 8002fd0:	eb12 0801 	adds.w	r8, r2, r1
 8002fd4:	4629      	mov	r1, r5
 8002fd6:	eb43 0901 	adc.w	r9, r3, r1
 8002fda:	f04f 0200 	mov.w	r2, #0
 8002fde:	f04f 0300 	mov.w	r3, #0
 8002fe2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fe6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fee:	4690      	mov	r8, r2
 8002ff0:	4699      	mov	r9, r3
 8002ff2:	4623      	mov	r3, r4
 8002ff4:	eb18 0303 	adds.w	r3, r8, r3
 8002ff8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002ffc:	462b      	mov	r3, r5
 8002ffe:	eb49 0303 	adc.w	r3, r9, r3
 8003002:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003012:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003016:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800301a:	460b      	mov	r3, r1
 800301c:	18db      	adds	r3, r3, r3
 800301e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003020:	4613      	mov	r3, r2
 8003022:	eb42 0303 	adc.w	r3, r2, r3
 8003026:	657b      	str	r3, [r7, #84]	@ 0x54
 8003028:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800302c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003030:	f7fd f8ca 	bl	80001c8 <__aeabi_uldivmod>
 8003034:	4602      	mov	r2, r0
 8003036:	460b      	mov	r3, r1
 8003038:	4b61      	ldr	r3, [pc, #388]	@ (80031c0 <UART_SetConfig+0x2d4>)
 800303a:	fba3 2302 	umull	r2, r3, r3, r2
 800303e:	095b      	lsrs	r3, r3, #5
 8003040:	011c      	lsls	r4, r3, #4
 8003042:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003046:	2200      	movs	r2, #0
 8003048:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800304c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003050:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003054:	4642      	mov	r2, r8
 8003056:	464b      	mov	r3, r9
 8003058:	1891      	adds	r1, r2, r2
 800305a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800305c:	415b      	adcs	r3, r3
 800305e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003060:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003064:	4641      	mov	r1, r8
 8003066:	eb12 0a01 	adds.w	sl, r2, r1
 800306a:	4649      	mov	r1, r9
 800306c:	eb43 0b01 	adc.w	fp, r3, r1
 8003070:	f04f 0200 	mov.w	r2, #0
 8003074:	f04f 0300 	mov.w	r3, #0
 8003078:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800307c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003080:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003084:	4692      	mov	sl, r2
 8003086:	469b      	mov	fp, r3
 8003088:	4643      	mov	r3, r8
 800308a:	eb1a 0303 	adds.w	r3, sl, r3
 800308e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003092:	464b      	mov	r3, r9
 8003094:	eb4b 0303 	adc.w	r3, fp, r3
 8003098:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800309c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80030a8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80030ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80030b0:	460b      	mov	r3, r1
 80030b2:	18db      	adds	r3, r3, r3
 80030b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80030b6:	4613      	mov	r3, r2
 80030b8:	eb42 0303 	adc.w	r3, r2, r3
 80030bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80030be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80030c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80030c6:	f7fd f87f 	bl	80001c8 <__aeabi_uldivmod>
 80030ca:	4602      	mov	r2, r0
 80030cc:	460b      	mov	r3, r1
 80030ce:	4611      	mov	r1, r2
 80030d0:	4b3b      	ldr	r3, [pc, #236]	@ (80031c0 <UART_SetConfig+0x2d4>)
 80030d2:	fba3 2301 	umull	r2, r3, r3, r1
 80030d6:	095b      	lsrs	r3, r3, #5
 80030d8:	2264      	movs	r2, #100	@ 0x64
 80030da:	fb02 f303 	mul.w	r3, r2, r3
 80030de:	1acb      	subs	r3, r1, r3
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80030e6:	4b36      	ldr	r3, [pc, #216]	@ (80031c0 <UART_SetConfig+0x2d4>)
 80030e8:	fba3 2302 	umull	r2, r3, r3, r2
 80030ec:	095b      	lsrs	r3, r3, #5
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80030f4:	441c      	add	r4, r3
 80030f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030fa:	2200      	movs	r2, #0
 80030fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003100:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003104:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003108:	4642      	mov	r2, r8
 800310a:	464b      	mov	r3, r9
 800310c:	1891      	adds	r1, r2, r2
 800310e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003110:	415b      	adcs	r3, r3
 8003112:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003114:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003118:	4641      	mov	r1, r8
 800311a:	1851      	adds	r1, r2, r1
 800311c:	6339      	str	r1, [r7, #48]	@ 0x30
 800311e:	4649      	mov	r1, r9
 8003120:	414b      	adcs	r3, r1
 8003122:	637b      	str	r3, [r7, #52]	@ 0x34
 8003124:	f04f 0200 	mov.w	r2, #0
 8003128:	f04f 0300 	mov.w	r3, #0
 800312c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003130:	4659      	mov	r1, fp
 8003132:	00cb      	lsls	r3, r1, #3
 8003134:	4651      	mov	r1, sl
 8003136:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800313a:	4651      	mov	r1, sl
 800313c:	00ca      	lsls	r2, r1, #3
 800313e:	4610      	mov	r0, r2
 8003140:	4619      	mov	r1, r3
 8003142:	4603      	mov	r3, r0
 8003144:	4642      	mov	r2, r8
 8003146:	189b      	adds	r3, r3, r2
 8003148:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800314c:	464b      	mov	r3, r9
 800314e:	460a      	mov	r2, r1
 8003150:	eb42 0303 	adc.w	r3, r2, r3
 8003154:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003164:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003168:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800316c:	460b      	mov	r3, r1
 800316e:	18db      	adds	r3, r3, r3
 8003170:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003172:	4613      	mov	r3, r2
 8003174:	eb42 0303 	adc.w	r3, r2, r3
 8003178:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800317a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800317e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003182:	f7fd f821 	bl	80001c8 <__aeabi_uldivmod>
 8003186:	4602      	mov	r2, r0
 8003188:	460b      	mov	r3, r1
 800318a:	4b0d      	ldr	r3, [pc, #52]	@ (80031c0 <UART_SetConfig+0x2d4>)
 800318c:	fba3 1302 	umull	r1, r3, r3, r2
 8003190:	095b      	lsrs	r3, r3, #5
 8003192:	2164      	movs	r1, #100	@ 0x64
 8003194:	fb01 f303 	mul.w	r3, r1, r3
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	3332      	adds	r3, #50	@ 0x32
 800319e:	4a08      	ldr	r2, [pc, #32]	@ (80031c0 <UART_SetConfig+0x2d4>)
 80031a0:	fba2 2303 	umull	r2, r3, r2, r3
 80031a4:	095b      	lsrs	r3, r3, #5
 80031a6:	f003 0207 	and.w	r2, r3, #7
 80031aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4422      	add	r2, r4
 80031b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80031b4:	e106      	b.n	80033c4 <UART_SetConfig+0x4d8>
 80031b6:	bf00      	nop
 80031b8:	40011000 	.word	0x40011000
 80031bc:	40011400 	.word	0x40011400
 80031c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031c8:	2200      	movs	r2, #0
 80031ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80031ce:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80031d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80031d6:	4642      	mov	r2, r8
 80031d8:	464b      	mov	r3, r9
 80031da:	1891      	adds	r1, r2, r2
 80031dc:	6239      	str	r1, [r7, #32]
 80031de:	415b      	adcs	r3, r3
 80031e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80031e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031e6:	4641      	mov	r1, r8
 80031e8:	1854      	adds	r4, r2, r1
 80031ea:	4649      	mov	r1, r9
 80031ec:	eb43 0501 	adc.w	r5, r3, r1
 80031f0:	f04f 0200 	mov.w	r2, #0
 80031f4:	f04f 0300 	mov.w	r3, #0
 80031f8:	00eb      	lsls	r3, r5, #3
 80031fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031fe:	00e2      	lsls	r2, r4, #3
 8003200:	4614      	mov	r4, r2
 8003202:	461d      	mov	r5, r3
 8003204:	4643      	mov	r3, r8
 8003206:	18e3      	adds	r3, r4, r3
 8003208:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800320c:	464b      	mov	r3, r9
 800320e:	eb45 0303 	adc.w	r3, r5, r3
 8003212:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003222:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003226:	f04f 0200 	mov.w	r2, #0
 800322a:	f04f 0300 	mov.w	r3, #0
 800322e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003232:	4629      	mov	r1, r5
 8003234:	008b      	lsls	r3, r1, #2
 8003236:	4621      	mov	r1, r4
 8003238:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800323c:	4621      	mov	r1, r4
 800323e:	008a      	lsls	r2, r1, #2
 8003240:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003244:	f7fc ffc0 	bl	80001c8 <__aeabi_uldivmod>
 8003248:	4602      	mov	r2, r0
 800324a:	460b      	mov	r3, r1
 800324c:	4b60      	ldr	r3, [pc, #384]	@ (80033d0 <UART_SetConfig+0x4e4>)
 800324e:	fba3 2302 	umull	r2, r3, r3, r2
 8003252:	095b      	lsrs	r3, r3, #5
 8003254:	011c      	lsls	r4, r3, #4
 8003256:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800325a:	2200      	movs	r2, #0
 800325c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003260:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003264:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003268:	4642      	mov	r2, r8
 800326a:	464b      	mov	r3, r9
 800326c:	1891      	adds	r1, r2, r2
 800326e:	61b9      	str	r1, [r7, #24]
 8003270:	415b      	adcs	r3, r3
 8003272:	61fb      	str	r3, [r7, #28]
 8003274:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003278:	4641      	mov	r1, r8
 800327a:	1851      	adds	r1, r2, r1
 800327c:	6139      	str	r1, [r7, #16]
 800327e:	4649      	mov	r1, r9
 8003280:	414b      	adcs	r3, r1
 8003282:	617b      	str	r3, [r7, #20]
 8003284:	f04f 0200 	mov.w	r2, #0
 8003288:	f04f 0300 	mov.w	r3, #0
 800328c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003290:	4659      	mov	r1, fp
 8003292:	00cb      	lsls	r3, r1, #3
 8003294:	4651      	mov	r1, sl
 8003296:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800329a:	4651      	mov	r1, sl
 800329c:	00ca      	lsls	r2, r1, #3
 800329e:	4610      	mov	r0, r2
 80032a0:	4619      	mov	r1, r3
 80032a2:	4603      	mov	r3, r0
 80032a4:	4642      	mov	r2, r8
 80032a6:	189b      	adds	r3, r3, r2
 80032a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80032ac:	464b      	mov	r3, r9
 80032ae:	460a      	mov	r2, r1
 80032b0:	eb42 0303 	adc.w	r3, r2, r3
 80032b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80032b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80032c2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80032c4:	f04f 0200 	mov.w	r2, #0
 80032c8:	f04f 0300 	mov.w	r3, #0
 80032cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80032d0:	4649      	mov	r1, r9
 80032d2:	008b      	lsls	r3, r1, #2
 80032d4:	4641      	mov	r1, r8
 80032d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032da:	4641      	mov	r1, r8
 80032dc:	008a      	lsls	r2, r1, #2
 80032de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80032e2:	f7fc ff71 	bl	80001c8 <__aeabi_uldivmod>
 80032e6:	4602      	mov	r2, r0
 80032e8:	460b      	mov	r3, r1
 80032ea:	4611      	mov	r1, r2
 80032ec:	4b38      	ldr	r3, [pc, #224]	@ (80033d0 <UART_SetConfig+0x4e4>)
 80032ee:	fba3 2301 	umull	r2, r3, r3, r1
 80032f2:	095b      	lsrs	r3, r3, #5
 80032f4:	2264      	movs	r2, #100	@ 0x64
 80032f6:	fb02 f303 	mul.w	r3, r2, r3
 80032fa:	1acb      	subs	r3, r1, r3
 80032fc:	011b      	lsls	r3, r3, #4
 80032fe:	3332      	adds	r3, #50	@ 0x32
 8003300:	4a33      	ldr	r2, [pc, #204]	@ (80033d0 <UART_SetConfig+0x4e4>)
 8003302:	fba2 2303 	umull	r2, r3, r2, r3
 8003306:	095b      	lsrs	r3, r3, #5
 8003308:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800330c:	441c      	add	r4, r3
 800330e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003312:	2200      	movs	r2, #0
 8003314:	673b      	str	r3, [r7, #112]	@ 0x70
 8003316:	677a      	str	r2, [r7, #116]	@ 0x74
 8003318:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800331c:	4642      	mov	r2, r8
 800331e:	464b      	mov	r3, r9
 8003320:	1891      	adds	r1, r2, r2
 8003322:	60b9      	str	r1, [r7, #8]
 8003324:	415b      	adcs	r3, r3
 8003326:	60fb      	str	r3, [r7, #12]
 8003328:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800332c:	4641      	mov	r1, r8
 800332e:	1851      	adds	r1, r2, r1
 8003330:	6039      	str	r1, [r7, #0]
 8003332:	4649      	mov	r1, r9
 8003334:	414b      	adcs	r3, r1
 8003336:	607b      	str	r3, [r7, #4]
 8003338:	f04f 0200 	mov.w	r2, #0
 800333c:	f04f 0300 	mov.w	r3, #0
 8003340:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003344:	4659      	mov	r1, fp
 8003346:	00cb      	lsls	r3, r1, #3
 8003348:	4651      	mov	r1, sl
 800334a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800334e:	4651      	mov	r1, sl
 8003350:	00ca      	lsls	r2, r1, #3
 8003352:	4610      	mov	r0, r2
 8003354:	4619      	mov	r1, r3
 8003356:	4603      	mov	r3, r0
 8003358:	4642      	mov	r2, r8
 800335a:	189b      	adds	r3, r3, r2
 800335c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800335e:	464b      	mov	r3, r9
 8003360:	460a      	mov	r2, r1
 8003362:	eb42 0303 	adc.w	r3, r2, r3
 8003366:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	663b      	str	r3, [r7, #96]	@ 0x60
 8003372:	667a      	str	r2, [r7, #100]	@ 0x64
 8003374:	f04f 0200 	mov.w	r2, #0
 8003378:	f04f 0300 	mov.w	r3, #0
 800337c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003380:	4649      	mov	r1, r9
 8003382:	008b      	lsls	r3, r1, #2
 8003384:	4641      	mov	r1, r8
 8003386:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800338a:	4641      	mov	r1, r8
 800338c:	008a      	lsls	r2, r1, #2
 800338e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003392:	f7fc ff19 	bl	80001c8 <__aeabi_uldivmod>
 8003396:	4602      	mov	r2, r0
 8003398:	460b      	mov	r3, r1
 800339a:	4b0d      	ldr	r3, [pc, #52]	@ (80033d0 <UART_SetConfig+0x4e4>)
 800339c:	fba3 1302 	umull	r1, r3, r3, r2
 80033a0:	095b      	lsrs	r3, r3, #5
 80033a2:	2164      	movs	r1, #100	@ 0x64
 80033a4:	fb01 f303 	mul.w	r3, r1, r3
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	011b      	lsls	r3, r3, #4
 80033ac:	3332      	adds	r3, #50	@ 0x32
 80033ae:	4a08      	ldr	r2, [pc, #32]	@ (80033d0 <UART_SetConfig+0x4e4>)
 80033b0:	fba2 2303 	umull	r2, r3, r2, r3
 80033b4:	095b      	lsrs	r3, r3, #5
 80033b6:	f003 020f 	and.w	r2, r3, #15
 80033ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4422      	add	r2, r4
 80033c2:	609a      	str	r2, [r3, #8]
}
 80033c4:	bf00      	nop
 80033c6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80033ca:	46bd      	mov	sp, r7
 80033cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033d0:	51eb851f 	.word	0x51eb851f

080033d4 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80033d8:	bf00      	nop
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
	...

080033e4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af04      	add	r7, sp, #16
 80033ea:	4603      	mov	r3, r0
 80033ec:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80033ee:	f04f 33ff 	mov.w	r3, #4294967295
 80033f2:	9302      	str	r3, [sp, #8]
 80033f4:	2301      	movs	r3, #1
 80033f6:	9301      	str	r3, [sp, #4]
 80033f8:	1dfb      	adds	r3, r7, #7
 80033fa:	9300      	str	r3, [sp, #0]
 80033fc:	2301      	movs	r3, #1
 80033fe:	2200      	movs	r2, #0
 8003400:	2178      	movs	r1, #120	@ 0x78
 8003402:	4803      	ldr	r0, [pc, #12]	@ (8003410 <ssd1306_WriteCommand+0x2c>)
 8003404:	f7fe f8bc 	bl	8001580 <HAL_I2C_Mem_Write>
}
 8003408:	bf00      	nop
 800340a:	3708      	adds	r7, #8
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	2000002c 	.word	0x2000002c

08003414 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af04      	add	r7, sp, #16
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	b29b      	uxth	r3, r3
 8003422:	f04f 32ff 	mov.w	r2, #4294967295
 8003426:	9202      	str	r2, [sp, #8]
 8003428:	9301      	str	r3, [sp, #4]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	9300      	str	r3, [sp, #0]
 800342e:	2301      	movs	r3, #1
 8003430:	2240      	movs	r2, #64	@ 0x40
 8003432:	2178      	movs	r1, #120	@ 0x78
 8003434:	4803      	ldr	r0, [pc, #12]	@ (8003444 <ssd1306_WriteData+0x30>)
 8003436:	f7fe f8a3 	bl	8001580 <HAL_I2C_Mem_Write>
}
 800343a:	bf00      	nop
 800343c:	3708      	adds	r7, #8
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	2000002c 	.word	0x2000002c

08003448 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800344c:	f7ff ffc2 	bl	80033d4 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8003450:	2064      	movs	r0, #100	@ 0x64
 8003452:	f7fd fc93 	bl	8000d7c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8003456:	2000      	movs	r0, #0
 8003458:	f000 f9d6 	bl	8003808 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800345c:	2020      	movs	r0, #32
 800345e:	f7ff ffc1 	bl	80033e4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8003462:	2000      	movs	r0, #0
 8003464:	f7ff ffbe 	bl	80033e4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003468:	20b0      	movs	r0, #176	@ 0xb0
 800346a:	f7ff ffbb 	bl	80033e4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800346e:	20c8      	movs	r0, #200	@ 0xc8
 8003470:	f7ff ffb8 	bl	80033e4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8003474:	2000      	movs	r0, #0
 8003476:	f7ff ffb5 	bl	80033e4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800347a:	2010      	movs	r0, #16
 800347c:	f7ff ffb2 	bl	80033e4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003480:	2040      	movs	r0, #64	@ 0x40
 8003482:	f7ff ffaf 	bl	80033e4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8003486:	20ff      	movs	r0, #255	@ 0xff
 8003488:	f000 f9aa 	bl	80037e0 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800348c:	20a1      	movs	r0, #161	@ 0xa1
 800348e:	f7ff ffa9 	bl	80033e4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8003492:	20a6      	movs	r0, #166	@ 0xa6
 8003494:	f7ff ffa6 	bl	80033e4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003498:	20a8      	movs	r0, #168	@ 0xa8
 800349a:	f7ff ffa3 	bl	80033e4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800349e:	203f      	movs	r0, #63	@ 0x3f
 80034a0:	f7ff ffa0 	bl	80033e4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80034a4:	20a4      	movs	r0, #164	@ 0xa4
 80034a6:	f7ff ff9d 	bl	80033e4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80034aa:	20d3      	movs	r0, #211	@ 0xd3
 80034ac:	f7ff ff9a 	bl	80033e4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80034b0:	2000      	movs	r0, #0
 80034b2:	f7ff ff97 	bl	80033e4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80034b6:	20d5      	movs	r0, #213	@ 0xd5
 80034b8:	f7ff ff94 	bl	80033e4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80034bc:	20f0      	movs	r0, #240	@ 0xf0
 80034be:	f7ff ff91 	bl	80033e4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80034c2:	20d9      	movs	r0, #217	@ 0xd9
 80034c4:	f7ff ff8e 	bl	80033e4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80034c8:	2022      	movs	r0, #34	@ 0x22
 80034ca:	f7ff ff8b 	bl	80033e4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80034ce:	20da      	movs	r0, #218	@ 0xda
 80034d0:	f7ff ff88 	bl	80033e4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80034d4:	2012      	movs	r0, #18
 80034d6:	f7ff ff85 	bl	80033e4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80034da:	20db      	movs	r0, #219	@ 0xdb
 80034dc:	f7ff ff82 	bl	80033e4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80034e0:	2020      	movs	r0, #32
 80034e2:	f7ff ff7f 	bl	80033e4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80034e6:	208d      	movs	r0, #141	@ 0x8d
 80034e8:	f7ff ff7c 	bl	80033e4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80034ec:	2014      	movs	r0, #20
 80034ee:	f7ff ff79 	bl	80033e4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80034f2:	2001      	movs	r0, #1
 80034f4:	f000 f988 	bl	8003808 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80034f8:	2000      	movs	r0, #0
 80034fa:	f000 f80f 	bl	800351c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80034fe:	f000 f825 	bl	800354c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8003502:	4b05      	ldr	r3, [pc, #20]	@ (8003518 <ssd1306_Init+0xd0>)
 8003504:	2200      	movs	r2, #0
 8003506:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003508:	4b03      	ldr	r3, [pc, #12]	@ (8003518 <ssd1306_Init+0xd0>)
 800350a:	2200      	movs	r2, #0
 800350c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800350e:	4b02      	ldr	r3, [pc, #8]	@ (8003518 <ssd1306_Init+0xd0>)
 8003510:	2201      	movs	r2, #1
 8003512:	711a      	strb	r2, [r3, #4]
}
 8003514:	bf00      	nop
 8003516:	bd80      	pop	{r7, pc}
 8003518:	200004dc 	.word	0x200004dc

0800351c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	4603      	mov	r3, r0
 8003524:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8003526:	79fb      	ldrb	r3, [r7, #7]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d101      	bne.n	8003530 <ssd1306_Fill+0x14>
 800352c:	2300      	movs	r3, #0
 800352e:	e000      	b.n	8003532 <ssd1306_Fill+0x16>
 8003530:	23ff      	movs	r3, #255	@ 0xff
 8003532:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003536:	4619      	mov	r1, r3
 8003538:	4803      	ldr	r0, [pc, #12]	@ (8003548 <ssd1306_Fill+0x2c>)
 800353a:	f000 f983 	bl	8003844 <memset>
}
 800353e:	bf00      	nop
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	200000dc 	.word	0x200000dc

0800354c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003552:	2300      	movs	r3, #0
 8003554:	71fb      	strb	r3, [r7, #7]
 8003556:	e016      	b.n	8003586 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8003558:	79fb      	ldrb	r3, [r7, #7]
 800355a:	3b50      	subs	r3, #80	@ 0x50
 800355c:	b2db      	uxtb	r3, r3
 800355e:	4618      	mov	r0, r3
 8003560:	f7ff ff40 	bl	80033e4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8003564:	2000      	movs	r0, #0
 8003566:	f7ff ff3d 	bl	80033e4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800356a:	2010      	movs	r0, #16
 800356c:	f7ff ff3a 	bl	80033e4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8003570:	79fb      	ldrb	r3, [r7, #7]
 8003572:	01db      	lsls	r3, r3, #7
 8003574:	4a08      	ldr	r2, [pc, #32]	@ (8003598 <ssd1306_UpdateScreen+0x4c>)
 8003576:	4413      	add	r3, r2
 8003578:	2180      	movs	r1, #128	@ 0x80
 800357a:	4618      	mov	r0, r3
 800357c:	f7ff ff4a 	bl	8003414 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003580:	79fb      	ldrb	r3, [r7, #7]
 8003582:	3301      	adds	r3, #1
 8003584:	71fb      	strb	r3, [r7, #7]
 8003586:	79fb      	ldrb	r3, [r7, #7]
 8003588:	2b07      	cmp	r3, #7
 800358a:	d9e5      	bls.n	8003558 <ssd1306_UpdateScreen+0xc>
    }
}
 800358c:	bf00      	nop
 800358e:	bf00      	nop
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	200000dc 	.word	0x200000dc

0800359c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	4603      	mov	r3, r0
 80035a4:	71fb      	strb	r3, [r7, #7]
 80035a6:	460b      	mov	r3, r1
 80035a8:	71bb      	strb	r3, [r7, #6]
 80035aa:	4613      	mov	r3, r2
 80035ac:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80035ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	db3d      	blt.n	8003632 <ssd1306_DrawPixel+0x96>
 80035b6:	79bb      	ldrb	r3, [r7, #6]
 80035b8:	2b3f      	cmp	r3, #63	@ 0x3f
 80035ba:	d83a      	bhi.n	8003632 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80035bc:	797b      	ldrb	r3, [r7, #5]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d11a      	bne.n	80035f8 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80035c2:	79fa      	ldrb	r2, [r7, #7]
 80035c4:	79bb      	ldrb	r3, [r7, #6]
 80035c6:	08db      	lsrs	r3, r3, #3
 80035c8:	b2d8      	uxtb	r0, r3
 80035ca:	4603      	mov	r3, r0
 80035cc:	01db      	lsls	r3, r3, #7
 80035ce:	4413      	add	r3, r2
 80035d0:	4a1b      	ldr	r2, [pc, #108]	@ (8003640 <ssd1306_DrawPixel+0xa4>)
 80035d2:	5cd3      	ldrb	r3, [r2, r3]
 80035d4:	b25a      	sxtb	r2, r3
 80035d6:	79bb      	ldrb	r3, [r7, #6]
 80035d8:	f003 0307 	and.w	r3, r3, #7
 80035dc:	2101      	movs	r1, #1
 80035de:	fa01 f303 	lsl.w	r3, r1, r3
 80035e2:	b25b      	sxtb	r3, r3
 80035e4:	4313      	orrs	r3, r2
 80035e6:	b259      	sxtb	r1, r3
 80035e8:	79fa      	ldrb	r2, [r7, #7]
 80035ea:	4603      	mov	r3, r0
 80035ec:	01db      	lsls	r3, r3, #7
 80035ee:	4413      	add	r3, r2
 80035f0:	b2c9      	uxtb	r1, r1
 80035f2:	4a13      	ldr	r2, [pc, #76]	@ (8003640 <ssd1306_DrawPixel+0xa4>)
 80035f4:	54d1      	strb	r1, [r2, r3]
 80035f6:	e01d      	b.n	8003634 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80035f8:	79fa      	ldrb	r2, [r7, #7]
 80035fa:	79bb      	ldrb	r3, [r7, #6]
 80035fc:	08db      	lsrs	r3, r3, #3
 80035fe:	b2d8      	uxtb	r0, r3
 8003600:	4603      	mov	r3, r0
 8003602:	01db      	lsls	r3, r3, #7
 8003604:	4413      	add	r3, r2
 8003606:	4a0e      	ldr	r2, [pc, #56]	@ (8003640 <ssd1306_DrawPixel+0xa4>)
 8003608:	5cd3      	ldrb	r3, [r2, r3]
 800360a:	b25a      	sxtb	r2, r3
 800360c:	79bb      	ldrb	r3, [r7, #6]
 800360e:	f003 0307 	and.w	r3, r3, #7
 8003612:	2101      	movs	r1, #1
 8003614:	fa01 f303 	lsl.w	r3, r1, r3
 8003618:	b25b      	sxtb	r3, r3
 800361a:	43db      	mvns	r3, r3
 800361c:	b25b      	sxtb	r3, r3
 800361e:	4013      	ands	r3, r2
 8003620:	b259      	sxtb	r1, r3
 8003622:	79fa      	ldrb	r2, [r7, #7]
 8003624:	4603      	mov	r3, r0
 8003626:	01db      	lsls	r3, r3, #7
 8003628:	4413      	add	r3, r2
 800362a:	b2c9      	uxtb	r1, r1
 800362c:	4a04      	ldr	r2, [pc, #16]	@ (8003640 <ssd1306_DrawPixel+0xa4>)
 800362e:	54d1      	strb	r1, [r2, r3]
 8003630:	e000      	b.n	8003634 <ssd1306_DrawPixel+0x98>
        return;
 8003632:	bf00      	nop
    }
}
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	200000dc 	.word	0x200000dc

08003644 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8003644:	b590      	push	{r4, r7, lr}
 8003646:	b089      	sub	sp, #36	@ 0x24
 8003648:	af00      	add	r7, sp, #0
 800364a:	4604      	mov	r4, r0
 800364c:	4638      	mov	r0, r7
 800364e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8003652:	4623      	mov	r3, r4
 8003654:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8003656:	7bfb      	ldrb	r3, [r7, #15]
 8003658:	2b1f      	cmp	r3, #31
 800365a:	d902      	bls.n	8003662 <ssd1306_WriteChar+0x1e>
 800365c:	7bfb      	ldrb	r3, [r7, #15]
 800365e:	2b7e      	cmp	r3, #126	@ 0x7e
 8003660:	d901      	bls.n	8003666 <ssd1306_WriteChar+0x22>
        return 0;
 8003662:	2300      	movs	r3, #0
 8003664:	e077      	b.n	8003756 <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8003666:	4b3e      	ldr	r3, [pc, #248]	@ (8003760 <ssd1306_WriteChar+0x11c>)
 8003668:	881b      	ldrh	r3, [r3, #0]
 800366a:	461a      	mov	r2, r3
 800366c:	783b      	ldrb	r3, [r7, #0]
 800366e:	4413      	add	r3, r2
 8003670:	2b80      	cmp	r3, #128	@ 0x80
 8003672:	dc06      	bgt.n	8003682 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8003674:	4b3a      	ldr	r3, [pc, #232]	@ (8003760 <ssd1306_WriteChar+0x11c>)
 8003676:	885b      	ldrh	r3, [r3, #2]
 8003678:	461a      	mov	r2, r3
 800367a:	787b      	ldrb	r3, [r7, #1]
 800367c:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800367e:	2b40      	cmp	r3, #64	@ 0x40
 8003680:	dd01      	ble.n	8003686 <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8003682:	2300      	movs	r3, #0
 8003684:	e067      	b.n	8003756 <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8003686:	2300      	movs	r3, #0
 8003688:	61fb      	str	r3, [r7, #28]
 800368a:	e04e      	b.n	800372a <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	7bfb      	ldrb	r3, [r7, #15]
 8003690:	3b20      	subs	r3, #32
 8003692:	7879      	ldrb	r1, [r7, #1]
 8003694:	fb01 f303 	mul.w	r3, r1, r3
 8003698:	4619      	mov	r1, r3
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	440b      	add	r3, r1
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	4413      	add	r3, r2
 80036a2:	881b      	ldrh	r3, [r3, #0]
 80036a4:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 80036a6:	2300      	movs	r3, #0
 80036a8:	61bb      	str	r3, [r7, #24]
 80036aa:	e036      	b.n	800371a <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	fa02 f303 	lsl.w	r3, r2, r3
 80036b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d013      	beq.n	80036e4 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80036bc:	4b28      	ldr	r3, [pc, #160]	@ (8003760 <ssd1306_WriteChar+0x11c>)
 80036be:	881b      	ldrh	r3, [r3, #0]
 80036c0:	b2da      	uxtb	r2, r3
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	4413      	add	r3, r2
 80036c8:	b2d8      	uxtb	r0, r3
 80036ca:	4b25      	ldr	r3, [pc, #148]	@ (8003760 <ssd1306_WriteChar+0x11c>)
 80036cc:	885b      	ldrh	r3, [r3, #2]
 80036ce:	b2da      	uxtb	r2, r3
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	4413      	add	r3, r2
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80036dc:	4619      	mov	r1, r3
 80036de:	f7ff ff5d 	bl	800359c <ssd1306_DrawPixel>
 80036e2:	e017      	b.n	8003714 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80036e4:	4b1e      	ldr	r3, [pc, #120]	@ (8003760 <ssd1306_WriteChar+0x11c>)
 80036e6:	881b      	ldrh	r3, [r3, #0]
 80036e8:	b2da      	uxtb	r2, r3
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	4413      	add	r3, r2
 80036f0:	b2d8      	uxtb	r0, r3
 80036f2:	4b1b      	ldr	r3, [pc, #108]	@ (8003760 <ssd1306_WriteChar+0x11c>)
 80036f4:	885b      	ldrh	r3, [r3, #2]
 80036f6:	b2da      	uxtb	r2, r3
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	4413      	add	r3, r2
 80036fe:	b2d9      	uxtb	r1, r3
 8003700:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003704:	2b00      	cmp	r3, #0
 8003706:	bf0c      	ite	eq
 8003708:	2301      	moveq	r3, #1
 800370a:	2300      	movne	r3, #0
 800370c:	b2db      	uxtb	r3, r3
 800370e:	461a      	mov	r2, r3
 8003710:	f7ff ff44 	bl	800359c <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	3301      	adds	r3, #1
 8003718:	61bb      	str	r3, [r7, #24]
 800371a:	783b      	ldrb	r3, [r7, #0]
 800371c:	461a      	mov	r2, r3
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	4293      	cmp	r3, r2
 8003722:	d3c3      	bcc.n	80036ac <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	3301      	adds	r3, #1
 8003728:	61fb      	str	r3, [r7, #28]
 800372a:	787b      	ldrb	r3, [r7, #1]
 800372c:	461a      	mov	r2, r3
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	4293      	cmp	r3, r2
 8003732:	d3ab      	bcc.n	800368c <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8003734:	4b0a      	ldr	r3, [pc, #40]	@ (8003760 <ssd1306_WriteChar+0x11c>)
 8003736:	881b      	ldrh	r3, [r3, #0]
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	2a00      	cmp	r2, #0
 800373c:	d005      	beq.n	800374a <ssd1306_WriteChar+0x106>
 800373e:	68b9      	ldr	r1, [r7, #8]
 8003740:	7bfa      	ldrb	r2, [r7, #15]
 8003742:	3a20      	subs	r2, #32
 8003744:	440a      	add	r2, r1
 8003746:	7812      	ldrb	r2, [r2, #0]
 8003748:	e000      	b.n	800374c <ssd1306_WriteChar+0x108>
 800374a:	783a      	ldrb	r2, [r7, #0]
 800374c:	4413      	add	r3, r2
 800374e:	b29a      	uxth	r2, r3
 8003750:	4b03      	ldr	r3, [pc, #12]	@ (8003760 <ssd1306_WriteChar+0x11c>)
 8003752:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8003754:	7bfb      	ldrb	r3, [r7, #15]
}
 8003756:	4618      	mov	r0, r3
 8003758:	3724      	adds	r7, #36	@ 0x24
 800375a:	46bd      	mov	sp, r7
 800375c:	bd90      	pop	{r4, r7, pc}
 800375e:	bf00      	nop
 8003760:	200004dc 	.word	0x200004dc

08003764 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af02      	add	r7, sp, #8
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	4638      	mov	r0, r7
 800376e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8003772:	e013      	b.n	800379c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	7818      	ldrb	r0, [r3, #0]
 8003778:	7e3b      	ldrb	r3, [r7, #24]
 800377a:	9300      	str	r3, [sp, #0]
 800377c:	463b      	mov	r3, r7
 800377e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003780:	f7ff ff60 	bl	8003644 <ssd1306_WriteChar>
 8003784:	4603      	mov	r3, r0
 8003786:	461a      	mov	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	429a      	cmp	r2, r3
 800378e:	d002      	beq.n	8003796 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	e008      	b.n	80037a8 <ssd1306_WriteString+0x44>
        }
        str++;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	3301      	adds	r3, #1
 800379a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1e7      	bne.n	8003774 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	781b      	ldrb	r3, [r3, #0]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3710      	adds	r7, #16
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	4603      	mov	r3, r0
 80037b8:	460a      	mov	r2, r1
 80037ba:	71fb      	strb	r3, [r7, #7]
 80037bc:	4613      	mov	r3, r2
 80037be:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80037c0:	79fb      	ldrb	r3, [r7, #7]
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	4b05      	ldr	r3, [pc, #20]	@ (80037dc <ssd1306_SetCursor+0x2c>)
 80037c6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80037c8:	79bb      	ldrb	r3, [r7, #6]
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	4b03      	ldr	r3, [pc, #12]	@ (80037dc <ssd1306_SetCursor+0x2c>)
 80037ce:	805a      	strh	r2, [r3, #2]
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	200004dc 	.word	0x200004dc

080037e0 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	4603      	mov	r3, r0
 80037e8:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80037ea:	2381      	movs	r3, #129	@ 0x81
 80037ec:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80037ee:	7bfb      	ldrb	r3, [r7, #15]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7ff fdf7 	bl	80033e4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80037f6:	79fb      	ldrb	r3, [r7, #7]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7ff fdf3 	bl	80033e4 <ssd1306_WriteCommand>
}
 80037fe:	bf00      	nop
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
	...

08003808 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	4603      	mov	r3, r0
 8003810:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8003812:	79fb      	ldrb	r3, [r7, #7]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d005      	beq.n	8003824 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8003818:	23af      	movs	r3, #175	@ 0xaf
 800381a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800381c:	4b08      	ldr	r3, [pc, #32]	@ (8003840 <ssd1306_SetDisplayOn+0x38>)
 800381e:	2201      	movs	r2, #1
 8003820:	715a      	strb	r2, [r3, #5]
 8003822:	e004      	b.n	800382e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8003824:	23ae      	movs	r3, #174	@ 0xae
 8003826:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8003828:	4b05      	ldr	r3, [pc, #20]	@ (8003840 <ssd1306_SetDisplayOn+0x38>)
 800382a:	2200      	movs	r2, #0
 800382c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800382e:	7bfb      	ldrb	r3, [r7, #15]
 8003830:	4618      	mov	r0, r3
 8003832:	f7ff fdd7 	bl	80033e4 <ssd1306_WriteCommand>
}
 8003836:	bf00      	nop
 8003838:	3710      	adds	r7, #16
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	200004dc 	.word	0x200004dc

08003844 <memset>:
 8003844:	4402      	add	r2, r0
 8003846:	4603      	mov	r3, r0
 8003848:	4293      	cmp	r3, r2
 800384a:	d100      	bne.n	800384e <memset+0xa>
 800384c:	4770      	bx	lr
 800384e:	f803 1b01 	strb.w	r1, [r3], #1
 8003852:	e7f9      	b.n	8003848 <memset+0x4>

08003854 <__libc_init_array>:
 8003854:	b570      	push	{r4, r5, r6, lr}
 8003856:	4d0d      	ldr	r5, [pc, #52]	@ (800388c <__libc_init_array+0x38>)
 8003858:	4c0d      	ldr	r4, [pc, #52]	@ (8003890 <__libc_init_array+0x3c>)
 800385a:	1b64      	subs	r4, r4, r5
 800385c:	10a4      	asrs	r4, r4, #2
 800385e:	2600      	movs	r6, #0
 8003860:	42a6      	cmp	r6, r4
 8003862:	d109      	bne.n	8003878 <__libc_init_array+0x24>
 8003864:	4d0b      	ldr	r5, [pc, #44]	@ (8003894 <__libc_init_array+0x40>)
 8003866:	4c0c      	ldr	r4, [pc, #48]	@ (8003898 <__libc_init_array+0x44>)
 8003868:	f000 f818 	bl	800389c <_init>
 800386c:	1b64      	subs	r4, r4, r5
 800386e:	10a4      	asrs	r4, r4, #2
 8003870:	2600      	movs	r6, #0
 8003872:	42a6      	cmp	r6, r4
 8003874:	d105      	bne.n	8003882 <__libc_init_array+0x2e>
 8003876:	bd70      	pop	{r4, r5, r6, pc}
 8003878:	f855 3b04 	ldr.w	r3, [r5], #4
 800387c:	4798      	blx	r3
 800387e:	3601      	adds	r6, #1
 8003880:	e7ee      	b.n	8003860 <__libc_init_array+0xc>
 8003882:	f855 3b04 	ldr.w	r3, [r5], #4
 8003886:	4798      	blx	r3
 8003888:	3601      	adds	r6, #1
 800388a:	e7f2      	b.n	8003872 <__libc_init_array+0x1e>
 800388c:	08003f08 	.word	0x08003f08
 8003890:	08003f08 	.word	0x08003f08
 8003894:	08003f08 	.word	0x08003f08
 8003898:	08003f0c 	.word	0x08003f0c

0800389c <_init>:
 800389c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800389e:	bf00      	nop
 80038a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038a2:	bc08      	pop	{r3}
 80038a4:	469e      	mov	lr, r3
 80038a6:	4770      	bx	lr

080038a8 <_fini>:
 80038a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038aa:	bf00      	nop
 80038ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ae:	bc08      	pop	{r3}
 80038b0:	469e      	mov	lr, r3
 80038b2:	4770      	bx	lr
